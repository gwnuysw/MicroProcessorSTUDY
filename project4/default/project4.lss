
project4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800200  00000328  000003bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000328  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000083  0080020e  0080020e  000003ca  2**0
                  ALLOC
  3 .stab         00000750  00000000  00000000  000003cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000e7  00000000  00000000  00000b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00000c08  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000607  00000000  00000000  00000cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000246  00000000  00000000  000012cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000038f  00000000  00000000  00001515  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000110  00000000  00000000  000018a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000109  00000000  00000000  000019b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000193  00000000  00000000  00001abd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  00001c50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
   8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
   c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  3c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  64:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  6c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__vector_27>
  70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  74:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 e2       	ldi	r30, 0x28	; 40
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ae 30       	cpi	r26, 0x0E	; 14
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
 110:	12 e0       	ldi	r17, 0x02	; 2
 112:	ae e0       	ldi	r26, 0x0E	; 14
 114:	b2 e0       	ldi	r27, 0x02	; 2
 116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
 118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
 11a:	a1 39       	cpi	r26, 0x91	; 145
 11c:	b1 07       	cpc	r27, r17
 11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
 120:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <main>
 124:	0c 94 92 01 	jmp	0x324	; 0x324 <_exit>

00000128 <__bad_interrupt>:
 128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <led_init>:
#include "led.h"

static uint8_t Leds;

void led_init() {
	DDRL = PORTL = 0xff;
 12c:	8f ef       	ldi	r24, 0xFF	; 255
 12e:	80 93 0b 01 	sts	0x010B, r24
 132:	80 93 0a 01 	sts	0x010A, r24
}
 136:	08 95       	ret

00000138 <led_on_all>:
void led_on_all(void) {
	Leds = PORTL = 0x00;
 138:	10 92 0b 01 	sts	0x010B, r1
 13c:	10 92 0e 02 	sts	0x020E, r1
}
 140:	08 95       	ret

00000142 <led_off_all>:
void led_off_all(void) {
	 Leds = PORTL = 0xff;
 142:	8f ef       	ldi	r24, 0xFF	; 255
 144:	80 93 0b 01 	sts	0x010B, r24
 148:	80 93 0e 02 	sts	0x020E, r24
}
 14c:	08 95       	ret

0000014e <led_on>:
void led_on(uint8_t led_no) {
	Leds &= ~(1 << led_no);
 14e:	21 e0       	ldi	r18, 0x01	; 1
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	02 c0       	rjmp	.+4      	; 0x158 <led_on+0xa>
 154:	22 0f       	add	r18, r18
 156:	33 1f       	adc	r19, r19
 158:	8a 95       	dec	r24
 15a:	e2 f7       	brpl	.-8      	; 0x154 <led_on+0x6>
 15c:	20 95       	com	r18
 15e:	80 91 0e 02 	lds	r24, 0x020E
 162:	28 23       	and	r18, r24
 164:	20 93 0e 02 	sts	0x020E, r18
	PORTL = Leds;
 168:	20 93 0b 01 	sts	0x010B, r18
}
 16c:	08 95       	ret

0000016e <led_off>:
void led_off(uint8_t led_no) {
	Leds |= (1 << led_no);
 16e:	21 e0       	ldi	r18, 0x01	; 1
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	02 c0       	rjmp	.+4      	; 0x178 <led_off+0xa>
 174:	22 0f       	add	r18, r18
 176:	33 1f       	adc	r19, r19
 178:	8a 95       	dec	r24
 17a:	e2 f7       	brpl	.-8      	; 0x174 <led_off+0x6>
 17c:	80 91 0e 02 	lds	r24, 0x020E
 180:	82 2b       	or	r24, r18
 182:	80 93 0e 02 	sts	0x020E, r24
	PORTL = Leds;
 186:	80 93 0b 01 	sts	0x010B, r24
}
 18a:	08 95       	ret

0000018c <led_set>:
void led_set(uint8_t led_mask) {
	Leds = ~led_mask;
 18c:	80 95       	com	r24
 18e:	80 93 0e 02 	sts	0x020E, r24
	PORTL = Leds;
 192:	80 93 0b 01 	sts	0x010B, r24
} 
 196:	08 95       	ret

00000198 <uart_init>:
#include <string.h>
 char buf[128];
 int volatile bufi, txend = 1;
void uart_init()
 {
	 UBRR0H = 0x00; UBRR0L = 0x07;// 115.2K
 198:	10 92 c5 00 	sts	0x00C5, r1
 19c:	87 e0       	ldi	r24, 0x07	; 7
 19e:	80 93 c4 00 	sts	0x00C4, r24
	 UCSR0A |= (1 << U2X0);
 1a2:	e0 ec       	ldi	r30, 0xC0	; 192
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	80 81       	ld	r24, Z
 1a8:	82 60       	ori	r24, 0x02	; 2
 1aa:	80 83       	st	Z, r24
	 UCSR0B |= (1 << TXEN0);
 1ac:	e1 ec       	ldi	r30, 0xC1	; 193
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	80 81       	ld	r24, Z
 1b2:	88 60       	ori	r24, 0x08	; 8
 1b4:	80 83       	st	Z, r24
	 UCSR0B |= (1 << TXCIE0); // TX complete interrupt enable
 1b6:	80 81       	ld	r24, Z
 1b8:	80 64       	ori	r24, 0x40	; 64
 1ba:	80 83       	st	Z, r24
 }
 1bc:	08 95       	ret

000001be <uart_putstart>:
 int uart_putstart(char str[])
 {
 1be:	bc 01       	movw	r22, r24
 	char ch;
	if(txend == 1){
 1c0:	80 91 0b 02 	lds	r24, 0x020B
 1c4:	90 91 0c 02 	lds	r25, 0x020C
 1c8:	81 30       	cpi	r24, 0x01	; 1
 1ca:	91 05       	cpc	r25, r1
 1cc:	e1 f4       	brne	.+56     	; 0x206 <uart_putstart+0x48>
		strcpy(buf, str); bufi = 0; txend = 0;
 1ce:	81 e1       	ldi	r24, 0x11	; 17
 1d0:	92 e0       	ldi	r25, 0x02	; 2
 1d2:	0e 94 8b 01 	call	0x316	; 0x316 <strcpy>
 1d6:	10 92 10 02 	sts	0x0210, r1
 1da:	10 92 0f 02 	sts	0x020F, r1
 1de:	10 92 0c 02 	sts	0x020C, r1
 1e2:	10 92 0b 02 	sts	0x020B, r1
		ch = buf[bufi++];
 1e6:	80 91 0f 02 	lds	r24, 0x020F
 1ea:	90 91 10 02 	lds	r25, 0x0210
 1ee:	fc 01       	movw	r30, r24
 1f0:	ef 5e       	subi	r30, 0xEF	; 239
 1f2:	fd 4f       	sbci	r31, 0xFD	; 253
 1f4:	20 81       	ld	r18, Z
 1f6:	01 96       	adiw	r24, 0x01	; 1
 1f8:	90 93 10 02 	sts	0x0210, r25
 1fc:	80 93 0f 02 	sts	0x020F, r24
		
		UDR0 = ch;
 200:	20 93 c6 00 	sts	0x00C6, r18
 204:	18 c0       	rjmp	.+48     	; 0x236 <uart_putstart+0x78>
	}
	else{
		strcpy(buf+(bufi+strlen(buf+bufi)), str);
 206:	20 91 0f 02 	lds	r18, 0x020F
 20a:	30 91 10 02 	lds	r19, 0x0210
 20e:	e0 91 0f 02 	lds	r30, 0x020F
 212:	f0 91 10 02 	lds	r31, 0x0210
 216:	ef 5e       	subi	r30, 0xEF	; 239
 218:	fd 4f       	sbci	r31, 0xFD	; 253
 21a:	df 01       	movw	r26, r30
 21c:	0d 90       	ld	r0, X+
 21e:	00 20       	and	r0, r0
 220:	e9 f7       	brne	.-6      	; 0x21c <uart_putstart+0x5e>
 222:	cd 01       	movw	r24, r26
 224:	01 97       	sbiw	r24, 0x01	; 1
 226:	8e 1b       	sub	r24, r30
 228:	9f 0b       	sbc	r25, r31
 22a:	82 0f       	add	r24, r18
 22c:	93 1f       	adc	r25, r19
 22e:	8f 5e       	subi	r24, 0xEF	; 239
 230:	9d 4f       	sbci	r25, 0xFD	; 253
 232:	0e 94 8b 01 	call	0x316	; 0x316 <strcpy>
	}
 	
	return(1);
 }
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	08 95       	ret

0000023c <__vector_27>:

ISR(USART0_TX_vect)
{
 23c:	1f 92       	push	r1
 23e:	0f 92       	push	r0
 240:	0f b6       	in	r0, 0x3f	; 63
 242:	0f 92       	push	r0
 244:	0b b6       	in	r0, 0x3b	; 59
 246:	0f 92       	push	r0
 248:	11 24       	eor	r1, r1
 24a:	2f 93       	push	r18
 24c:	8f 93       	push	r24
 24e:	9f 93       	push	r25
 250:	ef 93       	push	r30
 252:	ff 93       	push	r31
 	char ch = buf[bufi];
 254:	e0 91 0f 02 	lds	r30, 0x020F
 258:	f0 91 10 02 	lds	r31, 0x0210
 25c:	ef 5e       	subi	r30, 0xEF	; 239
 25e:	fd 4f       	sbci	r31, 0xFD	; 253
 260:	20 81       	ld	r18, Z
 	if (!ch) {
 262:	22 23       	and	r18, r18
 264:	39 f4       	brne	.+14     	; 0x274 <__vector_27+0x38>
 		txend = 1; return;
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	90 93 0c 02 	sts	0x020C, r25
 26e:	80 93 0b 02 	sts	0x020B, r24
 272:	16 c0       	rjmp	.+44     	; 0x2a0 <__vector_27+0x64>
 	}
 	if (ch == '\n')
 274:	2a 30       	cpi	r18, 0x0A	; 10
 276:	49 f4       	brne	.+18     	; 0x28a <__vector_27+0x4e>
 		buf[bufi] = '\r';
 278:	e0 91 0f 02 	lds	r30, 0x020F
 27c:	f0 91 10 02 	lds	r31, 0x0210
 280:	ef 5e       	subi	r30, 0xEF	; 239
 282:	fd 4f       	sbci	r31, 0xFD	; 253
 284:	8d e0       	ldi	r24, 0x0D	; 13
 286:	80 83       	st	Z, r24
 288:	09 c0       	rjmp	.+18     	; 0x29c <__vector_27+0x60>
 	else
		bufi++;
 28a:	80 91 0f 02 	lds	r24, 0x020F
 28e:	90 91 10 02 	lds	r25, 0x0210
 292:	01 96       	adiw	r24, 0x01	; 1
 294:	90 93 10 02 	sts	0x0210, r25
 298:	80 93 0f 02 	sts	0x020F, r24
 	UDR0 = ch;
 29c:	20 93 c6 00 	sts	0x00C6, r18
} 
 2a0:	ff 91       	pop	r31
 2a2:	ef 91       	pop	r30
 2a4:	9f 91       	pop	r25
 2a6:	8f 91       	pop	r24
 2a8:	2f 91       	pop	r18
 2aa:	0f 90       	pop	r0
 2ac:	0b be       	out	0x3b, r0	; 59
 2ae:	0f 90       	pop	r0
 2b0:	0f be       	out	0x3f, r0	; 63
 2b2:	0f 90       	pop	r0
 2b4:	1f 90       	pop	r1
 2b6:	18 95       	reti

000002b8 <main>:
#include <util/delay.h>
#include <avr/interrupt.h>
#include "uart_busy.h"

int main()
{
 2b8:	cf 93       	push	r28
 2ba:	df 93       	push	r29
 2bc:	00 d0       	rcall	.+0      	; 0x2be <main+0x6>
 2be:	0f 92       	push	r0
 2c0:	0f 92       	push	r0
 2c2:	cd b7       	in	r28, 0x3d	; 61
 2c4:	de b7       	in	r29, 0x3e	; 62
	int i, j;
	char buf[4] = {0};
 2c6:	19 82       	std	Y+1, r1	; 0x01
 2c8:	1a 82       	std	Y+2, r1	; 0x02
 2ca:	1b 82       	std	Y+3, r1	; 0x03
 2cc:	1c 82       	std	Y+4, r1	; 0x04
 	uart_init();
 2ce:	0e 94 cc 00 	call	0x198	; 0x198 <uart_init>
 	sei();
 2d2:	78 94       	sei
 2d4:	03 e0       	ldi	r16, 0x03	; 3
 2d6:	10 e0       	ldi	r17, 0x00	; 0
 2d8:	11 c0       	rjmp	.+34     	; 0x2fc <main+0x44>
 	for(i = 0; i < 3; i++){
		for(j = 'A'; j <='Z'; j++){
			buf[0] = j;
 2da:	29 83       	std	Y+1, r18	; 0x01
			uart_putstart(buf);
 2dc:	ce 01       	movw	r24, r28
 2de:	01 96       	adiw	r24, 0x01	; 1
 2e0:	2d 83       	std	Y+5, r18	; 0x05
 2e2:	0e 94 df 00 	call	0x1be	; 0x1be <uart_putstart>
 2e6:	2d 81       	ldd	r18, Y+5	; 0x05
 2e8:	2f 5f       	subi	r18, 0xFF	; 255
	int i, j;
	char buf[4] = {0};
 	uart_init();
 	sei();
 	for(i = 0; i < 3; i++){
		for(j = 'A'; j <='Z'; j++){
 2ea:	2b 35       	cpi	r18, 0x5B	; 91
 2ec:	b1 f7       	brne	.-20     	; 0x2da <main+0x22>
			buf[0] = j;
			uart_putstart(buf);
		}
		uart_putstart("\n");
 2ee:	80 e0       	ldi	r24, 0x00	; 0
 2f0:	92 e0       	ldi	r25, 0x02	; 2
 2f2:	0e 94 df 00 	call	0x1be	; 0x1be <uart_putstart>
 2f6:	01 50       	subi	r16, 0x01	; 1
 2f8:	10 40       	sbci	r17, 0x00	; 0
{
	int i, j;
	char buf[4] = {0};
 	uart_init();
 	sei();
 	for(i = 0; i < 3; i++){
 2fa:	11 f0       	breq	.+4      	; 0x300 <main+0x48>
#include <util/delay.h>
#include <avr/interrupt.h>
#include "uart_busy.h"

int main()
{
 2fc:	21 e4       	ldi	r18, 0x41	; 65
 2fe:	ed cf       	rjmp	.-38     	; 0x2da <main+0x22>
			buf[0] = j;
			uart_putstart(buf);
		}
		uart_putstart("\n");
	}
 	while(!txend);
 300:	80 91 0b 02 	lds	r24, 0x020B
 304:	90 91 0c 02 	lds	r25, 0x020C
 308:	00 97       	sbiw	r24, 0x00	; 0
 30a:	d1 f3       	breq	.-12     	; 0x300 <main+0x48>
 	uart_putstart("End !!!\n");
 30c:	82 e0       	ldi	r24, 0x02	; 2
 30e:	92 e0       	ldi	r25, 0x02	; 2
 310:	0e 94 df 00 	call	0x1be	; 0x1be <uart_putstart>
 314:	ff cf       	rjmp	.-2      	; 0x314 <main+0x5c>

00000316 <strcpy>:
 316:	fb 01       	movw	r30, r22
 318:	dc 01       	movw	r26, r24
 31a:	01 90       	ld	r0, Z+
 31c:	0d 92       	st	X+, r0
 31e:	00 20       	and	r0, r0
 320:	e1 f7       	brne	.-8      	; 0x31a <strcpy+0x4>
 322:	08 95       	ret

00000324 <_exit>:
 324:	f8 94       	cli

00000326 <__stop_program>:
 326:	ff cf       	rjmp	.-2      	; 0x326 <__stop_program>
