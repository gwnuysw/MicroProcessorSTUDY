
project13.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000288  00800200  00002826  000028ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002826  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002c3  00800488  00800488  00002b42  2**0
                  ALLOC
  3 .stab         0000117c  00000000  00000000  00002b44  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000039d  00000000  00000000  00003cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000004c8  00000000  00000000  00004060  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004d9f  00000000  00000000  00004528  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000027cc  00000000  00000000  000092c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000246e  00000000  00000000  0000ba93  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c70  00000000  00000000  0000df04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b8c  00000000  00000000  0000eb74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002ce6  00000000  00000000  0000f700  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  000123e6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      3c:	0c 94 5b 06 	jmp	0xcb6	; 0xcb6 <__vector_15>
      40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      60:	0c 94 8f 07 	jmp	0xf1e	; 0xf1e <__vector_24>
      64:	0c 94 2c 07 	jmp	0xe58	; 0xe58 <__vector_25>
      68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      6c:	0c 94 fd 06 	jmp	0xdfa	; 0xdfa <__vector_27>
      70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      74:	0c 94 ab 00 	jmp	0x156	; 0x156 <__vector_29>
      78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	14 e0       	ldi	r17, 0x04	; 4
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e6 e2       	ldi	r30, 0x26	; 38
      fc:	f8 e2       	ldi	r31, 0x28	; 40
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a8 38       	cpi	r26, 0x88	; 136
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
     10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
     110:	17 e0       	ldi	r17, 0x07	; 7
     112:	a8 e8       	ldi	r26, 0x88	; 136
     114:	b4 e0       	ldi	r27, 0x04	; 4
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	ab 34       	cpi	r26, 0x4B	; 75
     11c:	b1 07       	cpc	r27, r17
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
     120:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <main>
     124:	0c 94 11 14 	jmp	0x2822	; 0x2822 <_exit>

00000128 <__bad_interrupt>:
     128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <adc_init>:
#include "list.h"
#include <util/delay.h>
#include "timer.h"
#include "led.h"
void  adc_init() {
	cbi(DDRF, PF0);   // make input PF0(=ADC0) GPIO
     12c:	80 98       	cbi	0x10, 0	; 16
	ADMUX = 0x80 | 0x00; // Ref. : 1.1v, Port : PF0    
     12e:	80 e8       	ldi	r24, 0x80	; 128
     130:	80 93 7c 00 	sts	0x007C, r24
} 
     134:	08 95       	ret

00000136 <adc_start>:
 
void adc_start(){
	sbi(ADCSRA, ADEN);    // ADC enable 
     136:	ea e7       	ldi	r30, 0x7A	; 122
     138:	f0 e0       	ldi	r31, 0x00	; 0
     13a:	80 81       	ld	r24, Z
     13c:	80 68       	ori	r24, 0x80	; 128
     13e:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     140:	8d ed       	ldi	r24, 0xDD	; 221
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	01 97       	sbiw	r24, 0x01	; 1
     146:	f1 f7       	brne	.-4      	; 0x144 <adc_start+0xe>
	_delay_us(120);             
	sbi(ADCSRA, ADIE);     // Interrupt Enable
     148:	80 81       	ld	r24, Z
     14a:	88 60       	ori	r24, 0x08	; 8
     14c:	80 83       	st	Z, r24
	sbi(ADCSRA, ADSC);    // Start conversion
     14e:	80 81       	ld	r24, Z
     150:	80 64       	ori	r24, 0x40	; 64
     152:	80 83       	st	Z, r24
}
     154:	08 95       	ret

00000156 <__vector_29>:
 ISR(ADC_vect)  { 
     156:	1f 92       	push	r1
     158:	0f 92       	push	r0
     15a:	0f b6       	in	r0, 0x3f	; 63
     15c:	0f 92       	push	r0
     15e:	0b b6       	in	r0, 0x3b	; 59
     160:	0f 92       	push	r0
     162:	11 24       	eor	r1, r1
     164:	2f 93       	push	r18
     166:	3f 93       	push	r19
     168:	4f 93       	push	r20
     16a:	5f 93       	push	r21
     16c:	6f 93       	push	r22
     16e:	7f 93       	push	r23
     170:	8f 93       	push	r24
     172:	9f 93       	push	r25
     174:	af 93       	push	r26
     176:	bf 93       	push	r27
     178:	ef 93       	push	r30
     17a:	ff 93       	push	r31
     17c:	cf 93       	push	r28
     17e:	df 93       	push	r29
     180:	cd b7       	in	r28, 0x3d	; 61
     182:	de b7       	in	r29, 0x3e	; 62
     184:	2a 97       	sbiw	r28, 0x0a	; 10
     186:	de bf       	out	0x3e, r29	; 62
     188:	cd bf       	out	0x3d, r28	; 61
 	struct  task  task; 
	uint16_t       data; 
 
 
    data = ADCW & 0x03ff;
     18a:	80 91 78 00 	lds	r24, 0x0078
     18e:	90 91 79 00 	lds	r25, 0x0079
	cbi(ADCSRA, ADEN);   
     192:	ea e7       	ldi	r30, 0x7A	; 122
     194:	f0 e0       	ldi	r31, 0x00	; 0
     196:	20 81       	ld	r18, Z
     198:	2f 77       	andi	r18, 0x7F	; 127
     19a:	20 83       	st	Z, r18
	task.fun = task_tc1047a;
     19c:	2e e3       	ldi	r18, 0x3E	; 62
     19e:	34 e0       	ldi	r19, 0x04	; 4
     1a0:	3a 83       	std	Y+2, r19	; 0x02
     1a2:	29 83       	std	Y+1, r18	; 0x01
	sprintf(task.arg, "%d", data); 
     1a4:	00 d0       	rcall	.+0      	; 0x1a6 <__vector_29+0x50>
     1a6:	00 d0       	rcall	.+0      	; 0x1a8 <__vector_29+0x52>
     1a8:	ed b7       	in	r30, 0x3d	; 61
     1aa:	fe b7       	in	r31, 0x3e	; 62
     1ac:	31 96       	adiw	r30, 0x01	; 1
     1ae:	9e 01       	movw	r18, r28
     1b0:	2d 5f       	subi	r18, 0xFD	; 253
     1b2:	3f 4f       	sbci	r19, 0xFF	; 255
     1b4:	ad b7       	in	r26, 0x3d	; 61
     1b6:	be b7       	in	r27, 0x3e	; 62
     1b8:	12 96       	adiw	r26, 0x02	; 2
     1ba:	3c 93       	st	X, r19
     1bc:	2e 93       	st	-X, r18
     1be:	11 97       	sbiw	r26, 0x01	; 1
     1c0:	20 e0       	ldi	r18, 0x00	; 0
     1c2:	32 e0       	ldi	r19, 0x02	; 2
     1c4:	33 83       	std	Z+3, r19	; 0x03
     1c6:	22 83       	std	Z+2, r18	; 0x02
 ISR(ADC_vect)  { 
 	struct  task  task; 
	uint16_t       data; 
 
 
    data = ADCW & 0x03ff;
     1c8:	93 70       	andi	r25, 0x03	; 3
	cbi(ADCSRA, ADEN);   
	task.fun = task_tc1047a;
	sprintf(task.arg, "%d", data); 
     1ca:	95 83       	std	Z+5, r25	; 0x05
     1cc:	84 83       	std	Z+4, r24	; 0x04
     1ce:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <sprintf>
    task_insert(&task);     
     1d2:	8d b7       	in	r24, 0x3d	; 61
     1d4:	9e b7       	in	r25, 0x3e	; 62
     1d6:	06 96       	adiw	r24, 0x06	; 6
     1d8:	0f b6       	in	r0, 0x3f	; 63
     1da:	f8 94       	cli
     1dc:	9e bf       	out	0x3e, r25	; 62
     1de:	0f be       	out	0x3f, r0	; 63
     1e0:	8d bf       	out	0x3d, r24	; 61
     1e2:	ce 01       	movw	r24, r28
     1e4:	01 96       	adiw	r24, 0x01	; 1
     1e6:	0e 94 c9 03 	call	0x792	; 0x792 <task_insert>
}    
     1ea:	2a 96       	adiw	r28, 0x0a	; 10
     1ec:	de bf       	out	0x3e, r29	; 62
     1ee:	cd bf       	out	0x3d, r28	; 61
     1f0:	df 91       	pop	r29
     1f2:	cf 91       	pop	r28
     1f4:	ff 91       	pop	r31
     1f6:	ef 91       	pop	r30
     1f8:	bf 91       	pop	r27
     1fa:	af 91       	pop	r26
     1fc:	9f 91       	pop	r25
     1fe:	8f 91       	pop	r24
     200:	7f 91       	pop	r23
     202:	6f 91       	pop	r22
     204:	5f 91       	pop	r21
     206:	4f 91       	pop	r20
     208:	3f 91       	pop	r19
     20a:	2f 91       	pop	r18
     20c:	0f 90       	pop	r0
     20e:	0b be       	out	0x3b, r0	; 59
     210:	0f 90       	pop	r0
     212:	0f be       	out	0x3f, r0	; 63
     214:	0f 90       	pop	r0
     216:	1f 90       	pop	r1
     218:	18 95       	reti

0000021a <is_prime>:
#include "task.h"
#include "timer.h"
extern volatile int exe_time;

int is_prime(int n)
{
     21a:	cf 93       	push	r28
     21c:	df 93       	push	r29
     21e:	fc 01       	movw	r30, r24
 int i;
 for (i = 2; i <= n/2; i++)
     220:	62 e0       	ldi	r22, 0x02	; 2
     222:	70 e0       	ldi	r23, 0x00	; 0
     224:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <__divmodhi4>
     228:	eb 01       	movw	r28, r22
     22a:	22 e0       	ldi	r18, 0x02	; 2
     22c:	30 e0       	ldi	r19, 0x00	; 0
     22e:	08 c0       	rjmp	.+16     	; 0x240 <is_prime+0x26>
	 if ((n % i) == 0)
     230:	cf 01       	movw	r24, r30
     232:	b9 01       	movw	r22, r18
     234:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <__divmodhi4>
     238:	00 97       	sbiw	r24, 0x00	; 0
     23a:	41 f0       	breq	.+16     	; 0x24c <is_prime+0x32>
extern volatile int exe_time;

int is_prime(int n)
{
 int i;
 for (i = 2; i <= n/2; i++)
     23c:	2f 5f       	subi	r18, 0xFF	; 255
     23e:	3f 4f       	sbci	r19, 0xFF	; 255
     240:	c2 17       	cp	r28, r18
     242:	d3 07       	cpc	r29, r19
     244:	ac f7       	brge	.-22     	; 0x230 <is_prime+0x16>
	 if ((n % i) == 0)
	 	return(0);
 return(1);
     246:	81 e0       	ldi	r24, 0x01	; 1
     248:	90 e0       	ldi	r25, 0x00	; 0
     24a:	02 c0       	rjmp	.+4      	; 0x250 <is_prime+0x36>
int is_prime(int n)
{
 int i;
 for (i = 2; i <= n/2; i++)
	 if ((n % i) == 0)
	 	return(0);
     24c:	80 e0       	ldi	r24, 0x00	; 0
     24e:	90 e0       	ldi	r25, 0x00	; 0
 return(1);
}
     250:	df 91       	pop	r29
     252:	cf 91       	pop	r28
     254:	08 95       	ret

00000256 <app_prime>:
void app_prime(char *ap)
{
     256:	cf 92       	push	r12
     258:	df 92       	push	r13
     25a:	ef 92       	push	r14
     25c:	ff 92       	push	r15
     25e:	0f 93       	push	r16
     260:	1f 93       	push	r17
     262:	cf 93       	push	r28
     264:	df 93       	push	r29
 int n = 2000, count = 0, t;
 if (ap) t = atoi(ap);
     266:	00 97       	sbiw	r24, 0x00	; 0
     268:	19 f0       	breq	.+6      	; 0x270 <app_prime+0x1a>
     26a:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <atoi>
     26e:	6c 01       	movw	r12, r24
	 	return(0);
 return(1);
}
void app_prime(char *ap)
{
 int n = 2000, count = 0, t;
     270:	00 e0       	ldi	r16, 0x00	; 0
     272:	10 e0       	ldi	r17, 0x00	; 0
 if (ap) t = atoi(ap);

 for (n = 2; n <= t; n++) {
     274:	c2 e0       	ldi	r28, 0x02	; 2
     276:	d0 e0       	ldi	r29, 0x00	; 0
 	if (is_prime(n)) {
	 	count++;
	 	printf("%d is a prime number !!!\n", n);
     278:	83 e0       	ldi	r24, 0x03	; 3
     27a:	e8 2e       	mov	r14, r24
     27c:	82 e0       	ldi	r24, 0x02	; 2
     27e:	f8 2e       	mov	r15, r24
void app_prime(char *ap)
{
 int n = 2000, count = 0, t;
 if (ap) t = atoi(ap);

 for (n = 2; n <= t; n++) {
     280:	16 c0       	rjmp	.+44     	; 0x2ae <app_prime+0x58>
 	if (is_prime(n)) {
     282:	ce 01       	movw	r24, r28
     284:	0e 94 0d 01 	call	0x21a	; 0x21a <is_prime>
     288:	00 97       	sbiw	r24, 0x00	; 0
     28a:	81 f0       	breq	.+32     	; 0x2ac <app_prime+0x56>
	 	count++;
     28c:	0f 5f       	subi	r16, 0xFF	; 255
     28e:	1f 4f       	sbci	r17, 0xFF	; 255
	 	printf("%d is a prime number !!!\n", n);
     290:	00 d0       	rcall	.+0      	; 0x292 <app_prime+0x3c>
     292:	0f 92       	push	r0
     294:	ed b7       	in	r30, 0x3d	; 61
     296:	fe b7       	in	r31, 0x3e	; 62
     298:	f2 82       	std	Z+2, r15	; 0x02
     29a:	e1 82       	std	Z+1, r14	; 0x01
     29c:	d4 83       	std	Z+4, r29	; 0x04
     29e:	c3 83       	std	Z+3, r28	; 0x03
     2a0:	0e 94 b4 10 	call	0x2168	; 0x2168 <printf>
     2a4:	0f 90       	pop	r0
     2a6:	0f 90       	pop	r0
     2a8:	0f 90       	pop	r0
     2aa:	0f 90       	pop	r0
void app_prime(char *ap)
{
 int n = 2000, count = 0, t;
 if (ap) t = atoi(ap);

 for (n = 2; n <= t; n++) {
     2ac:	21 96       	adiw	r28, 0x01	; 1
     2ae:	cc 16       	cp	r12, r28
     2b0:	dd 06       	cpc	r13, r29
     2b2:	3c f7       	brge	.-50     	; 0x282 <app_prime+0x2c>
 	if (is_prime(n)) {
	 	count++;
	 	printf("%d is a prime number !!!\n", n);
	 }
 }
 printf("count=%d\n", count);
     2b4:	00 d0       	rcall	.+0      	; 0x2b6 <app_prime+0x60>
     2b6:	0f 92       	push	r0
     2b8:	8d e1       	ldi	r24, 0x1D	; 29
     2ba:	92 e0       	ldi	r25, 0x02	; 2
     2bc:	ed b7       	in	r30, 0x3d	; 61
     2be:	fe b7       	in	r31, 0x3e	; 62
     2c0:	92 83       	std	Z+2, r25	; 0x02
     2c2:	81 83       	std	Z+1, r24	; 0x01
     2c4:	14 83       	std	Z+4, r17	; 0x04
     2c6:	03 83       	std	Z+3, r16	; 0x03
     2c8:	0e 94 b4 10 	call	0x2168	; 0x2168 <printf>
     2cc:	0f 90       	pop	r0
     2ce:	0f 90       	pop	r0
     2d0:	0f 90       	pop	r0
     2d2:	0f 90       	pop	r0
}
     2d4:	df 91       	pop	r29
     2d6:	cf 91       	pop	r28
     2d8:	1f 91       	pop	r17
     2da:	0f 91       	pop	r16
     2dc:	ff 90       	pop	r15
     2de:	ef 90       	pop	r14
     2e0:	df 90       	pop	r13
     2e2:	cf 90       	pop	r12
     2e4:	08 95       	ret

000002e6 <app_list>:
void app_list(char *ap)
{

}
     2e6:	08 95       	ret

000002e8 <app_timer>:
 void  app_timer(char *ap)  {
     2e8:	0f 93       	push	r16
     2ea:	1f 93       	push	r17
     2ec:	cf 93       	push	r28
     2ee:	df 93       	push	r29
     2f0:	cd b7       	in	r28, 0x3d	; 61
     2f2:	de b7       	in	r29, 0x3e	; 62
     2f4:	62 97       	sbiw	r28, 0x12	; 18
     2f6:	0f b6       	in	r0, 0x3f	; 63
     2f8:	f8 94       	cli
     2fa:	de bf       	out	0x3e, r29	; 62
     2fc:	0f be       	out	0x3f, r0	; 63
     2fe:	cd bf       	out	0x3d, r28	; 61
 	char buf[8];
	int ms;
	struct task  tsk;
	while(1) {
		printf(">> ");
     300:	07 e2       	ldi	r16, 0x27	; 39
     302:	12 e0       	ldi	r17, 0x02	; 2
     304:	0f 92       	push	r0
     306:	0f 92       	push	r0
     308:	ed b7       	in	r30, 0x3d	; 61
     30a:	fe b7       	in	r31, 0x3e	; 62
     30c:	12 83       	std	Z+2, r17	; 0x02
     30e:	01 83       	std	Z+1, r16	; 0x01
     310:	0e 94 b4 10 	call	0x2168	; 0x2168 <printf>
		if (fgets(buf, 8, stdin) == NULL || (ms = atoi(buf)) == 0)
     314:	0f 90       	pop	r0
     316:	0f 90       	pop	r0
     318:	40 91 45 07 	lds	r20, 0x0745
     31c:	50 91 46 07 	lds	r21, 0x0746
     320:	ce 01       	movw	r24, r28
     322:	01 96       	adiw	r24, 0x01	; 1
     324:	68 e0       	ldi	r22, 0x08	; 8
     326:	70 e0       	ldi	r23, 0x00	; 0
     328:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <fgets>
     32c:	00 97       	sbiw	r24, 0x00	; 0
     32e:	61 f0       	breq	.+24     	; 0x348 <app_timer+0x60>
     330:	ce 01       	movw	r24, r28
     332:	01 96       	adiw	r24, 0x01	; 1
     334:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <atoi>
     338:	bc 01       	movw	r22, r24
     33a:	00 97       	sbiw	r24, 0x00	; 0
     33c:	29 f0       	breq	.+10     	; 0x348 <app_timer+0x60>
			break; 
        insert_timer(&tsk, ms);
     33e:	ce 01       	movw	r24, r28
     340:	09 96       	adiw	r24, 0x09	; 9
     342:	0e 94 b6 05 	call	0xb6c	; 0xb6c <insert_timer>
	}
     346:	de cf       	rjmp	.-68     	; 0x304 <app_timer+0x1c>
	tour_timer();
     348:	0e 94 5e 05 	call	0xabc	; 0xabc <tour_timer>
	free_timer();
     34c:	0e 94 a0 05 	call	0xb40	; 0xb40 <free_timer>
} 
     350:	62 96       	adiw	r28, 0x12	; 18
     352:	0f b6       	in	r0, 0x3f	; 63
     354:	f8 94       	cli
     356:	de bf       	out	0x3e, r29	; 62
     358:	0f be       	out	0x3f, r0	; 63
     35a:	cd bf       	out	0x3d, r28	; 61
     35c:	df 91       	pop	r29
     35e:	cf 91       	pop	r28
     360:	1f 91       	pop	r17
     362:	0f 91       	pop	r16
     364:	08 95       	ret

00000366 <app_time>:
void app_time(){
     366:	cf 93       	push	r28
     368:	df 93       	push	r29
	printf("MIN : SEC\n");
     36a:	8b e2       	ldi	r24, 0x2B	; 43
     36c:	92 e0       	ldi	r25, 0x02	; 2
     36e:	0e 94 cd 10 	call	0x219a	; 0x219a <puts>
	printf("%.2d : %.2d\n", exe_time/60, exe_time%60);
     372:	80 91 94 04 	lds	r24, 0x0494
     376:	90 91 95 04 	lds	r25, 0x0495
     37a:	e0 91 94 04 	lds	r30, 0x0494
     37e:	f0 91 95 04 	lds	r31, 0x0495
     382:	00 d0       	rcall	.+0      	; 0x384 <app_time+0x1e>
     384:	00 d0       	rcall	.+0      	; 0x386 <app_time+0x20>
     386:	cd b7       	in	r28, 0x3d	; 61
     388:	de b7       	in	r29, 0x3e	; 62
     38a:	21 96       	adiw	r28, 0x01	; 1
     38c:	25 e3       	ldi	r18, 0x35	; 53
     38e:	32 e0       	ldi	r19, 0x02	; 2
     390:	ad b7       	in	r26, 0x3d	; 61
     392:	be b7       	in	r27, 0x3e	; 62
     394:	12 96       	adiw	r26, 0x02	; 2
     396:	3c 93       	st	X, r19
     398:	2e 93       	st	-X, r18
     39a:	11 97       	sbiw	r26, 0x01	; 1
     39c:	2c e3       	ldi	r18, 0x3C	; 60
     39e:	30 e0       	ldi	r19, 0x00	; 0
     3a0:	b9 01       	movw	r22, r18
     3a2:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <__divmodhi4>
     3a6:	7b 83       	std	Y+3, r23	; 0x03
     3a8:	6a 83       	std	Y+2, r22	; 0x02
     3aa:	cf 01       	movw	r24, r30
     3ac:	b9 01       	movw	r22, r18
     3ae:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <__divmodhi4>
     3b2:	9d 83       	std	Y+5, r25	; 0x05
     3b4:	8c 83       	std	Y+4, r24	; 0x04
     3b6:	0e 94 b4 10 	call	0x2168	; 0x2168 <printf>
     3ba:	8d b7       	in	r24, 0x3d	; 61
     3bc:	9e b7       	in	r25, 0x3e	; 62
     3be:	06 96       	adiw	r24, 0x06	; 6
     3c0:	0f b6       	in	r0, 0x3f	; 63
     3c2:	f8 94       	cli
     3c4:	9e bf       	out	0x3e, r25	; 62
     3c6:	0f be       	out	0x3f, r0	; 63
     3c8:	8d bf       	out	0x3d, r24	; 61
	
}
     3ca:	df 91       	pop	r29
     3cc:	cf 91       	pop	r28
     3ce:	08 95       	ret

000003d0 <led_init>:
#include "timer.h"

static uint8_t Leds;

void led_init() {
	DDRL = PORTL = 0xff;
     3d0:	8f ef       	ldi	r24, 0xFF	; 255
     3d2:	80 93 0b 01 	sts	0x010B, r24
     3d6:	80 93 0a 01 	sts	0x010A, r24
}
     3da:	08 95       	ret

000003dc <led_on_all>:
void led_on_all(void) {
	Leds = PORTL = 0x00;
     3dc:	10 92 0b 01 	sts	0x010B, r1
     3e0:	10 92 88 04 	sts	0x0488, r1
}
     3e4:	08 95       	ret

000003e6 <led_off_all>:
void led_off_all(void) {
	 Leds = PORTL = 0xff;
     3e6:	8f ef       	ldi	r24, 0xFF	; 255
     3e8:	80 93 0b 01 	sts	0x010B, r24
     3ec:	80 93 88 04 	sts	0x0488, r24
}
     3f0:	08 95       	ret

000003f2 <task_led>:
	else{
		led_off_all();
		flag = 0;
	}
}*/
void task_led(char *ap){
     3f2:	0f 93       	push	r16
     3f4:	1f 93       	push	r17
     3f6:	cf 93       	push	r28
     3f8:	df 93       	push	r29
     3fa:	cd b7       	in	r28, 0x3d	; 61
     3fc:	de b7       	in	r29, 0x3e	; 62
     3fe:	2a 97       	sbiw	r28, 0x0a	; 10
     400:	0f b6       	in	r0, 0x3f	; 63
     402:	f8 94       	cli
     404:	de bf       	out	0x3e, r29	; 62
     406:	0f be       	out	0x3f, r0	; 63
     408:	cd bf       	out	0x3d, r28	; 61
	struct task task;
	static int tag;
	int ms = 1024*5;
	if(ap&&*ap)
     40a:	00 97       	sbiw	r24, 0x00	; 0
     40c:	41 f0       	breq	.+16     	; 0x41e <task_led+0x2c>
     40e:	dc 01       	movw	r26, r24
     410:	2c 91       	ld	r18, X
     412:	22 23       	and	r18, r18
     414:	21 f0       	breq	.+8      	; 0x41e <task_led+0x2c>
		ms = atoi(ap);
     416:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <atoi>
     41a:	8c 01       	movw	r16, r24
     41c:	02 c0       	rjmp	.+4      	; 0x422 <task_led+0x30>
	}
}*/
void task_led(char *ap){
	struct task task;
	static int tag;
	int ms = 1024*5;
     41e:	00 e0       	ldi	r16, 0x00	; 0
     420:	14 e1       	ldi	r17, 0x14	; 20
	if(ap&&*ap)
		ms = atoi(ap);
	
	if(tag){
     422:	80 91 89 04 	lds	r24, 0x0489
     426:	90 91 8a 04 	lds	r25, 0x048A
     42a:	00 97       	sbiw	r24, 0x00	; 0
     42c:	39 f0       	breq	.+14     	; 0x43c <task_led+0x4a>
		led_on_all();
     42e:	0e 94 ee 01 	call	0x3dc	; 0x3dc <led_on_all>
		tag = 0;
     432:	10 92 8a 04 	sts	0x048A, r1
     436:	10 92 89 04 	sts	0x0489, r1
     43a:	08 c0       	rjmp	.+16     	; 0x44c <task_led+0x5a>
	}
	else{
		led_off_all();
     43c:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <led_off_all>
		tag = 1;
     440:	81 e0       	ldi	r24, 0x01	; 1
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	90 93 8a 04 	sts	0x048A, r25
     448:	80 93 89 04 	sts	0x0489, r24
	}
	task.fun=task_led;
     44c:	89 ef       	ldi	r24, 0xF9	; 249
     44e:	91 e0       	ldi	r25, 0x01	; 1
     450:	9a 83       	std	Y+2, r25	; 0x02
     452:	89 83       	std	Y+1, r24	; 0x01
	sprintf(task.arg,"%d",ms);
     454:	00 d0       	rcall	.+0      	; 0x456 <task_led+0x64>
     456:	00 d0       	rcall	.+0      	; 0x458 <task_led+0x66>
     458:	ed b7       	in	r30, 0x3d	; 61
     45a:	fe b7       	in	r31, 0x3e	; 62
     45c:	31 96       	adiw	r30, 0x01	; 1
     45e:	ce 01       	movw	r24, r28
     460:	03 96       	adiw	r24, 0x03	; 3
     462:	ad b7       	in	r26, 0x3d	; 61
     464:	be b7       	in	r27, 0x3e	; 62
     466:	12 96       	adiw	r26, 0x02	; 2
     468:	9c 93       	st	X, r25
     46a:	8e 93       	st	-X, r24
     46c:	11 97       	sbiw	r26, 0x01	; 1
     46e:	82 e4       	ldi	r24, 0x42	; 66
     470:	92 e0       	ldi	r25, 0x02	; 2
     472:	93 83       	std	Z+3, r25	; 0x03
     474:	82 83       	std	Z+2, r24	; 0x02
     476:	15 83       	std	Z+5, r17	; 0x05
     478:	04 83       	std	Z+4, r16	; 0x04
     47a:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <sprintf>
	insert_timer(&task, ms/256);
     47e:	ed b7       	in	r30, 0x3d	; 61
     480:	fe b7       	in	r31, 0x3e	; 62
     482:	36 96       	adiw	r30, 0x06	; 6
     484:	0f b6       	in	r0, 0x3f	; 63
     486:	f8 94       	cli
     488:	fe bf       	out	0x3e, r31	; 62
     48a:	0f be       	out	0x3f, r0	; 63
     48c:	ed bf       	out	0x3d, r30	; 61
     48e:	c8 01       	movw	r24, r16
     490:	60 e0       	ldi	r22, 0x00	; 0
     492:	71 e0       	ldi	r23, 0x01	; 1
     494:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <__divmodhi4>
     498:	ce 01       	movw	r24, r28
     49a:	01 96       	adiw	r24, 0x01	; 1
     49c:	0e 94 b6 05 	call	0xb6c	; 0xb6c <insert_timer>
}
     4a0:	2a 96       	adiw	r28, 0x0a	; 10
     4a2:	0f b6       	in	r0, 0x3f	; 63
     4a4:	f8 94       	cli
     4a6:	de bf       	out	0x3e, r29	; 62
     4a8:	0f be       	out	0x3f, r0	; 63
     4aa:	cd bf       	out	0x3d, r28	; 61
     4ac:	df 91       	pop	r29
     4ae:	cf 91       	pop	r28
     4b0:	1f 91       	pop	r17
     4b2:	0f 91       	pop	r16
     4b4:	08 95       	ret

000004b6 <led_on>:
}
void led_off_all(void) {
	 Leds = PORTL = 0xff;
}
void led_on(uint8_t led_no) {
	Leds &= ~(1 << led_no);
     4b6:	21 e0       	ldi	r18, 0x01	; 1
     4b8:	30 e0       	ldi	r19, 0x00	; 0
     4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <led_on+0xa>
     4bc:	22 0f       	add	r18, r18
     4be:	33 1f       	adc	r19, r19
     4c0:	8a 95       	dec	r24
     4c2:	e2 f7       	brpl	.-8      	; 0x4bc <led_on+0x6>
     4c4:	20 95       	com	r18
     4c6:	80 91 88 04 	lds	r24, 0x0488
     4ca:	28 23       	and	r18, r24
     4cc:	20 93 88 04 	sts	0x0488, r18
	PORTL = Leds;
     4d0:	20 93 0b 01 	sts	0x010B, r18
}
     4d4:	08 95       	ret

000004d6 <led_off>:
void led_off(uint8_t led_no) {
	Leds |= (1 << led_no);
     4d6:	21 e0       	ldi	r18, 0x01	; 1
     4d8:	30 e0       	ldi	r19, 0x00	; 0
     4da:	02 c0       	rjmp	.+4      	; 0x4e0 <led_off+0xa>
     4dc:	22 0f       	add	r18, r18
     4de:	33 1f       	adc	r19, r19
     4e0:	8a 95       	dec	r24
     4e2:	e2 f7       	brpl	.-8      	; 0x4dc <led_off+0x6>
     4e4:	80 91 88 04 	lds	r24, 0x0488
     4e8:	82 2b       	or	r24, r18
     4ea:	80 93 88 04 	sts	0x0488, r24
	PORTL = Leds;
     4ee:	80 93 0b 01 	sts	0x010B, r24
}
     4f2:	08 95       	ret

000004f4 <led_set>:
void led_set(uint8_t led_mask) {
	Leds = ~led_mask;
     4f4:	80 95       	com	r24
     4f6:	80 93 88 04 	sts	0x0488, r24
	PORTL = Leds;
     4fa:	80 93 0b 01 	sts	0x010B, r24
} 
     4fe:	08 95       	ret

00000500 <q_init>:
char qo[QO_SIZE];
int fi, ri;
int fo, ro;
void q_init()
{
	fi = ri = fo = ro = 0;
     500:	10 92 9d 05 	sts	0x059D, r1
     504:	10 92 9c 05 	sts	0x059C, r1
     508:	10 92 9b 05 	sts	0x059B, r1
     50c:	10 92 9a 05 	sts	0x059A, r1
     510:	10 92 9f 05 	sts	0x059F, r1
     514:	10 92 9e 05 	sts	0x059E, r1
     518:	10 92 99 04 	sts	0x0499, r1
     51c:	10 92 98 04 	sts	0x0498, r1
}
     520:	08 95       	ret

00000522 <qi_insert>:
int qi_insert(char ch)
{
     522:	48 2f       	mov	r20, r24
 	if ((ri + 1) % QI_SIZE == fi)
     524:	20 91 9e 05 	lds	r18, 0x059E
     528:	30 91 9f 05 	lds	r19, 0x059F
     52c:	2f 5f       	subi	r18, 0xFF	; 255
     52e:	3f 4f       	sbci	r19, 0xFF	; 255
     530:	c9 01       	movw	r24, r18
     532:	60 e0       	ldi	r22, 0x00	; 0
     534:	71 e0       	ldi	r23, 0x01	; 1
     536:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <__divmodhi4>
     53a:	9c 01       	movw	r18, r24
     53c:	80 91 98 04 	lds	r24, 0x0498
     540:	90 91 99 04 	lds	r25, 0x0499
     544:	28 17       	cp	r18, r24
     546:	39 07       	cpc	r19, r25
     548:	59 f0       	breq	.+22     	; 0x560 <qi_insert+0x3e>
 		return(0); // full
	ri = (ri + 1) % QI_SIZE;
     54a:	30 93 9f 05 	sts	0x059F, r19
     54e:	20 93 9e 05 	sts	0x059E, r18
	qi[ri] = ch;
     552:	20 56       	subi	r18, 0x60	; 96
     554:	3a 4f       	sbci	r19, 0xFA	; 250
     556:	f9 01       	movw	r30, r18
     558:	40 83       	st	Z, r20
	return(1);
     55a:	81 e0       	ldi	r24, 0x01	; 1
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	08 95       	ret
	fi = ri = fo = ro = 0;
}
int qi_insert(char ch)
{
 	if ((ri + 1) % QI_SIZE == fi)
 		return(0); // full
     560:	80 e0       	ldi	r24, 0x00	; 0
     562:	90 e0       	ldi	r25, 0x00	; 0
	ri = (ri + 1) % QI_SIZE;
	qi[ri] = ch;
	return(1);
}
     564:	08 95       	ret

00000566 <qi_delete>:
int qi_delete()
{
 if (ri == fi)
     566:	80 91 98 04 	lds	r24, 0x0498
     56a:	90 91 99 04 	lds	r25, 0x0499
     56e:	20 91 9e 05 	lds	r18, 0x059E
     572:	30 91 9f 05 	lds	r19, 0x059F
     576:	28 17       	cp	r18, r24
     578:	39 07       	cpc	r19, r25
     57a:	79 f0       	breq	.+30     	; 0x59a <qi_delete+0x34>
 	return(0); // empty
 fi = (fi + 1) % QI_SIZE;
     57c:	01 96       	adiw	r24, 0x01	; 1
     57e:	60 e0       	ldi	r22, 0x00	; 0
     580:	71 e0       	ldi	r23, 0x01	; 1
     582:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <__divmodhi4>
     586:	90 93 99 04 	sts	0x0499, r25
     58a:	80 93 98 04 	sts	0x0498, r24
 	return(qi[fi]);
     58e:	80 56       	subi	r24, 0x60	; 96
     590:	9a 4f       	sbci	r25, 0xFA	; 250
     592:	fc 01       	movw	r30, r24
     594:	80 81       	ld	r24, Z
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	08 95       	ret
	return(1);
}
int qi_delete()
{
 if (ri == fi)
 	return(0); // empty
     59a:	80 e0       	ldi	r24, 0x00	; 0
     59c:	90 e0       	ldi	r25, 0x00	; 0
 fi = (fi + 1) % QI_SIZE;
 	return(qi[fi]);
}
     59e:	08 95       	ret

000005a0 <qo_insert>:

int qo_insert(char ch)
{
     5a0:	48 2f       	mov	r20, r24
 	if ((ro + 1) % QO_SIZE == fo)
     5a2:	20 91 9c 05 	lds	r18, 0x059C
     5a6:	30 91 9d 05 	lds	r19, 0x059D
     5aa:	2f 5f       	subi	r18, 0xFF	; 255
     5ac:	3f 4f       	sbci	r19, 0xFF	; 255
     5ae:	c9 01       	movw	r24, r18
     5b0:	60 e0       	ldi	r22, 0x00	; 0
     5b2:	71 e0       	ldi	r23, 0x01	; 1
     5b4:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <__divmodhi4>
     5b8:	9c 01       	movw	r18, r24
     5ba:	80 91 9a 05 	lds	r24, 0x059A
     5be:	90 91 9b 05 	lds	r25, 0x059B
     5c2:	28 17       	cp	r18, r24
     5c4:	39 07       	cpc	r19, r25
     5c6:	59 f0       	breq	.+22     	; 0x5de <qo_insert+0x3e>
 		return(0); // full
	ro = (ro + 1) % QO_SIZE;
     5c8:	30 93 9d 05 	sts	0x059D, r19
     5cc:	20 93 9c 05 	sts	0x059C, r18
	qo[ro] = ch;
     5d0:	26 56       	subi	r18, 0x66	; 102
     5d2:	3b 4f       	sbci	r19, 0xFB	; 251
     5d4:	f9 01       	movw	r30, r18
     5d6:	40 83       	st	Z, r20
	return(1);
     5d8:	81 e0       	ldi	r24, 0x01	; 1
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	08 95       	ret
}

int qo_insert(char ch)
{
 	if ((ro + 1) % QO_SIZE == fo)
 		return(0); // full
     5de:	80 e0       	ldi	r24, 0x00	; 0
     5e0:	90 e0       	ldi	r25, 0x00	; 0
	ro = (ro + 1) % QO_SIZE;
	qo[ro] = ch;
	return(1);
}
     5e2:	08 95       	ret

000005e4 <qo_delete>:
int qo_delete()
{
 if (ro == fo)
     5e4:	80 91 9a 05 	lds	r24, 0x059A
     5e8:	90 91 9b 05 	lds	r25, 0x059B
     5ec:	20 91 9c 05 	lds	r18, 0x059C
     5f0:	30 91 9d 05 	lds	r19, 0x059D
     5f4:	28 17       	cp	r18, r24
     5f6:	39 07       	cpc	r19, r25
     5f8:	79 f0       	breq	.+30     	; 0x618 <qo_delete+0x34>
 	return(0); // empty
 fo = (fo + 1) % QO_SIZE;
     5fa:	01 96       	adiw	r24, 0x01	; 1
     5fc:	60 e0       	ldi	r22, 0x00	; 0
     5fe:	71 e0       	ldi	r23, 0x01	; 1
     600:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <__divmodhi4>
     604:	90 93 9b 05 	sts	0x059B, r25
     608:	80 93 9a 05 	sts	0x059A, r24
 	return(qo[fo]);
     60c:	86 56       	subi	r24, 0x66	; 102
     60e:	9b 4f       	sbci	r25, 0xFB	; 251
     610:	fc 01       	movw	r30, r24
     612:	80 81       	ld	r24, Z
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	08 95       	ret
	return(1);
}
int qo_delete()
{
 if (ro == fo)
 	return(0); // empty
     618:	80 e0       	ldi	r24, 0x00	; 0
     61a:	90 e0       	ldi	r25, 0x00	; 0
 fo = (fo + 1) % QO_SIZE;
 	return(qo[fo]);
}
     61c:	08 95       	ret

0000061e <task_prime>:
			printf("!!!-444\n");
		}
		printf("$ ");

}
void task_prime(char *ap){
     61e:	cf 92       	push	r12
     620:	df 92       	push	r13
     622:	ef 92       	push	r14
     624:	ff 92       	push	r15
     626:	0f 93       	push	r16
     628:	1f 93       	push	r17
     62a:	cf 93       	push	r28
     62c:	df 93       	push	r29

	int t=2000, count = 0, n;
	if(ap &&*ap) t = atoi(ap);
     62e:	00 97       	sbiw	r24, 0x00	; 0
     630:	41 f0       	breq	.+16     	; 0x642 <task_prime+0x24>
     632:	fc 01       	movw	r30, r24
     634:	20 81       	ld	r18, Z
     636:	22 23       	and	r18, r18
     638:	21 f0       	breq	.+8      	; 0x642 <task_prime+0x24>
     63a:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <atoi>
     63e:	8c 01       	movw	r16, r24
     640:	02 c0       	rjmp	.+4      	; 0x646 <task_prime+0x28>
		printf("$ ");

}
void task_prime(char *ap){

	int t=2000, count = 0, n;
     642:	00 ed       	ldi	r16, 0xD0	; 208
     644:	17 e0       	ldi	r17, 0x07	; 7
	if(ap &&*ap) t = atoi(ap);
	for(n = 2; n <= t; n++){
     646:	c2 e0       	ldi	r28, 0x02	; 2
     648:	d0 e0       	ldi	r29, 0x00	; 0
		printf("$ ");

}
void task_prime(char *ap){

	int t=2000, count = 0, n;
     64a:	ee 24       	eor	r14, r14
     64c:	ff 24       	eor	r15, r15
	if(ap &&*ap) t = atoi(ap);
	for(n = 2; n <= t; n++){
		if(is_prime(n)){
			count++;
			printf("%d is a prime number!!!\n",n);
     64e:	88 e4       	ldi	r24, 0x48	; 72
     650:	c8 2e       	mov	r12, r24
     652:	82 e0       	ldi	r24, 0x02	; 2
     654:	d8 2e       	mov	r13, r24
}
void task_prime(char *ap){

	int t=2000, count = 0, n;
	if(ap &&*ap) t = atoi(ap);
	for(n = 2; n <= t; n++){
     656:	17 c0       	rjmp	.+46     	; 0x686 <task_prime+0x68>
		if(is_prime(n)){
     658:	ce 01       	movw	r24, r28
     65a:	0e 94 0d 01 	call	0x21a	; 0x21a <is_prime>
     65e:	00 97       	sbiw	r24, 0x00	; 0
     660:	89 f0       	breq	.+34     	; 0x684 <task_prime+0x66>
			count++;
     662:	08 94       	sec
     664:	e1 1c       	adc	r14, r1
     666:	f1 1c       	adc	r15, r1
			printf("%d is a prime number!!!\n",n);
     668:	00 d0       	rcall	.+0      	; 0x66a <task_prime+0x4c>
     66a:	0f 92       	push	r0
     66c:	ed b7       	in	r30, 0x3d	; 61
     66e:	fe b7       	in	r31, 0x3e	; 62
     670:	d2 82       	std	Z+2, r13	; 0x02
     672:	c1 82       	std	Z+1, r12	; 0x01
     674:	d4 83       	std	Z+4, r29	; 0x04
     676:	c3 83       	std	Z+3, r28	; 0x03
     678:	0e 94 b4 10 	call	0x2168	; 0x2168 <printf>
     67c:	0f 90       	pop	r0
     67e:	0f 90       	pop	r0
     680:	0f 90       	pop	r0
     682:	0f 90       	pop	r0
}
void task_prime(char *ap){

	int t=2000, count = 0, n;
	if(ap &&*ap) t = atoi(ap);
	for(n = 2; n <= t; n++){
     684:	21 96       	adiw	r28, 0x01	; 1
     686:	0c 17       	cp	r16, r28
     688:	1d 07       	cpc	r17, r29
     68a:	34 f7       	brge	.-52     	; 0x658 <task_prime+0x3a>
		if(is_prime(n)){
			count++;
			printf("%d is a prime number!!!\n",n);
		}
 	}
	printf("count=%d\n",count);
     68c:	00 d0       	rcall	.+0      	; 0x68e <task_prime+0x70>
     68e:	0f 92       	push	r0
     690:	81 e6       	ldi	r24, 0x61	; 97
     692:	92 e0       	ldi	r25, 0x02	; 2
     694:	ed b7       	in	r30, 0x3d	; 61
     696:	fe b7       	in	r31, 0x3e	; 62
     698:	92 83       	std	Z+2, r25	; 0x02
     69a:	81 83       	std	Z+1, r24	; 0x01
     69c:	f4 82       	std	Z+4, r15	; 0x04
     69e:	e3 82       	std	Z+3, r14	; 0x03
     6a0:	0e 94 b4 10 	call	0x2168	; 0x2168 <printf>
     6a4:	0f 90       	pop	r0
     6a6:	0f 90       	pop	r0
     6a8:	0f 90       	pop	r0
     6aa:	0f 90       	pop	r0
}
     6ac:	df 91       	pop	r29
     6ae:	cf 91       	pop	r28
     6b0:	1f 91       	pop	r17
     6b2:	0f 91       	pop	r16
     6b4:	ff 90       	pop	r15
     6b6:	ef 90       	pop	r14
     6b8:	df 90       	pop	r13
     6ba:	cf 90       	pop	r12
     6bc:	08 95       	ret

000006be <task_tc77>:
	    value = atoi(arg) * (1.1/1024) * 1000;
		value = (value - 500) / 10;
		printf("task_tc1047a() : current temperature ? %d degree.\n", value); 
	}
}
void task_tc77(void *arg){
     6be:	cf 93       	push	r28
     6c0:	df 93       	push	r29
	static uint8_t state;
	 static uint16_t value;

	 if (!strcmp(arg, "")) {
     6c2:	fc 01       	movw	r30, r24
     6c4:	20 81       	ld	r18, Z
     6c6:	22 23       	and	r18, r18
     6c8:	31 f4       	brne	.+12     	; 0x6d6 <task_tc77+0x18>
		 state = TC77_WAIT_HI;
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	80 93 8b 04 	sts	0x048B, r24
		 spi_select();
     6d0:	0e 94 89 07 	call	0xf12	; 0xf12 <spi_select>
     6d4:	11 c0       	rjmp	.+34     	; 0x6f8 <task_tc77+0x3a>
		 spi_write(0x00);
	 }
	 else {
		 switch(state) {
     6d6:	20 91 8b 04 	lds	r18, 0x048B
     6da:	21 30       	cpi	r18, 0x01	; 1
     6dc:	21 f0       	breq	.+8      	; 0x6e6 <task_tc77+0x28>
     6de:	22 30       	cpi	r18, 0x02	; 2
     6e0:	09 f0       	breq	.+2      	; 0x6e4 <task_tc77+0x26>
     6e2:	45 c0       	rjmp	.+138    	; 0x76e <task_tc77+0xb0>
     6e4:	0d c0       	rjmp	.+26     	; 0x700 <task_tc77+0x42>
			 case TC77_WAIT_HI :
				 value = atoi(arg) << 8; state = TC77_WAIT_LO; spi_write(0x00);
     6e6:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <atoi>
     6ea:	10 92 8c 04 	sts	0x048C, r1
     6ee:	80 93 8d 04 	sts	0x048D, r24
     6f2:	82 e0       	ldi	r24, 0x02	; 2
     6f4:	80 93 8b 04 	sts	0x048B, r24
     6f8:	80 e0       	ldi	r24, 0x00	; 0
     6fa:	0e 94 8d 07 	call	0xf1a	; 0xf1a <spi_write>
				 break;
     6fe:	3d c0       	rjmp	.+122    	; 0x77a <task_tc77+0xbc>
			 case TC77_WAIT_LO:
				 value |= atoi(arg); value = (value >> 3) * 0.0625;
     700:	c0 91 8c 04 	lds	r28, 0x048C
     704:	d0 91 8d 04 	lds	r29, 0x048D
     708:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <atoi>
     70c:	c8 2b       	or	r28, r24
     70e:	d9 2b       	or	r29, r25
     710:	23 e0       	ldi	r18, 0x03	; 3
     712:	d6 95       	lsr	r29
     714:	c7 95       	ror	r28
     716:	2a 95       	dec	r18
     718:	e1 f7       	brne	.-8      	; 0x712 <task_tc77+0x54>
     71a:	be 01       	movw	r22, r28
     71c:	80 e0       	ldi	r24, 0x00	; 0
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	0e 94 ce 0b 	call	0x179c	; 0x179c <__floatunsisf>
     724:	20 e0       	ldi	r18, 0x00	; 0
     726:	30 e0       	ldi	r19, 0x00	; 0
     728:	40 e8       	ldi	r20, 0x80	; 128
     72a:	5d e3       	ldi	r21, 0x3D	; 61
     72c:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <__mulsf3>
     730:	0e 94 e7 07 	call	0xfce	; 0xfce <__fixunssfsi>
     734:	dc 01       	movw	r26, r24
     736:	cb 01       	movw	r24, r22
     738:	90 93 8d 04 	sts	0x048D, r25
     73c:	80 93 8c 04 	sts	0x048C, r24
				 spi_release();
     740:	0e 94 8b 07 	call	0xf16	; 0xf16 <spi_release>
				printf("task_tc77() : current_temperature ? %d degree.\n", value);
     744:	00 d0       	rcall	.+0      	; 0x746 <task_tc77+0x88>
     746:	0f 92       	push	r0
     748:	8b e6       	ldi	r24, 0x6B	; 107
     74a:	92 e0       	ldi	r25, 0x02	; 2
     74c:	ed b7       	in	r30, 0x3d	; 61
     74e:	fe b7       	in	r31, 0x3e	; 62
     750:	92 83       	std	Z+2, r25	; 0x02
     752:	81 83       	std	Z+1, r24	; 0x01
     754:	80 91 8c 04 	lds	r24, 0x048C
     758:	90 91 8d 04 	lds	r25, 0x048D
     75c:	94 83       	std	Z+4, r25	; 0x04
     75e:	83 83       	std	Z+3, r24	; 0x03
     760:	0e 94 b4 10 	call	0x2168	; 0x2168 <printf>
     764:	0f 90       	pop	r0
     766:	0f 90       	pop	r0
     768:	0f 90       	pop	r0
     76a:	0f 90       	pop	r0
     76c:	06 c0       	rjmp	.+12     	; 0x77a <task_tc77+0xbc>
				 break;
			 default:
				 spi_release();
     76e:	0e 94 8b 07 	call	0xf16	; 0xf16 <spi_release>
				 printf("task_tc77() : unexpecetd state in task_tc77...\n");
     772:	8b e9       	ldi	r24, 0x9B	; 155
     774:	92 e0       	ldi	r25, 0x02	; 2
     776:	0e 94 cd 10 	call	0x219a	; 0x219a <puts>
		 }
	 }


}
     77a:	df 91       	pop	r29
     77c:	cf 91       	pop	r28
     77e:	08 95       	ret

00000780 <task_init>:

struct task Task_q[MAX_TASK];
volatile int Task_f, Task_r;

void task_init(){
	Task_f = Task_r = 0;
     780:	10 92 93 04 	sts	0x0493, r1
     784:	10 92 92 04 	sts	0x0492, r1
     788:	10 92 97 04 	sts	0x0497, r1
     78c:	10 92 96 04 	sts	0x0496, r1
}
     790:	08 95       	ret

00000792 <task_insert>:

int task_insert(struct task *tskp){
     792:	cf 93       	push	r28
     794:	df 93       	push	r29
     796:	48 2f       	mov	r20, r24
     798:	e9 2f       	mov	r30, r25
	if((Task_r + 1) % MAX_TASK == Task_f)
     79a:	80 91 92 04 	lds	r24, 0x0492
     79e:	90 91 93 04 	lds	r25, 0x0493
     7a2:	c0 91 96 04 	lds	r28, 0x0496
     7a6:	d0 91 97 04 	lds	r29, 0x0497
     7aa:	01 96       	adiw	r24, 0x01	; 1
     7ac:	20 e1       	ldi	r18, 0x10	; 16
     7ae:	30 e0       	ldi	r19, 0x00	; 0
     7b0:	b9 01       	movw	r22, r18
     7b2:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <__divmodhi4>
     7b6:	8c 17       	cp	r24, r28
     7b8:	9d 07       	cpc	r25, r29
     7ba:	31 f1       	breq	.+76     	; 0x808 <task_insert+0x76>
		return(0);
	Task_r = (Task_r + 1) % MAX_TASK;
     7bc:	80 91 92 04 	lds	r24, 0x0492
     7c0:	90 91 93 04 	lds	r25, 0x0493
     7c4:	01 96       	adiw	r24, 0x01	; 1
     7c6:	b9 01       	movw	r22, r18
     7c8:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <__divmodhi4>
     7cc:	90 93 93 04 	sts	0x0493, r25
     7d0:	80 93 92 04 	sts	0x0492, r24
	Task_q[Task_r] = *tskp;
     7d4:	80 91 92 04 	lds	r24, 0x0492
     7d8:	90 91 93 04 	lds	r25, 0x0493
     7dc:	dc 01       	movw	r26, r24
     7de:	aa 0f       	add	r26, r26
     7e0:	bb 1f       	adc	r27, r27
     7e2:	63 e0       	ldi	r22, 0x03	; 3
     7e4:	88 0f       	add	r24, r24
     7e6:	99 1f       	adc	r25, r25
     7e8:	6a 95       	dec	r22
     7ea:	e1 f7       	brne	.-8      	; 0x7e4 <task_insert+0x52>
     7ec:	a8 0f       	add	r26, r24
     7ee:	b9 1f       	adc	r27, r25
     7f0:	a0 56       	subi	r26, 0x60	; 96
     7f2:	b9 4f       	sbci	r27, 0xF9	; 249
     7f4:	c4 2f       	mov	r28, r20
     7f6:	de 2f       	mov	r29, r30
     7f8:	8a e0       	ldi	r24, 0x0A	; 10
     7fa:	09 90       	ld	r0, Y+
     7fc:	0d 92       	st	X+, r0
     7fe:	81 50       	subi	r24, 0x01	; 1
     800:	e1 f7       	brne	.-8      	; 0x7fa <task_insert+0x68>
	return(1);
     802:	81 e0       	ldi	r24, 0x01	; 1
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	02 c0       	rjmp	.+4      	; 0x80c <task_insert+0x7a>
	Task_f = Task_r = 0;
}

int task_insert(struct task *tskp){
	if((Task_r + 1) % MAX_TASK == Task_f)
		return(0);
     808:	80 e0       	ldi	r24, 0x00	; 0
     80a:	90 e0       	ldi	r25, 0x00	; 0
	Task_r = (Task_r + 1) % MAX_TASK;
	Task_q[Task_r] = *tskp;
	return(1);
}
     80c:	df 91       	pop	r29
     80e:	cf 91       	pop	r28
     810:	08 95       	ret

00000812 <task_delete>:
int task_delete(struct task *tskp)
{
     812:	9c 01       	movw	r18, r24
	if(Task_r == Task_f)
     814:	40 91 92 04 	lds	r20, 0x0492
     818:	50 91 93 04 	lds	r21, 0x0493
     81c:	80 91 96 04 	lds	r24, 0x0496
     820:	90 91 97 04 	lds	r25, 0x0497
     824:	48 17       	cp	r20, r24
     826:	59 07       	cpc	r21, r25
     828:	31 f1       	breq	.+76     	; 0x876 <task_delete+0x64>
		return(0);
	Task_f = (Task_f + 1) % MAX_TASK;
     82a:	80 91 96 04 	lds	r24, 0x0496
     82e:	90 91 97 04 	lds	r25, 0x0497
     832:	01 96       	adiw	r24, 0x01	; 1
     834:	60 e1       	ldi	r22, 0x10	; 16
     836:	70 e0       	ldi	r23, 0x00	; 0
     838:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <__divmodhi4>
     83c:	90 93 97 04 	sts	0x0497, r25
     840:	80 93 96 04 	sts	0x0496, r24
	*tskp = Task_q[Task_f];
     844:	80 91 96 04 	lds	r24, 0x0496
     848:	90 91 97 04 	lds	r25, 0x0497
     84c:	fc 01       	movw	r30, r24
     84e:	ee 0f       	add	r30, r30
     850:	ff 1f       	adc	r31, r31
     852:	a3 e0       	ldi	r26, 0x03	; 3
     854:	88 0f       	add	r24, r24
     856:	99 1f       	adc	r25, r25
     858:	aa 95       	dec	r26
     85a:	e1 f7       	brne	.-8      	; 0x854 <task_delete+0x42>
     85c:	e8 0f       	add	r30, r24
     85e:	f9 1f       	adc	r31, r25
     860:	d9 01       	movw	r26, r18
     862:	e0 56       	subi	r30, 0x60	; 96
     864:	f9 4f       	sbci	r31, 0xF9	; 249
     866:	8a e0       	ldi	r24, 0x0A	; 10
     868:	01 90       	ld	r0, Z+
     86a:	0d 92       	st	X+, r0
     86c:	81 50       	subi	r24, 0x01	; 1
     86e:	e1 f7       	brne	.-8      	; 0x868 <task_delete+0x56>
	return(1);
     870:	81 e0       	ldi	r24, 0x01	; 1
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	08 95       	ret
	return(1);
}
int task_delete(struct task *tskp)
{
	if(Task_r == Task_f)
		return(0);
     876:	80 e0       	ldi	r24, 0x00	; 0
     878:	90 e0       	ldi	r25, 0x00	; 0
	Task_f = (Task_f + 1) % MAX_TASK;
	*tskp = Task_q[Task_f];
	return(1);
}
     87a:	08 95       	ret

0000087c <task_tc1047a>:
			printf("%d is a prime number!!!\n",n);
		}
 	}
	printf("count=%d\n",count);
}
 void  task_tc1047a(void *arg) {
     87c:	cf 93       	push	r28
     87e:	df 93       	push	r29
     880:	ec 01       	movw	r28, r24
 	int   value; 
 
    if (!strcmp(arg, ""))   // called from task_cmd or timer task
     882:	88 81       	ld	r24, Y
     884:	88 23       	and	r24, r24
     886:	19 f4       	brne	.+6      	; 0x88e <task_tc1047a+0x12>
		adc_start();
     888:	0e 94 9b 00 	call	0x136	; 0x136 <adc_start>
     88c:	44 c0       	rjmp	.+136    	; 0x916 <task_tc1047a+0x9a>
	else  {                                // called from ISR()
		printf("value : %d",atoi(arg));
     88e:	ce 01       	movw	r24, r28
     890:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <atoi>
     894:	00 d0       	rcall	.+0      	; 0x896 <task_tc1047a+0x1a>
     896:	0f 92       	push	r0
     898:	2a ec       	ldi	r18, 0xCA	; 202
     89a:	32 e0       	ldi	r19, 0x02	; 2
     89c:	ed b7       	in	r30, 0x3d	; 61
     89e:	fe b7       	in	r31, 0x3e	; 62
     8a0:	32 83       	std	Z+2, r19	; 0x02
     8a2:	21 83       	std	Z+1, r18	; 0x01
     8a4:	94 83       	std	Z+4, r25	; 0x04
     8a6:	83 83       	std	Z+3, r24	; 0x03
     8a8:	0e 94 b4 10 	call	0x2168	; 0x2168 <printf>
	    value = atoi(arg) * (1.1/1024) * 1000;
     8ac:	0f 90       	pop	r0
     8ae:	0f 90       	pop	r0
     8b0:	0f 90       	pop	r0
     8b2:	0f 90       	pop	r0
     8b4:	ce 01       	movw	r24, r28
     8b6:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <atoi>
     8ba:	9c 01       	movw	r18, r24
     8bc:	b9 01       	movw	r22, r18
     8be:	88 27       	eor	r24, r24
     8c0:	77 fd       	sbrc	r23, 7
     8c2:	80 95       	com	r24
     8c4:	98 2f       	mov	r25, r24
     8c6:	0e 94 06 0b 	call	0x160c	; 0x160c <__floatsisf>
     8ca:	2d ec       	ldi	r18, 0xCD	; 205
     8cc:	3c ec       	ldi	r19, 0xCC	; 204
     8ce:	4c e8       	ldi	r20, 0x8C	; 140
     8d0:	5a e3       	ldi	r21, 0x3A	; 58
     8d2:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <__mulsf3>
     8d6:	20 e0       	ldi	r18, 0x00	; 0
     8d8:	30 e0       	ldi	r19, 0x00	; 0
     8da:	4a e7       	ldi	r20, 0x7A	; 122
     8dc:	54 e4       	ldi	r21, 0x44	; 68
     8de:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <__mulsf3>
     8e2:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__fixsfsi>
     8e6:	dc 01       	movw	r26, r24
     8e8:	cb 01       	movw	r24, r22
		value = (value - 500) / 10;
     8ea:	84 5f       	subi	r24, 0xF4	; 244
     8ec:	91 40       	sbci	r25, 0x01	; 1
		printf("task_tc1047a() : current temperature ? %d degree.\n", value); 
     8ee:	00 d0       	rcall	.+0      	; 0x8f0 <task_tc1047a+0x74>
     8f0:	0f 92       	push	r0
     8f2:	25 ed       	ldi	r18, 0xD5	; 213
     8f4:	32 e0       	ldi	r19, 0x02	; 2
     8f6:	ed b7       	in	r30, 0x3d	; 61
     8f8:	fe b7       	in	r31, 0x3e	; 62
     8fa:	32 83       	std	Z+2, r19	; 0x02
     8fc:	21 83       	std	Z+1, r18	; 0x01
    if (!strcmp(arg, ""))   // called from task_cmd or timer task
		adc_start();
	else  {                                // called from ISR()
		printf("value : %d",atoi(arg));
	    value = atoi(arg) * (1.1/1024) * 1000;
		value = (value - 500) / 10;
     8fe:	6a e0       	ldi	r22, 0x0A	; 10
     900:	70 e0       	ldi	r23, 0x00	; 0
     902:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <__divmodhi4>
		printf("task_tc1047a() : current temperature ? %d degree.\n", value); 
     906:	74 83       	std	Z+4, r23	; 0x04
     908:	63 83       	std	Z+3, r22	; 0x03
     90a:	0e 94 b4 10 	call	0x2168	; 0x2168 <printf>
     90e:	0f 90       	pop	r0
     910:	0f 90       	pop	r0
     912:	0f 90       	pop	r0
     914:	0f 90       	pop	r0
	}
}
     916:	df 91       	pop	r29
     918:	cf 91       	pop	r28
     91a:	08 95       	ret

0000091c <task_cmd>:
		return(0);
	Task_f = (Task_f + 1) % MAX_TASK;
	*tskp = Task_q[Task_f];
	return(1);
}
void task_cmd(void *arg){
     91c:	af 92       	push	r10
     91e:	bf 92       	push	r11
     920:	cf 92       	push	r12
     922:	df 92       	push	r13
     924:	ef 92       	push	r14
     926:	ff 92       	push	r15
     928:	0f 93       	push	r16
     92a:	1f 93       	push	r17
     92c:	cf 93       	push	r28
     92e:	df 93       	push	r29
     930:	cd b7       	in	r28, 0x3d	; 61
     932:	de b7       	in	r29, 0x3e	; 62
     934:	ca 54       	subi	r28, 0x4A	; 74
     936:	d0 40       	sbci	r29, 0x00	; 0
     938:	0f b6       	in	r0, 0x3f	; 63
     93a:	f8 94       	cli
     93c:	de bf       	out	0x3e, r29	; 62
     93e:	0f be       	out	0x3f, r0	; 63
     940:	cd bf       	out	0x3d, r28	; 61
	char buf[64], *cp0, *cp1, *cp2, *cp3;
	struct task task;
	int ms;
	if(gets(buf) == NULL){
     942:	ce 01       	movw	r24, r28
     944:	0b 96       	adiw	r24, 0x0b	; 11
     946:	0e 94 8e 10 	call	0x211c	; 0x211c <gets>
     94a:	00 97       	sbiw	r24, 0x00	; 0
     94c:	09 f4       	brne	.+2      	; 0x950 <task_cmd+0x34>
     94e:	98 c0       	rjmp	.+304    	; 0xa80 <task_cmd+0x164>
		printf("$ "); return;
	}
	cp0 = strtok(buf, " \t\n\r");
     950:	ce 01       	movw	r24, r28
     952:	0b 96       	adiw	r24, 0x0b	; 11
     954:	6b e0       	ldi	r22, 0x0B	; 11
     956:	73 e0       	ldi	r23, 0x03	; 3
     958:	0e 94 16 10 	call	0x202c	; 0x202c <strtok>
     95c:	8c 01       	movw	r16, r24
	cp1 = strtok(NULL, " \t\n\r");
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	6b e0       	ldi	r22, 0x0B	; 11
     964:	73 e0       	ldi	r23, 0x03	; 3
     966:	0e 94 16 10 	call	0x202c	; 0x202c <strtok>
     96a:	6c 01       	movw	r12, r24
	cp2 = strtok(NULL, " \t\n\r");
     96c:	80 e0       	ldi	r24, 0x00	; 0
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	6b e0       	ldi	r22, 0x0B	; 11
     972:	73 e0       	ldi	r23, 0x03	; 3
     974:	0e 94 16 10 	call	0x202c	; 0x202c <strtok>
     978:	5c 01       	movw	r10, r24
	cp3 = strtok(NULL, " \t\n\r");
     97a:	80 e0       	ldi	r24, 0x00	; 0
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	6b e0       	ldi	r22, 0x0B	; 11
     980:	73 e0       	ldi	r23, 0x03	; 3
     982:	0e 94 16 10 	call	0x202c	; 0x202c <strtok>
     986:	7c 01       	movw	r14, r24

	if (cp0 == NULL){
     988:	01 15       	cp	r16, r1
     98a:	11 05       	cpc	r17, r1
     98c:	39 f4       	brne	.+14     	; 0x99c <task_cmd+0x80>
		printf("!!!-111\n");
     98e:	80 e1       	ldi	r24, 0x10	; 16
     990:	93 e0       	ldi	r25, 0x03	; 3
     992:	0e 94 cd 10 	call	0x219a	; 0x219a <puts>
		tour_timer();
     996:	0e 94 5e 05 	call	0xabc	; 0xabc <tour_timer>
     99a:	72 c0       	rjmp	.+228    	; 0xa80 <task_cmd+0x164>
		printf("$ "); 
		return;
	}
	if(!strcmp(cp0, "prime")){
     99c:	c8 01       	movw	r24, r16
     99e:	68 e1       	ldi	r22, 0x18	; 24
     9a0:	73 e0       	ldi	r23, 0x03	; 3
     9a2:	0e 94 1b 10 	call	0x2036	; 0x2036 <strcmp>
     9a6:	00 97       	sbiw	r24, 0x00	; 0
     9a8:	21 f4       	brne	.+8      	; 0x9b2 <task_cmd+0x96>
		task_prime(cp1);
     9aa:	c6 01       	movw	r24, r12
     9ac:	0e 94 0f 03 	call	0x61e	; 0x61e <task_prime>
     9b0:	67 c0       	rjmp	.+206    	; 0xa80 <task_cmd+0x164>
	}
	else if (!strcmp(cp0, "tc1047a"))
     9b2:	c8 01       	movw	r24, r16
     9b4:	6e e1       	ldi	r22, 0x1E	; 30
     9b6:	73 e0       	ldi	r23, 0x03	; 3
     9b8:	0e 94 1b 10 	call	0x2036	; 0x2036 <strcmp>
     9bc:	00 97       	sbiw	r24, 0x00	; 0
     9be:	29 f4       	brne	.+10     	; 0x9ca <task_cmd+0xae>
		task_tc1047a(""); 
     9c0:	86 e2       	ldi	r24, 0x26	; 38
     9c2:	93 e0       	ldi	r25, 0x03	; 3
     9c4:	0e 94 3e 04 	call	0x87c	; 0x87c <task_tc1047a>
     9c8:	5b c0       	rjmp	.+182    	; 0xa80 <task_cmd+0x164>
	else if (!strcmp(cp0, "tc77"))
     9ca:	c8 01       	movw	r24, r16
     9cc:	67 e2       	ldi	r22, 0x27	; 39
     9ce:	73 e0       	ldi	r23, 0x03	; 3
     9d0:	0e 94 1b 10 	call	0x2036	; 0x2036 <strcmp>
     9d4:	00 97       	sbiw	r24, 0x00	; 0
     9d6:	29 f4       	brne	.+10     	; 0x9e2 <task_cmd+0xc6>
		task_tc77("");
     9d8:	86 e2       	ldi	r24, 0x26	; 38
     9da:	93 e0       	ldi	r25, 0x03	; 3
     9dc:	0e 94 5f 03 	call	0x6be	; 0x6be <task_tc77>
     9e0:	4f c0       	rjmp	.+158    	; 0xa80 <task_cmd+0x164>
	else if(!strcmp(cp0, "timer")){
     9e2:	c8 01       	movw	r24, r16
     9e4:	6c e2       	ldi	r22, 0x2C	; 44
     9e6:	73 e0       	ldi	r23, 0x03	; 3
     9e8:	0e 94 1b 10 	call	0x2036	; 0x2036 <strcmp>
     9ec:	00 97       	sbiw	r24, 0x00	; 0
     9ee:	09 f0       	breq	.+2      	; 0x9f2 <task_cmd+0xd6>
     9f0:	43 c0       	rjmp	.+134    	; 0xa78 <task_cmd+0x15c>
		if(cp1 == NULL){
     9f2:	c1 14       	cp	r12, r1
     9f4:	d1 04       	cpc	r13, r1
     9f6:	19 f4       	brne	.+6      	; 0x9fe <task_cmd+0xe2>
			printf("!!!-222\n");
     9f8:	82 e3       	ldi	r24, 0x32	; 50
     9fa:	93 e0       	ldi	r25, 0x03	; 3
     9fc:	3f c0       	rjmp	.+126    	; 0xa7c <task_cmd+0x160>
			printf("$ "); 
			return;
		}
		ms = atoi(cp1)/256;
     9fe:	c6 01       	movw	r24, r12
     a00:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <atoi>
     a04:	60 e0       	ldi	r22, 0x00	; 0
     a06:	71 e0       	ldi	r23, 0x01	; 1
     a08:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <__divmodhi4>
     a0c:	8b 01       	movw	r16, r22
		if(!strcmp(cp2, "prime")){
     a0e:	c5 01       	movw	r24, r10
     a10:	68 e1       	ldi	r22, 0x18	; 24
     a12:	73 e0       	ldi	r23, 0x03	; 3
     a14:	0e 94 1b 10 	call	0x2036	; 0x2036 <strcmp>
     a18:	00 97       	sbiw	r24, 0x00	; 0
     a1a:	19 f4       	brne	.+6      	; 0xa22 <task_cmd+0x106>
			task.fun = task_prime;
     a1c:	8f e0       	ldi	r24, 0x0F	; 15
     a1e:	93 e0       	ldi	r25, 0x03	; 3
     a20:	13 c0       	rjmp	.+38     	; 0xa48 <task_cmd+0x12c>
			}
			cli();
			insert_timer(&task, ms);
			sei();
		}
		else if(!strcmp(cp2, "led")){
     a22:	c5 01       	movw	r24, r10
     a24:	6a e3       	ldi	r22, 0x3A	; 58
     a26:	73 e0       	ldi	r23, 0x03	; 3
     a28:	0e 94 1b 10 	call	0x2036	; 0x2036 <strcmp>
     a2c:	00 97       	sbiw	r24, 0x00	; 0
     a2e:	19 f4       	brne	.+6      	; 0xa36 <task_cmd+0x11a>
			task.fun = task_led;
     a30:	89 ef       	ldi	r24, 0xF9	; 249
     a32:	91 e0       	ldi	r25, 0x01	; 1
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <task_cmd+0x12c>
			}
			cli();
			insert_timer(&task, ms);
			sei();
		}
		else if (!strcmp(cp2, "tc77")){
     a36:	c5 01       	movw	r24, r10
     a38:	67 e2       	ldi	r22, 0x27	; 39
     a3a:	73 e0       	ldi	r23, 0x03	; 3
     a3c:	0e 94 1b 10 	call	0x2036	; 0x2036 <strcmp>
     a40:	00 97       	sbiw	r24, 0x00	; 0
     a42:	b9 f4       	brne	.+46     	; 0xa72 <task_cmd+0x156>
			task.fun = task_tc77;
     a44:	8f e5       	ldi	r24, 0x5F	; 95
     a46:	93 e0       	ldi	r25, 0x03	; 3
     a48:	9a 83       	std	Y+2, r25	; 0x02
     a4a:	89 83       	std	Y+1, r24	; 0x01
			if(cp3){
				strcpy(task.arg, cp3);
     a4c:	ce 01       	movw	r24, r28
     a4e:	03 96       	adiw	r24, 0x03	; 3
			insert_timer(&task, ms);
			sei();
		}
		else if (!strcmp(cp2, "tc77")){
			task.fun = task_tc77;
			if(cp3){
     a50:	e1 14       	cp	r14, r1
     a52:	f1 04       	cpc	r15, r1
     a54:	11 f0       	breq	.+4      	; 0xa5a <task_cmd+0x13e>
				strcpy(task.arg, cp3);
     a56:	b7 01       	movw	r22, r14
     a58:	02 c0       	rjmp	.+4      	; 0xa5e <task_cmd+0x142>
			}
			else{ 
				strcpy(task.arg, "");
     a5a:	66 e2       	ldi	r22, 0x26	; 38
     a5c:	73 e0       	ldi	r23, 0x03	; 3
     a5e:	0e 94 24 10 	call	0x2048	; 0x2048 <strcpy>
			}
			cli();
     a62:	f8 94       	cli
			insert_timer(&task, ms);
     a64:	ce 01       	movw	r24, r28
     a66:	01 96       	adiw	r24, 0x01	; 1
     a68:	b8 01       	movw	r22, r16
     a6a:	0e 94 b6 05 	call	0xb6c	; 0xb6c <insert_timer>
			sei();
     a6e:	78 94       	sei
     a70:	07 c0       	rjmp	.+14     	; 0xa80 <task_cmd+0x164>
		}
		else{
			printf("!!!-333\n");
     a72:	8e e3       	ldi	r24, 0x3E	; 62
     a74:	93 e0       	ldi	r25, 0x03	; 3
     a76:	02 c0       	rjmp	.+4      	; 0xa7c <task_cmd+0x160>
		}
	
	}else{
			printf("!!!-444\n");
     a78:	86 e4       	ldi	r24, 0x46	; 70
     a7a:	93 e0       	ldi	r25, 0x03	; 3
     a7c:	0e 94 cd 10 	call	0x219a	; 0x219a <puts>
		}
		printf("$ ");
     a80:	0f 92       	push	r0
     a82:	0f 92       	push	r0
     a84:	88 e0       	ldi	r24, 0x08	; 8
     a86:	93 e0       	ldi	r25, 0x03	; 3
     a88:	ed b7       	in	r30, 0x3d	; 61
     a8a:	fe b7       	in	r31, 0x3e	; 62
     a8c:	92 83       	std	Z+2, r25	; 0x02
     a8e:	81 83       	std	Z+1, r24	; 0x01
     a90:	0e 94 b4 10 	call	0x2168	; 0x2168 <printf>
     a94:	0f 90       	pop	r0
     a96:	0f 90       	pop	r0

}
     a98:	c6 5b       	subi	r28, 0xB6	; 182
     a9a:	df 4f       	sbci	r29, 0xFF	; 255
     a9c:	0f b6       	in	r0, 0x3f	; 63
     a9e:	f8 94       	cli
     aa0:	de bf       	out	0x3e, r29	; 62
     aa2:	0f be       	out	0x3f, r0	; 63
     aa4:	cd bf       	out	0x3d, r28	; 61
     aa6:	df 91       	pop	r29
     aa8:	cf 91       	pop	r28
     aaa:	1f 91       	pop	r17
     aac:	0f 91       	pop	r16
     aae:	ff 90       	pop	r15
     ab0:	ef 90       	pop	r14
     ab2:	df 90       	pop	r13
     ab4:	cf 90       	pop	r12
     ab6:	bf 90       	pop	r11
     ab8:	af 90       	pop	r10
     aba:	08 95       	ret

00000abc <tour_timer>:
		cp->time -= tp->time;
		pp->link = tp;
		tp->link = cp;
	}
} 
 void tour_timer(){
     abc:	ef 92       	push	r14
     abe:	ff 92       	push	r15
     ac0:	0f 93       	push	r16
     ac2:	1f 93       	push	r17
     ac4:	cf 93       	push	r28
     ac6:	df 93       	push	r29
 	struct timer *cp;
	int    total = 0; 
 
    printf("\n");
     ac8:	8a e0       	ldi	r24, 0x0A	; 10
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	0e 94 c6 10 	call	0x218c	; 0x218c <putchar>
	for (cp = Thead; cp != NULL; cp = cp->link) {
     ad0:	c0 91 8e 04 	lds	r28, 0x048E
     ad4:	d0 91 8f 04 	lds	r29, 0x048F
		tp->link = cp;
	}
} 
 void tour_timer(){
 	struct timer *cp;
	int    total = 0; 
     ad8:	00 e0       	ldi	r16, 0x00	; 0
     ada:	10 e0       	ldi	r17, 0x00	; 0
 
    printf("\n");
	for (cp = Thead; cp != NULL; cp = cp->link) {
		total += cp->time;
		printf("-->%d(%d) ", cp->time, total);
     adc:	8e e4       	ldi	r24, 0x4E	; 78
     ade:	e8 2e       	mov	r14, r24
     ae0:	83 e0       	ldi	r24, 0x03	; 3
     ae2:	f8 2e       	mov	r15, r24
 void tour_timer(){
 	struct timer *cp;
	int    total = 0; 
 
    printf("\n");
	for (cp = Thead; cp != NULL; cp = cp->link) {
     ae4:	20 c0       	rjmp	.+64     	; 0xb26 <tour_timer+0x6a>
		total += cp->time;
     ae6:	88 81       	ld	r24, Y
     ae8:	99 81       	ldd	r25, Y+1	; 0x01
     aea:	08 0f       	add	r16, r24
     aec:	19 1f       	adc	r17, r25
		printf("-->%d(%d) ", cp->time, total);
     aee:	00 d0       	rcall	.+0      	; 0xaf0 <tour_timer+0x34>
     af0:	00 d0       	rcall	.+0      	; 0xaf2 <tour_timer+0x36>
     af2:	ed b7       	in	r30, 0x3d	; 61
     af4:	fe b7       	in	r31, 0x3e	; 62
     af6:	31 96       	adiw	r30, 0x01	; 1
     af8:	ad b7       	in	r26, 0x3d	; 61
     afa:	be b7       	in	r27, 0x3e	; 62
     afc:	12 96       	adiw	r26, 0x02	; 2
     afe:	fc 92       	st	X, r15
     b00:	ee 92       	st	-X, r14
     b02:	11 97       	sbiw	r26, 0x01	; 1
     b04:	93 83       	std	Z+3, r25	; 0x03
     b06:	82 83       	std	Z+2, r24	; 0x02
     b08:	15 83       	std	Z+5, r17	; 0x05
     b0a:	04 83       	std	Z+4, r16	; 0x04
     b0c:	0e 94 b4 10 	call	0x2168	; 0x2168 <printf>
 void tour_timer(){
 	struct timer *cp;
	int    total = 0; 
 
    printf("\n");
	for (cp = Thead; cp != NULL; cp = cp->link) {
     b10:	0c 84       	ldd	r0, Y+12	; 0x0c
     b12:	dd 85       	ldd	r29, Y+13	; 0x0d
     b14:	c0 2d       	mov	r28, r0
     b16:	8d b7       	in	r24, 0x3d	; 61
     b18:	9e b7       	in	r25, 0x3e	; 62
     b1a:	06 96       	adiw	r24, 0x06	; 6
     b1c:	0f b6       	in	r0, 0x3f	; 63
     b1e:	f8 94       	cli
     b20:	9e bf       	out	0x3e, r25	; 62
     b22:	0f be       	out	0x3f, r0	; 63
     b24:	8d bf       	out	0x3d, r24	; 61
     b26:	20 97       	sbiw	r28, 0x00	; 0
     b28:	f1 f6       	brne	.-68     	; 0xae6 <tour_timer+0x2a>
		total += cp->time;
		printf("-->%d(%d) ", cp->time, total);
	}
	printf("\n");
     b2a:	8a e0       	ldi	r24, 0x0A	; 10
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	0e 94 c6 10 	call	0x218c	; 0x218c <putchar>
} 
     b32:	df 91       	pop	r29
     b34:	cf 91       	pop	r28
     b36:	1f 91       	pop	r17
     b38:	0f 91       	pop	r16
     b3a:	ff 90       	pop	r15
     b3c:	ef 90       	pop	r14
     b3e:	08 95       	ret

00000b40 <free_timer>:
 
 void free_timer(){
 	struct timer *cp; 
 	for (  ; Thead != NULL; ){
     b40:	09 c0       	rjmp	.+18     	; 0xb54 <free_timer+0x14>
		cp = Thead;
		Thead = cp->link;
     b42:	fc 01       	movw	r30, r24
     b44:	24 85       	ldd	r18, Z+12	; 0x0c
     b46:	35 85       	ldd	r19, Z+13	; 0x0d
     b48:	30 93 8f 04 	sts	0x048F, r19
     b4c:	20 93 8e 04 	sts	0x048E, r18
		free(cp);
     b50:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <free>
	printf("\n");
} 
 
 void free_timer(){
 	struct timer *cp; 
 	for (  ; Thead != NULL; ){
     b54:	80 91 8e 04 	lds	r24, 0x048E
     b58:	90 91 8f 04 	lds	r25, 0x048F
     b5c:	00 97       	sbiw	r24, 0x00	; 0
     b5e:	89 f7       	brne	.-30     	; 0xb42 <free_timer+0x2>
		cp = Thead;
		Thead = cp->link;
		free(cp);
	}
} 
     b60:	08 95       	ret

00000b62 <get_timer>:

struct timer *get_timer()
{
	struct timer *tp; 
    tp = (struct timer *)malloc(sizeof(*tp));
     b62:	8e e0       	ldi	r24, 0x0E	; 14
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <malloc>
	return(tp);
}
     b6a:	08 95       	ret

00000b6c <insert_timer>:

#include "task.h"
#include "timer.h"
struct timer *Thead = NULL;

void insert_timer(struct task *tskp, int ms){
     b6c:	ef 92       	push	r14
     b6e:	ff 92       	push	r15
     b70:	0f 93       	push	r16
     b72:	1f 93       	push	r17
     b74:	cf 93       	push	r28
     b76:	df 93       	push	r29
     b78:	f8 2e       	mov	r15, r24
     b7a:	e9 2e       	mov	r14, r25
     b7c:	8b 01       	movw	r16, r22
	int total;
	struct timer *tp, *cp, *pp;
	tp = get_timer();
     b7e:	0e 94 b1 05 	call	0xb62	; 0xb62 <get_timer>
     b82:	ec 01       	movw	r28, r24
	tp->task = *tskp;
     b84:	dc 01       	movw	r26, r24
     b86:	12 96       	adiw	r26, 0x02	; 2
     b88:	ef 2d       	mov	r30, r15
     b8a:	fe 2d       	mov	r31, r14
     b8c:	8a e0       	ldi	r24, 0x0A	; 10
     b8e:	01 90       	ld	r0, Z+
     b90:	0d 92       	st	X+, r0
     b92:	81 50       	subi	r24, 0x01	; 1
     b94:	e1 f7       	brne	.-8      	; 0xb8e <insert_timer+0x22>
	tp->time = ms; 
     b96:	19 83       	std	Y+1, r17	; 0x01
     b98:	08 83       	st	Y, r16
 
    if (Thead == NULL) {
     b9a:	e0 91 8e 04 	lds	r30, 0x048E
     b9e:	f0 91 8f 04 	lds	r31, 0x048F
     ba2:	30 97       	sbiw	r30, 0x00	; 0
     ba4:	29 f4       	brne	.+10     	; 0xbb0 <insert_timer+0x44>
		Thead = tp, tp->link = NULL;
     ba6:	d0 93 8f 04 	sts	0x048F, r29
     baa:	c0 93 8e 04 	sts	0x048E, r28
     bae:	2f c0       	rjmp	.+94     	; 0xc0e <insert_timer+0xa2>
	struct timer *tp, *cp, *pp;
	tp = get_timer();
	tp->task = *tskp;
	tp->time = ms; 
 
    if (Thead == NULL) {
     bb0:	40 e0       	ldi	r20, 0x00	; 0
     bb2:	50 e0       	ldi	r21, 0x00	; 0
     bb4:	20 e0       	ldi	r18, 0x00	; 0
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	01 c0       	rjmp	.+2      	; 0xbbc <insert_timer+0x50>
		Thead = tp, tp->link = NULL;
		return;
	}
	pp = NULL, total = 0;
	for (cp = Thead; cp; cp = cp->link) {
     bba:	fd 01       	movw	r30, r26
		total += cp->time;
     bbc:	80 81       	ld	r24, Z
     bbe:	91 81       	ldd	r25, Z+1	; 0x01
     bc0:	28 0f       	add	r18, r24
     bc2:	39 1f       	adc	r19, r25
		if (total >= ms)
     bc4:	20 17       	cp	r18, r16
     bc6:	31 07       	cpc	r19, r17
     bc8:	34 f4       	brge	.+12     	; 0xbd6 <insert_timer+0x6a>
    if (Thead == NULL) {
		Thead = tp, tp->link = NULL;
		return;
	}
	pp = NULL, total = 0;
	for (cp = Thead; cp; cp = cp->link) {
     bca:	a4 85       	ldd	r26, Z+12	; 0x0c
     bcc:	b5 85       	ldd	r27, Z+13	; 0x0d
     bce:	af 01       	movw	r20, r30
     bd0:	10 97       	sbiw	r26, 0x00	; 0
     bd2:	99 f7       	brne	.-26     	; 0xbba <insert_timer+0x4e>
     bd4:	01 c0       	rjmp	.+2      	; 0xbd8 <insert_timer+0x6c>
		total += cp->time;
		if (total >= ms)
     bd6:	df 01       	movw	r26, r30
			break;
        pp = cp;
    }      
    if (pp == NULL) {
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	79 f4       	brne	.+30     	; 0xbfc <insert_timer+0x90>
		cp->time -= tp->time;
     bde:	8d 91       	ld	r24, X+
     be0:	9c 91       	ld	r25, X
     be2:	11 97       	sbiw	r26, 0x01	; 1
     be4:	80 1b       	sub	r24, r16
     be6:	91 0b       	sbc	r25, r17
     be8:	11 96       	adiw	r26, 0x01	; 1
     bea:	9c 93       	st	X, r25
     bec:	8e 93       	st	-X, r24
		tp->link = cp, Thead = tp;
     bee:	bd 87       	std	Y+13, r27	; 0x0d
     bf0:	ac 87       	std	Y+12, r26	; 0x0c
     bf2:	d0 93 8f 04 	sts	0x048F, r29
     bf6:	c0 93 8e 04 	sts	0x048E, r28
     bfa:	24 c0       	rjmp	.+72     	; 0xc44 <insert_timer+0xd8>
	}
	else if (cp == NULL) {
     bfc:	10 97       	sbiw	r26, 0x00	; 0
     bfe:	51 f4       	brne	.+20     	; 0xc14 <insert_timer+0xa8>
		tp->time -= total; // pp->time
     c00:	02 1b       	sub	r16, r18
     c02:	13 0b       	sbc	r17, r19
     c04:	19 83       	std	Y+1, r17	; 0x01
     c06:	08 83       	st	Y, r16
		pp->link = tp;
     c08:	fa 01       	movw	r30, r20
     c0a:	d5 87       	std	Z+13, r29	; 0x0d
     c0c:	c4 87       	std	Z+12, r28	; 0x0c
		tp->link = NULL;
     c0e:	1d 86       	std	Y+13, r1	; 0x0d
     c10:	1c 86       	std	Y+12, r1	; 0x0c
     c12:	18 c0       	rjmp	.+48     	; 0xc44 <insert_timer+0xd8>
	}
	else {
		total -= cp->time; // just before
     c14:	8d 91       	ld	r24, X+
     c16:	9c 91       	ld	r25, X
     c18:	11 97       	sbiw	r26, 0x01	; 1
     c1a:	b9 01       	movw	r22, r18
     c1c:	68 1b       	sub	r22, r24
     c1e:	79 0b       	sbc	r23, r25
		tp->time -= total;
     c20:	98 01       	movw	r18, r16
     c22:	26 1b       	sub	r18, r22
     c24:	37 0b       	sbc	r19, r23
     c26:	39 83       	std	Y+1, r19	; 0x01
     c28:	28 83       	st	Y, r18
		cp->time -= tp->time;
     c2a:	8d 91       	ld	r24, X+
     c2c:	9c 91       	ld	r25, X
     c2e:	11 97       	sbiw	r26, 0x01	; 1
     c30:	82 1b       	sub	r24, r18
     c32:	93 0b       	sbc	r25, r19
     c34:	11 96       	adiw	r26, 0x01	; 1
     c36:	9c 93       	st	X, r25
     c38:	8e 93       	st	-X, r24
		pp->link = tp;
     c3a:	fa 01       	movw	r30, r20
     c3c:	d5 87       	std	Z+13, r29	; 0x0d
     c3e:	c4 87       	std	Z+12, r28	; 0x0c
		tp->link = cp;
     c40:	bd 87       	std	Y+13, r27	; 0x0d
     c42:	ac 87       	std	Y+12, r26	; 0x0c
	}
} 
     c44:	df 91       	pop	r29
     c46:	cf 91       	pop	r28
     c48:	1f 91       	pop	r17
     c4a:	0f 91       	pop	r16
     c4c:	ff 90       	pop	r15
     c4e:	ef 90       	pop	r14
     c50:	08 95       	ret

00000c52 <timer_init>:
	struct timer   *link;
};*/ 
 
 
void timer_init() {
	TCNT2 = 0; // Initialize   Timer/Counter2
     c52:	10 92 b2 00 	sts	0x00B2, r1
	sbi(ASSR, AS2);// Asynchronous Timer/Counter2
     c56:	e6 eb       	ldi	r30, 0xB6	; 182
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	80 81       	ld	r24, Z
     c5c:	80 62       	ori	r24, 0x20	; 32
     c5e:	80 83       	st	Z, r24
	sbi(TIMSK2, TOIE2);  // Timer2 Overflow Int. Enable 
     c60:	e0 e7       	ldi	r30, 0x70	; 112
     c62:	f0 e0       	ldi	r31, 0x00	; 0
     c64:	80 81       	ld	r24, Z
     c66:	81 60       	ori	r24, 0x01	; 1
     c68:	80 83       	st	Z, r24
	sbi(TCCR2B, CS20); sbi(TCCR2B, CS21); // 32KHz/32 prescaling, Start
     c6a:	e1 eb       	ldi	r30, 0xB1	; 177
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	80 81       	ld	r24, Z
     c70:	81 60       	ori	r24, 0x01	; 1
     c72:	80 83       	st	Z, r24
     c74:	80 81       	ld	r24, Z
     c76:	82 60       	ori	r24, 0x02	; 2
     c78:	80 83       	st	Z, r24
}
     c7a:	08 95       	ret

00000c7c <timer_expire>:
void timer_expire(void){
     c7c:	cf 93       	push	r28
     c7e:	df 93       	push	r29
	struct timer *tp;

	for(; Thead != NULL && Thead->time==0;){
     c80:	0d c0       	rjmp	.+26     	; 0xc9c <timer_expire+0x20>

		tp = Thead, Thead = tp->link;
     c82:	8c 85       	ldd	r24, Y+12	; 0x0c
     c84:	9d 85       	ldd	r25, Y+13	; 0x0d
     c86:	90 93 8f 04 	sts	0x048F, r25
     c8a:	80 93 8e 04 	sts	0x048E, r24
		
		task_insert(&tp->task);
     c8e:	ce 01       	movw	r24, r28
     c90:	02 96       	adiw	r24, 0x02	; 2
     c92:	0e 94 c9 03 	call	0x792	; 0x792 <task_insert>

		free(tp);
     c96:	ce 01       	movw	r24, r28
     c98:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <free>
	sbi(TCCR2B, CS20); sbi(TCCR2B, CS21); // 32KHz/32 prescaling, Start
}
void timer_expire(void){
	struct timer *tp;

	for(; Thead != NULL && Thead->time==0;){
     c9c:	c0 91 8e 04 	lds	r28, 0x048E
     ca0:	d0 91 8f 04 	lds	r29, 0x048F
     ca4:	20 97       	sbiw	r28, 0x00	; 0
     ca6:	21 f0       	breq	.+8      	; 0xcb0 <timer_expire+0x34>
     ca8:	88 81       	ld	r24, Y
     caa:	99 81       	ldd	r25, Y+1	; 0x01
     cac:	00 97       	sbiw	r24, 0x00	; 0
     cae:	49 f3       	breq	.-46     	; 0xc82 <timer_expire+0x6>
		
		task_insert(&tp->task);

		free(tp);
	}
}
     cb0:	df 91       	pop	r29
     cb2:	cf 91       	pop	r28
     cb4:	08 95       	ret

00000cb6 <__vector_15>:
ISR(TIMER2_OVF_vect){
     cb6:	1f 92       	push	r1
     cb8:	0f 92       	push	r0
     cba:	0f b6       	in	r0, 0x3f	; 63
     cbc:	0f 92       	push	r0
     cbe:	0b b6       	in	r0, 0x3b	; 59
     cc0:	0f 92       	push	r0
     cc2:	11 24       	eor	r1, r1
     cc4:	2f 93       	push	r18
     cc6:	3f 93       	push	r19
     cc8:	4f 93       	push	r20
     cca:	5f 93       	push	r21
     ccc:	6f 93       	push	r22
     cce:	7f 93       	push	r23
     cd0:	8f 93       	push	r24
     cd2:	9f 93       	push	r25
     cd4:	af 93       	push	r26
     cd6:	bf 93       	push	r27
     cd8:	ef 93       	push	r30
     cda:	ff 93       	push	r31
			led_off_all();
			led = 0;
			onesec = 0;
		}
	}*/
	if(!Thead)
     cdc:	e0 91 8e 04 	lds	r30, 0x048E
     ce0:	f0 91 8f 04 	lds	r31, 0x048F
     ce4:	30 97       	sbiw	r30, 0x00	; 0
     ce6:	49 f0       	breq	.+18     	; 0xcfa <__vector_15+0x44>
		return;
	if(--Thead->time == 0)
     ce8:	80 81       	ld	r24, Z
     cea:	91 81       	ldd	r25, Z+1	; 0x01
     cec:	01 97       	sbiw	r24, 0x01	; 1
     cee:	91 83       	std	Z+1, r25	; 0x01
     cf0:	80 83       	st	Z, r24
     cf2:	00 97       	sbiw	r24, 0x00	; 0
     cf4:	11 f4       	brne	.+4      	; 0xcfa <__vector_15+0x44>
		timer_expire();
     cf6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <timer_expire>
}
     cfa:	ff 91       	pop	r31
     cfc:	ef 91       	pop	r30
     cfe:	bf 91       	pop	r27
     d00:	af 91       	pop	r26
     d02:	9f 91       	pop	r25
     d04:	8f 91       	pop	r24
     d06:	7f 91       	pop	r23
     d08:	6f 91       	pop	r22
     d0a:	5f 91       	pop	r21
     d0c:	4f 91       	pop	r20
     d0e:	3f 91       	pop	r19
     d10:	2f 91       	pop	r18
     d12:	0f 90       	pop	r0
     d14:	0b be       	out	0x3b, r0	; 59
     d16:	0f 90       	pop	r0
     d18:	0f be       	out	0x3f, r0	; 63
     d1a:	0f 90       	pop	r0
     d1c:	1f 90       	pop	r1
     d1e:	18 95       	reti

00000d20 <uart_getchar>:
}
int uart_getchar(FILE *stream)
{
	char ch;
 	do {
 		cli();
     d20:	f8 94       	cli
 		ch = qi_delete();
     d22:	0e 94 b3 02 	call	0x566	; 0x566 <qi_delete>
 		sei();
     d26:	78 94       	sei
 	} while (ch == 0);
     d28:	88 23       	and	r24, r24
     d2a:	d1 f3       	breq	.-12     	; 0xd20 <uart_getchar>
 	if (ch == ETX) return(-1);
     d2c:	84 30       	cpi	r24, 0x04	; 4
     d2e:	11 f0       	breq	.+4      	; 0xd34 <uart_getchar+0x14>
 	else return(ch);
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	08 95       	ret
 	do {
 		cli();
 		ch = qi_delete();
 		sei();
 	} while (ch == 0);
 	if (ch == ETX) return(-1);
     d34:	8f ef       	ldi	r24, 0xFF	; 255
     d36:	9f ef       	ldi	r25, 0xFF	; 255
 	else return(ch);
 }
     d38:	08 95       	ret

00000d3a <uart_putchar>:
	 sbi(UCSR0B, RXEN0); // RX enable
 	 sbi(UCSR0B, RXCIE0); // RX complete interrupt enable 
 }

int uart_putchar(char ch, FILE *stream)
{
     d3a:	cf 93       	push	r28
     d3c:	c8 2f       	mov	r28, r24

	 if (ch == '\n')
     d3e:	8a 30       	cpi	r24, 0x0A	; 10
     d40:	19 f4       	brne	.+6      	; 0xd48 <uart_putchar+0xe>
	 	uart_putchar('\r', stream);
     d42:	8d e0       	ldi	r24, 0x0D	; 13
     d44:	0e 94 9d 06 	call	0xd3a	; 0xd3a <uart_putchar>
	 cli(); /* clear interrupt flag */
     d48:	f8 94       	cli
	 if (!uart_busy) {
     d4a:	80 91 40 07 	lds	r24, 0x0740
     d4e:	88 23       	and	r24, r24
     d50:	59 f4       	brne	.+22     	; 0xd68 <uart_putchar+0x2e>
	 	UDR0 = ch;
     d52:	c0 93 c6 00 	sts	0x00C6, r28
	 	uart_busy = 1;
     d56:	81 e0       	ldi	r24, 0x01	; 1
     d58:	80 93 40 07 	sts	0x0740, r24
     d5c:	0a c0       	rjmp	.+20     	; 0xd72 <uart_putchar+0x38>
	 }
	 else {
	 	while(qo_insert(ch) == 0) {
	 		sei();
     d5e:	78 94       	sei
     d60:	86 ef       	ldi	r24, 0xF6	; 246
     d62:	8a 95       	dec	r24
     d64:	f1 f7       	brne	.-4      	; 0xd62 <uart_putchar+0x28>
	 		_delay_us(100);
	 		cli();
     d66:	f8 94       	cli
	 if (!uart_busy) {
	 	UDR0 = ch;
	 	uart_busy = 1;
	 }
	 else {
	 	while(qo_insert(ch) == 0) {
     d68:	8c 2f       	mov	r24, r28
     d6a:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <qo_insert>
     d6e:	00 97       	sbiw	r24, 0x00	; 0
     d70:	b1 f3       	breq	.-20     	; 0xd5e <uart_putchar+0x24>
	 		sei();
	 		_delay_us(100);
	 		cli();
	 	}
	 }
	 sei(); /* set interrupt flag */
     d72:	78 94       	sei
	 return(1);
}
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	cf 91       	pop	r28
     d7a:	08 95       	ret

00000d7c <uart_init>:
 FILE Mystdin = FDEV_SETUP_STREAM (NULL, uart_getchar,_FDEV_SETUP_READ);
 unsigned char uart_busy;

 void uart_init()
 {
 	 stdin = &Mystdin;
     d7c:	8a e5       	ldi	r24, 0x5A	; 90
     d7e:	93 e0       	ldi	r25, 0x03	; 3
     d80:	90 93 46 07 	sts	0x0746, r25
     d84:	80 93 45 07 	sts	0x0745, r24
	 stdout = &Mystdout;
     d88:	88 e6       	ldi	r24, 0x68	; 104
     d8a:	93 e0       	ldi	r25, 0x03	; 3
     d8c:	90 93 48 07 	sts	0x0748, r25
     d90:	80 93 47 07 	sts	0x0747, r24
	 q_init();
     d94:	0e 94 80 02 	call	0x500	; 0x500 <q_init>
	 uart_busy = 0; // false
     d98:	10 92 40 07 	sts	0x0740, r1
	 UBRR0H = 0x00; UBRR0L = 0x07;
     d9c:	10 92 c5 00 	sts	0x00C5, r1
     da0:	87 e0       	ldi	r24, 0x07	; 7
     da2:	80 93 c4 00 	sts	0x00C4, r24
	 sbi(UCSR0A, U2X0); // UCSR)A |= (1 << U2X0);
     da6:	e0 ec       	ldi	r30, 0xC0	; 192
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 81       	ld	r24, Z
     dac:	82 60       	ori	r24, 0x02	; 2
     dae:	80 83       	st	Z, r24
	 sbi(UCSR0B, TXEN0);
     db0:	e1 ec       	ldi	r30, 0xC1	; 193
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	80 81       	ld	r24, Z
     db6:	88 60       	ori	r24, 0x08	; 8
     db8:	80 83       	st	Z, r24
	 sbi(UCSR0B, TXCIE0);
     dba:	80 81       	ld	r24, Z
     dbc:	80 64       	ori	r24, 0x40	; 64
     dbe:	80 83       	st	Z, r24
	 sbi(UCSR0B, RXEN0); // RX enable
     dc0:	80 81       	ld	r24, Z
     dc2:	80 61       	ori	r24, 0x10	; 16
     dc4:	80 83       	st	Z, r24
 	 sbi(UCSR0B, RXCIE0); // RX complete interrupt enable 
     dc6:	80 81       	ld	r24, Z
     dc8:	80 68       	ori	r24, 0x80	; 128
     dca:	80 83       	st	Z, r24
 }
     dcc:	08 95       	ret

00000dce <uart_echo>:
 	} while (ch == 0);
 	if (ch == ETX) return(-1);
 	else return(ch);
 }
 void uart_echo(char ch)
 {
     dce:	cf 93       	push	r28
     dd0:	c8 2f       	mov	r28, r24
 	if (ch == '\n') uart_echo('\r');
     dd2:	8a 30       	cpi	r24, 0x0A	; 10
     dd4:	19 f4       	brne	.+6      	; 0xddc <uart_echo+0xe>
     dd6:	8d e0       	ldi	r24, 0x0D	; 13
     dd8:	0e 94 e7 06 	call	0xdce	; 0xdce <uart_echo>
 	if (!uart_busy) {
     ddc:	80 91 40 07 	lds	r24, 0x0740
     de0:	88 23       	and	r24, r24
     de2:	31 f4       	brne	.+12     	; 0xdf0 <uart_echo+0x22>
 		UDR0 = ch;
     de4:	c0 93 c6 00 	sts	0x00C6, r28
 		uart_busy = 1;
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	80 93 40 07 	sts	0x0740, r24
     dee:	03 c0       	rjmp	.+6      	; 0xdf6 <uart_echo+0x28>
 	}
 	else
 	qo_insert(ch);
     df0:	8c 2f       	mov	r24, r28
     df2:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <qo_insert>
 }
     df6:	cf 91       	pop	r28
     df8:	08 95       	ret

00000dfa <__vector_27>:

ISR(USART0_TX_vect)
{
     dfa:	1f 92       	push	r1
     dfc:	0f 92       	push	r0
     dfe:	0f b6       	in	r0, 0x3f	; 63
     e00:	0f 92       	push	r0
     e02:	0b b6       	in	r0, 0x3b	; 59
     e04:	0f 92       	push	r0
     e06:	11 24       	eor	r1, r1
     e08:	2f 93       	push	r18
     e0a:	3f 93       	push	r19
     e0c:	4f 93       	push	r20
     e0e:	5f 93       	push	r21
     e10:	6f 93       	push	r22
     e12:	7f 93       	push	r23
     e14:	8f 93       	push	r24
     e16:	9f 93       	push	r25
     e18:	af 93       	push	r26
     e1a:	bf 93       	push	r27
     e1c:	ef 93       	push	r30
     e1e:	ff 93       	push	r31
	 char ch;
	 if ((ch = qo_delete()) == 0)
     e20:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <qo_delete>
     e24:	88 23       	and	r24, r24
     e26:	19 f4       	brne	.+6      	; 0xe2e <__vector_27+0x34>
	 	uart_busy = 0;
     e28:	10 92 40 07 	sts	0x0740, r1
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <__vector_27+0x38>
	 else
		UDR0 = ch;
     e2e:	80 93 c6 00 	sts	0x00C6, r24
} 
     e32:	ff 91       	pop	r31
     e34:	ef 91       	pop	r30
     e36:	bf 91       	pop	r27
     e38:	af 91       	pop	r26
     e3a:	9f 91       	pop	r25
     e3c:	8f 91       	pop	r24
     e3e:	7f 91       	pop	r23
     e40:	6f 91       	pop	r22
     e42:	5f 91       	pop	r21
     e44:	4f 91       	pop	r20
     e46:	3f 91       	pop	r19
     e48:	2f 91       	pop	r18
     e4a:	0f 90       	pop	r0
     e4c:	0b be       	out	0x3b, r0	; 59
     e4e:	0f 90       	pop	r0
     e50:	0f be       	out	0x3f, r0	; 63
     e52:	0f 90       	pop	r0
     e54:	1f 90       	pop	r1
     e56:	18 95       	reti

00000e58 <__vector_25>:
ISR(USART0_RX_vect)
{
     e58:	1f 92       	push	r1
     e5a:	0f 92       	push	r0
     e5c:	0f b6       	in	r0, 0x3f	; 63
     e5e:	0f 92       	push	r0
     e60:	0b b6       	in	r0, 0x3b	; 59
     e62:	0f 92       	push	r0
     e64:	11 24       	eor	r1, r1
     e66:	1f 93       	push	r17
     e68:	2f 93       	push	r18
     e6a:	3f 93       	push	r19
     e6c:	4f 93       	push	r20
     e6e:	5f 93       	push	r21
     e70:	6f 93       	push	r22
     e72:	7f 93       	push	r23
     e74:	8f 93       	push	r24
     e76:	9f 93       	push	r25
     e78:	af 93       	push	r26
     e7a:	bf 93       	push	r27
     e7c:	ef 93       	push	r30
     e7e:	ff 93       	push	r31
     e80:	cf 93       	push	r28
     e82:	df 93       	push	r29
     e84:	cd b7       	in	r28, 0x3d	; 61
     e86:	de b7       	in	r29, 0x3e	; 62
     e88:	2a 97       	sbiw	r28, 0x0a	; 10
     e8a:	de bf       	out	0x3e, r29	; 62
     e8c:	cd bf       	out	0x3d, r28	; 61
	struct task task;
 	char ch;
 	ch = UDR0;
     e8e:	10 91 c6 00 	lds	r17, 0x00C6
	if (ch != ETX) {
     e92:	14 30       	cpi	r17, 0x04	; 4
     e94:	31 f0       	breq	.+12     	; 0xea2 <__vector_25+0x4a>
 		if (ch == '\r')
     e96:	1d 30       	cpi	r17, 0x0D	; 13
     e98:	09 f4       	brne	.+2      	; 0xe9c <__vector_25+0x44>
 		ch = '\n';
     e9a:	1a e0       	ldi	r17, 0x0A	; 10
 		uart_echo(ch);
     e9c:	81 2f       	mov	r24, r17
     e9e:	0e 94 e7 06 	call	0xdce	; 0xdce <uart_echo>
 	}

 	qi_insert(ch);
     ea2:	81 2f       	mov	r24, r17
     ea4:	0e 94 91 02 	call	0x522	; 0x522 <qi_insert>
	if(ch == ETX || ch == '\n'){
     ea8:	14 30       	cpi	r17, 0x04	; 4
     eaa:	11 f0       	breq	.+4      	; 0xeb0 <__vector_25+0x58>
     eac:	1a 30       	cpi	r17, 0x0A	; 10
     eae:	71 f4       	brne	.+28     	; 0xecc <__vector_25+0x74>
		task.fun = task_cmd;
     eb0:	8e e8       	ldi	r24, 0x8E	; 142
     eb2:	94 e0       	ldi	r25, 0x04	; 4
     eb4:	9a 83       	std	Y+2, r25	; 0x02
     eb6:	89 83       	std	Y+1, r24	; 0x01
		strcpy(task.arg, "");
     eb8:	ce 01       	movw	r24, r28
     eba:	03 96       	adiw	r24, 0x03	; 3
     ebc:	69 e5       	ldi	r22, 0x59	; 89
     ebe:	73 e0       	ldi	r23, 0x03	; 3
     ec0:	0e 94 24 10 	call	0x2048	; 0x2048 <strcpy>
		task_insert(&task);
     ec4:	ce 01       	movw	r24, r28
     ec6:	01 96       	adiw	r24, 0x01	; 1
     ec8:	0e 94 c9 03 	call	0x792	; 0x792 <task_insert>
	}
}
     ecc:	2a 96       	adiw	r28, 0x0a	; 10
     ece:	de bf       	out	0x3e, r29	; 62
     ed0:	cd bf       	out	0x3d, r28	; 61
     ed2:	df 91       	pop	r29
     ed4:	cf 91       	pop	r28
     ed6:	ff 91       	pop	r31
     ed8:	ef 91       	pop	r30
     eda:	bf 91       	pop	r27
     edc:	af 91       	pop	r26
     ede:	9f 91       	pop	r25
     ee0:	8f 91       	pop	r24
     ee2:	7f 91       	pop	r23
     ee4:	6f 91       	pop	r22
     ee6:	5f 91       	pop	r21
     ee8:	4f 91       	pop	r20
     eea:	3f 91       	pop	r19
     eec:	2f 91       	pop	r18
     eee:	1f 91       	pop	r17
     ef0:	0f 90       	pop	r0
     ef2:	0b be       	out	0x3b, r0	; 59
     ef4:	0f 90       	pop	r0
     ef6:	0f be       	out	0x3f, r0	; 63
     ef8:	0f 90       	pop	r0
     efa:	1f 90       	pop	r1
     efc:	18 95       	reti

00000efe <spi_init>:
#include<stdlib.h>
#include <compat/deprecated.h>
#include"spi.h"
#include "task.h"
void spi_init(){
	sbi(DDRB, 0);
     efe:	20 9a       	sbi	0x04, 0	; 4
	sbi(DDRB, 1);
     f00:	21 9a       	sbi	0x04, 1	; 4
	sbi(DDRB, 2);
     f02:	22 9a       	sbi	0x04, 2	; 4
	cbi(DDRB, 3);
     f04:	23 98       	cbi	0x04, 3	; 4

	sbi(SPSR, SPI2X);
     f06:	8d b5       	in	r24, 0x2d	; 45
     f08:	81 60       	ori	r24, 0x01	; 1
     f0a:	8d bd       	out	0x2d, r24	; 45
	SPCR = ( (1 << MSTR) | (1 << SPE) | (1 << SPIE) ); 
     f0c:	80 ed       	ldi	r24, 0xD0	; 208
     f0e:	8c bd       	out	0x2c, r24	; 44
	//sbi(SPCR, MSTR);
	//sbi(SPCR, SPE);
	//sbi(SPCR, SPIE);
}
     f10:	08 95       	ret

00000f12 <spi_select>:
void spi_select() { cbi(PORTB, 0); }
     f12:	28 98       	cbi	0x05, 0	; 5
     f14:	08 95       	ret

00000f16 <spi_release>:
void spi_release() { sbi(PORTB, 0); }
     f16:	28 9a       	sbi	0x05, 0	; 5
     f18:	08 95       	ret

00000f1a <spi_write>:
void spi_write(uint8_t data) { SPDR = data; }
     f1a:	8e bd       	out	0x2e, r24	; 46
     f1c:	08 95       	ret

00000f1e <__vector_24>:
ISR(SPI_STC_vect)
 {
     f1e:	1f 92       	push	r1
     f20:	0f 92       	push	r0
     f22:	0f b6       	in	r0, 0x3f	; 63
     f24:	0f 92       	push	r0
     f26:	0b b6       	in	r0, 0x3b	; 59
     f28:	0f 92       	push	r0
     f2a:	11 24       	eor	r1, r1
     f2c:	2f 93       	push	r18
     f2e:	3f 93       	push	r19
     f30:	4f 93       	push	r20
     f32:	5f 93       	push	r21
     f34:	6f 93       	push	r22
     f36:	7f 93       	push	r23
     f38:	8f 93       	push	r24
     f3a:	9f 93       	push	r25
     f3c:	af 93       	push	r26
     f3e:	bf 93       	push	r27
     f40:	ef 93       	push	r30
     f42:	ff 93       	push	r31
     f44:	cf 93       	push	r28
     f46:	df 93       	push	r29
     f48:	cd b7       	in	r28, 0x3d	; 61
     f4a:	de b7       	in	r29, 0x3e	; 62
     f4c:	2a 97       	sbiw	r28, 0x0a	; 10
     f4e:	de bf       	out	0x3e, r29	; 62
     f50:	cd bf       	out	0x3d, r28	; 61
	 struct task task;
	 uint8_t data;
	 data = SPDR;
     f52:	2e b5       	in	r18, 0x2e	; 46

	 task.fun = task_tc77;
     f54:	8f e5       	ldi	r24, 0x5F	; 95
     f56:	93 e0       	ldi	r25, 0x03	; 3
     f58:	9a 83       	std	Y+2, r25	; 0x02
     f5a:	89 83       	std	Y+1, r24	; 0x01
	 sprintf(task.arg, "%d", data);
     f5c:	00 d0       	rcall	.+0      	; 0xf5e <__vector_24+0x40>
     f5e:	00 d0       	rcall	.+0      	; 0xf60 <__vector_24+0x42>
     f60:	ed b7       	in	r30, 0x3d	; 61
     f62:	fe b7       	in	r31, 0x3e	; 62
     f64:	31 96       	adiw	r30, 0x01	; 1
     f66:	ce 01       	movw	r24, r28
     f68:	03 96       	adiw	r24, 0x03	; 3
     f6a:	ad b7       	in	r26, 0x3d	; 61
     f6c:	be b7       	in	r27, 0x3e	; 62
     f6e:	12 96       	adiw	r26, 0x02	; 2
     f70:	9c 93       	st	X, r25
     f72:	8e 93       	st	-X, r24
     f74:	11 97       	sbiw	r26, 0x01	; 1
     f76:	86 e7       	ldi	r24, 0x76	; 118
     f78:	93 e0       	ldi	r25, 0x03	; 3
     f7a:	93 83       	std	Z+3, r25	; 0x03
     f7c:	82 83       	std	Z+2, r24	; 0x02
     f7e:	24 83       	std	Z+4, r18	; 0x04
     f80:	15 82       	std	Z+5, r1	; 0x05
     f82:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <sprintf>
	 task_insert(&task);
     f86:	8d b7       	in	r24, 0x3d	; 61
     f88:	9e b7       	in	r25, 0x3e	; 62
     f8a:	06 96       	adiw	r24, 0x06	; 6
     f8c:	0f b6       	in	r0, 0x3f	; 63
     f8e:	f8 94       	cli
     f90:	9e bf       	out	0x3e, r25	; 62
     f92:	0f be       	out	0x3f, r0	; 63
     f94:	8d bf       	out	0x3d, r24	; 61
     f96:	ce 01       	movw	r24, r28
     f98:	01 96       	adiw	r24, 0x01	; 1
     f9a:	0e 94 c9 03 	call	0x792	; 0x792 <task_insert>
 } 
     f9e:	2a 96       	adiw	r28, 0x0a	; 10
     fa0:	de bf       	out	0x3e, r29	; 62
     fa2:	cd bf       	out	0x3d, r28	; 61
     fa4:	df 91       	pop	r29
     fa6:	cf 91       	pop	r28
     fa8:	ff 91       	pop	r31
     faa:	ef 91       	pop	r30
     fac:	bf 91       	pop	r27
     fae:	af 91       	pop	r26
     fb0:	9f 91       	pop	r25
     fb2:	8f 91       	pop	r24
     fb4:	7f 91       	pop	r23
     fb6:	6f 91       	pop	r22
     fb8:	5f 91       	pop	r21
     fba:	4f 91       	pop	r20
     fbc:	3f 91       	pop	r19
     fbe:	2f 91       	pop	r18
     fc0:	0f 90       	pop	r0
     fc2:	0b be       	out	0x3b, r0	; 59
     fc4:	0f 90       	pop	r0
     fc6:	0f be       	out	0x3f, r0	; 63
     fc8:	0f 90       	pop	r0
     fca:	1f 90       	pop	r1
     fcc:	18 95       	reti

00000fce <__fixunssfsi>:
     fce:	cf 92       	push	r12
     fd0:	df 92       	push	r13
     fd2:	ef 92       	push	r14
     fd4:	ff 92       	push	r15
     fd6:	0f 93       	push	r16
     fd8:	1f 93       	push	r17
     fda:	6b 01       	movw	r12, r22
     fdc:	7c 01       	movw	r14, r24
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	40 e0       	ldi	r20, 0x00	; 0
     fe4:	5f e4       	ldi	r21, 0x4F	; 79
     fe6:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__gesf2>
     fea:	87 fd       	sbrc	r24, 7
     fec:	11 c0       	rjmp	.+34     	; 0x1010 <__fixunssfsi+0x42>
     fee:	c7 01       	movw	r24, r14
     ff0:	b6 01       	movw	r22, r12
     ff2:	20 e0       	ldi	r18, 0x00	; 0
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	40 e0       	ldi	r20, 0x00	; 0
     ff8:	5f e4       	ldi	r21, 0x4F	; 79
     ffa:	0e 94 9c 09 	call	0x1338	; 0x1338 <__subsf3>
     ffe:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__fixsfsi>
    1002:	8b 01       	movw	r16, r22
    1004:	9c 01       	movw	r18, r24
    1006:	00 50       	subi	r16, 0x00	; 0
    1008:	10 40       	sbci	r17, 0x00	; 0
    100a:	20 40       	sbci	r18, 0x00	; 0
    100c:	30 48       	sbci	r19, 0x80	; 128
    100e:	06 c0       	rjmp	.+12     	; 0x101c <__fixunssfsi+0x4e>
    1010:	c7 01       	movw	r24, r14
    1012:	b6 01       	movw	r22, r12
    1014:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__fixsfsi>
    1018:	8b 01       	movw	r16, r22
    101a:	9c 01       	movw	r18, r24
    101c:	b8 01       	movw	r22, r16
    101e:	c9 01       	movw	r24, r18
    1020:	1f 91       	pop	r17
    1022:	0f 91       	pop	r16
    1024:	ff 90       	pop	r15
    1026:	ef 90       	pop	r14
    1028:	df 90       	pop	r13
    102a:	cf 90       	pop	r12
    102c:	08 95       	ret

0000102e <_fpadd_parts>:
    102e:	a0 e0       	ldi	r26, 0x00	; 0
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	ed e1       	ldi	r30, 0x1D	; 29
    1034:	f8 e0       	ldi	r31, 0x08	; 8
    1036:	0c 94 94 0e 	jmp	0x1d28	; 0x1d28 <__prologue_saves__+0x4>
    103a:	ec 01       	movw	r28, r24
    103c:	4b 01       	movw	r8, r22
    103e:	fa 01       	movw	r30, r20
    1040:	88 81       	ld	r24, Y
    1042:	82 30       	cpi	r24, 0x02	; 2
    1044:	08 f4       	brcc	.+2      	; 0x1048 <_fpadd_parts+0x1a>
    1046:	3e c1       	rjmp	.+636    	; 0x12c4 <_fpadd_parts+0x296>
    1048:	db 01       	movw	r26, r22
    104a:	9c 91       	ld	r25, X
    104c:	92 30       	cpi	r25, 0x02	; 2
    104e:	08 f4       	brcc	.+2      	; 0x1052 <_fpadd_parts+0x24>
    1050:	36 c1       	rjmp	.+620    	; 0x12be <_fpadd_parts+0x290>
    1052:	84 30       	cpi	r24, 0x04	; 4
    1054:	59 f4       	brne	.+22     	; 0x106c <_fpadd_parts+0x3e>
    1056:	94 30       	cpi	r25, 0x04	; 4
    1058:	09 f0       	breq	.+2      	; 0x105c <_fpadd_parts+0x2e>
    105a:	34 c1       	rjmp	.+616    	; 0x12c4 <_fpadd_parts+0x296>
    105c:	99 81       	ldd	r25, Y+1	; 0x01
    105e:	11 96       	adiw	r26, 0x01	; 1
    1060:	8c 91       	ld	r24, X
    1062:	11 97       	sbiw	r26, 0x01	; 1
    1064:	98 17       	cp	r25, r24
    1066:	09 f0       	breq	.+2      	; 0x106a <_fpadd_parts+0x3c>
    1068:	27 c1       	rjmp	.+590    	; 0x12b8 <_fpadd_parts+0x28a>
    106a:	2c c1       	rjmp	.+600    	; 0x12c4 <_fpadd_parts+0x296>
    106c:	94 30       	cpi	r25, 0x04	; 4
    106e:	09 f4       	brne	.+2      	; 0x1072 <_fpadd_parts+0x44>
    1070:	26 c1       	rjmp	.+588    	; 0x12be <_fpadd_parts+0x290>
    1072:	92 30       	cpi	r25, 0x02	; 2
    1074:	a9 f4       	brne	.+42     	; 0x10a0 <_fpadd_parts+0x72>
    1076:	82 30       	cpi	r24, 0x02	; 2
    1078:	09 f0       	breq	.+2      	; 0x107c <_fpadd_parts+0x4e>
    107a:	24 c1       	rjmp	.+584    	; 0x12c4 <_fpadd_parts+0x296>
    107c:	ce 01       	movw	r24, r28
    107e:	28 e0       	ldi	r18, 0x08	; 8
    1080:	dc 01       	movw	r26, r24
    1082:	0d 90       	ld	r0, X+
    1084:	cd 01       	movw	r24, r26
    1086:	da 01       	movw	r26, r20
    1088:	0d 92       	st	X+, r0
    108a:	ad 01       	movw	r20, r26
    108c:	21 50       	subi	r18, 0x01	; 1
    108e:	c1 f7       	brne	.-16     	; 0x1080 <_fpadd_parts+0x52>
    1090:	d4 01       	movw	r26, r8
    1092:	11 96       	adiw	r26, 0x01	; 1
    1094:	8c 91       	ld	r24, X
    1096:	11 97       	sbiw	r26, 0x01	; 1
    1098:	99 81       	ldd	r25, Y+1	; 0x01
    109a:	89 23       	and	r24, r25
    109c:	81 83       	std	Z+1, r24	; 0x01
    109e:	11 c1       	rjmp	.+546    	; 0x12c2 <_fpadd_parts+0x294>
    10a0:	82 30       	cpi	r24, 0x02	; 2
    10a2:	09 f4       	brne	.+2      	; 0x10a6 <_fpadd_parts+0x78>
    10a4:	0c c1       	rjmp	.+536    	; 0x12be <_fpadd_parts+0x290>
    10a6:	aa 80       	ldd	r10, Y+2	; 0x02
    10a8:	bb 80       	ldd	r11, Y+3	; 0x03
    10aa:	db 01       	movw	r26, r22
    10ac:	12 96       	adiw	r26, 0x02	; 2
    10ae:	4d 91       	ld	r20, X+
    10b0:	5c 91       	ld	r21, X
    10b2:	13 97       	sbiw	r26, 0x03	; 3
    10b4:	cc 80       	ldd	r12, Y+4	; 0x04
    10b6:	dd 80       	ldd	r13, Y+5	; 0x05
    10b8:	ee 80       	ldd	r14, Y+6	; 0x06
    10ba:	ff 80       	ldd	r15, Y+7	; 0x07
    10bc:	14 96       	adiw	r26, 0x04	; 4
    10be:	0d 91       	ld	r16, X+
    10c0:	1d 91       	ld	r17, X+
    10c2:	2d 91       	ld	r18, X+
    10c4:	3c 91       	ld	r19, X
    10c6:	17 97       	sbiw	r26, 0x07	; 7
    10c8:	c5 01       	movw	r24, r10
    10ca:	84 1b       	sub	r24, r20
    10cc:	95 0b       	sbc	r25, r21
    10ce:	dc 01       	movw	r26, r24
    10d0:	97 ff       	sbrs	r25, 7
    10d2:	04 c0       	rjmp	.+8      	; 0x10dc <_fpadd_parts+0xae>
    10d4:	aa 27       	eor	r26, r26
    10d6:	bb 27       	eor	r27, r27
    10d8:	a8 1b       	sub	r26, r24
    10da:	b9 0b       	sbc	r27, r25
    10dc:	a0 32       	cpi	r26, 0x20	; 32
    10de:	b1 05       	cpc	r27, r1
    10e0:	0c f0       	brlt	.+2      	; 0x10e4 <_fpadd_parts+0xb6>
    10e2:	67 c0       	rjmp	.+206    	; 0x11b2 <_fpadd_parts+0x184>
    10e4:	18 16       	cp	r1, r24
    10e6:	19 06       	cpc	r1, r25
    10e8:	84 f5       	brge	.+96     	; 0x114a <_fpadd_parts+0x11c>
    10ea:	28 01       	movw	r4, r16
    10ec:	39 01       	movw	r6, r18
    10ee:	0a 2e       	mov	r0, r26
    10f0:	04 c0       	rjmp	.+8      	; 0x10fa <_fpadd_parts+0xcc>
    10f2:	76 94       	lsr	r7
    10f4:	67 94       	ror	r6
    10f6:	57 94       	ror	r5
    10f8:	47 94       	ror	r4
    10fa:	0a 94       	dec	r0
    10fc:	d2 f7       	brpl	.-12     	; 0x10f2 <_fpadd_parts+0xc4>
    10fe:	41 e0       	ldi	r20, 0x01	; 1
    1100:	50 e0       	ldi	r21, 0x00	; 0
    1102:	60 e0       	ldi	r22, 0x00	; 0
    1104:	70 e0       	ldi	r23, 0x00	; 0
    1106:	04 c0       	rjmp	.+8      	; 0x1110 <_fpadd_parts+0xe2>
    1108:	44 0f       	add	r20, r20
    110a:	55 1f       	adc	r21, r21
    110c:	66 1f       	adc	r22, r22
    110e:	77 1f       	adc	r23, r23
    1110:	aa 95       	dec	r26
    1112:	d2 f7       	brpl	.-12     	; 0x1108 <_fpadd_parts+0xda>
    1114:	41 50       	subi	r20, 0x01	; 1
    1116:	50 40       	sbci	r21, 0x00	; 0
    1118:	60 40       	sbci	r22, 0x00	; 0
    111a:	70 40       	sbci	r23, 0x00	; 0
    111c:	40 23       	and	r20, r16
    111e:	51 23       	and	r21, r17
    1120:	62 23       	and	r22, r18
    1122:	73 23       	and	r23, r19
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	a0 e0       	ldi	r26, 0x00	; 0
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	41 15       	cp	r20, r1
    112e:	51 05       	cpc	r21, r1
    1130:	61 05       	cpc	r22, r1
    1132:	71 05       	cpc	r23, r1
    1134:	19 f4       	brne	.+6      	; 0x113c <_fpadd_parts+0x10e>
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	dc 01       	movw	r26, r24
    113c:	8c 01       	movw	r16, r24
    113e:	9d 01       	movw	r18, r26
    1140:	04 29       	or	r16, r4
    1142:	15 29       	or	r17, r5
    1144:	26 29       	or	r18, r6
    1146:	37 29       	or	r19, r7
    1148:	3f c0       	rjmp	.+126    	; 0x11c8 <_fpadd_parts+0x19a>
    114a:	00 97       	sbiw	r24, 0x00	; 0
    114c:	e9 f1       	breq	.+122    	; 0x11c8 <_fpadd_parts+0x19a>
    114e:	aa 0e       	add	r10, r26
    1150:	bb 1e       	adc	r11, r27
    1152:	26 01       	movw	r4, r12
    1154:	37 01       	movw	r6, r14
    1156:	0a 2e       	mov	r0, r26
    1158:	04 c0       	rjmp	.+8      	; 0x1162 <_fpadd_parts+0x134>
    115a:	76 94       	lsr	r7
    115c:	67 94       	ror	r6
    115e:	57 94       	ror	r5
    1160:	47 94       	ror	r4
    1162:	0a 94       	dec	r0
    1164:	d2 f7       	brpl	.-12     	; 0x115a <_fpadd_parts+0x12c>
    1166:	41 e0       	ldi	r20, 0x01	; 1
    1168:	50 e0       	ldi	r21, 0x00	; 0
    116a:	60 e0       	ldi	r22, 0x00	; 0
    116c:	70 e0       	ldi	r23, 0x00	; 0
    116e:	04 c0       	rjmp	.+8      	; 0x1178 <_fpadd_parts+0x14a>
    1170:	44 0f       	add	r20, r20
    1172:	55 1f       	adc	r21, r21
    1174:	66 1f       	adc	r22, r22
    1176:	77 1f       	adc	r23, r23
    1178:	aa 95       	dec	r26
    117a:	d2 f7       	brpl	.-12     	; 0x1170 <_fpadd_parts+0x142>
    117c:	41 50       	subi	r20, 0x01	; 1
    117e:	50 40       	sbci	r21, 0x00	; 0
    1180:	60 40       	sbci	r22, 0x00	; 0
    1182:	70 40       	sbci	r23, 0x00	; 0
    1184:	4c 21       	and	r20, r12
    1186:	5d 21       	and	r21, r13
    1188:	6e 21       	and	r22, r14
    118a:	7f 21       	and	r23, r15
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	a0 e0       	ldi	r26, 0x00	; 0
    1192:	b0 e0       	ldi	r27, 0x00	; 0
    1194:	41 15       	cp	r20, r1
    1196:	51 05       	cpc	r21, r1
    1198:	61 05       	cpc	r22, r1
    119a:	71 05       	cpc	r23, r1
    119c:	19 f4       	brne	.+6      	; 0x11a4 <_fpadd_parts+0x176>
    119e:	80 e0       	ldi	r24, 0x00	; 0
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	dc 01       	movw	r26, r24
    11a4:	6c 01       	movw	r12, r24
    11a6:	7d 01       	movw	r14, r26
    11a8:	c4 28       	or	r12, r4
    11aa:	d5 28       	or	r13, r5
    11ac:	e6 28       	or	r14, r6
    11ae:	f7 28       	or	r15, r7
    11b0:	0b c0       	rjmp	.+22     	; 0x11c8 <_fpadd_parts+0x19a>
    11b2:	4a 15       	cp	r20, r10
    11b4:	5b 05       	cpc	r21, r11
    11b6:	24 f4       	brge	.+8      	; 0x11c0 <_fpadd_parts+0x192>
    11b8:	00 e0       	ldi	r16, 0x00	; 0
    11ba:	10 e0       	ldi	r17, 0x00	; 0
    11bc:	98 01       	movw	r18, r16
    11be:	04 c0       	rjmp	.+8      	; 0x11c8 <_fpadd_parts+0x19a>
    11c0:	5a 01       	movw	r10, r20
    11c2:	cc 24       	eor	r12, r12
    11c4:	dd 24       	eor	r13, r13
    11c6:	76 01       	movw	r14, r12
    11c8:	89 81       	ldd	r24, Y+1	; 0x01
    11ca:	d4 01       	movw	r26, r8
    11cc:	11 96       	adiw	r26, 0x01	; 1
    11ce:	9c 91       	ld	r25, X
    11d0:	11 97       	sbiw	r26, 0x01	; 1
    11d2:	89 17       	cp	r24, r25
    11d4:	09 f4       	brne	.+2      	; 0x11d8 <_fpadd_parts+0x1aa>
    11d6:	45 c0       	rjmp	.+138    	; 0x1262 <_fpadd_parts+0x234>
    11d8:	88 23       	and	r24, r24
    11da:	29 f0       	breq	.+10     	; 0x11e6 <_fpadd_parts+0x1b8>
    11dc:	0c 19       	sub	r16, r12
    11de:	1d 09       	sbc	r17, r13
    11e0:	2e 09       	sbc	r18, r14
    11e2:	3f 09       	sbc	r19, r15
    11e4:	08 c0       	rjmp	.+16     	; 0x11f6 <_fpadd_parts+0x1c8>
    11e6:	d7 01       	movw	r26, r14
    11e8:	c6 01       	movw	r24, r12
    11ea:	80 1b       	sub	r24, r16
    11ec:	91 0b       	sbc	r25, r17
    11ee:	a2 0b       	sbc	r26, r18
    11f0:	b3 0b       	sbc	r27, r19
    11f2:	8c 01       	movw	r16, r24
    11f4:	9d 01       	movw	r18, r26
    11f6:	37 fd       	sbrc	r19, 7
    11f8:	04 c0       	rjmp	.+8      	; 0x1202 <_fpadd_parts+0x1d4>
    11fa:	11 82       	std	Z+1, r1	; 0x01
    11fc:	b3 82       	std	Z+3, r11	; 0x03
    11fe:	a2 82       	std	Z+2, r10	; 0x02
    1200:	0b c0       	rjmp	.+22     	; 0x1218 <_fpadd_parts+0x1ea>
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	81 83       	std	Z+1, r24	; 0x01
    1206:	b3 82       	std	Z+3, r11	; 0x03
    1208:	a2 82       	std	Z+2, r10	; 0x02
    120a:	30 95       	com	r19
    120c:	20 95       	com	r18
    120e:	10 95       	com	r17
    1210:	01 95       	neg	r16
    1212:	1f 4f       	sbci	r17, 0xFF	; 255
    1214:	2f 4f       	sbci	r18, 0xFF	; 255
    1216:	3f 4f       	sbci	r19, 0xFF	; 255
    1218:	04 83       	std	Z+4, r16	; 0x04
    121a:	15 83       	std	Z+5, r17	; 0x05
    121c:	26 83       	std	Z+6, r18	; 0x06
    121e:	37 83       	std	Z+7, r19	; 0x07
    1220:	0d c0       	rjmp	.+26     	; 0x123c <_fpadd_parts+0x20e>
    1222:	88 0f       	add	r24, r24
    1224:	99 1f       	adc	r25, r25
    1226:	aa 1f       	adc	r26, r26
    1228:	bb 1f       	adc	r27, r27
    122a:	84 83       	std	Z+4, r24	; 0x04
    122c:	95 83       	std	Z+5, r25	; 0x05
    122e:	a6 83       	std	Z+6, r26	; 0x06
    1230:	b7 83       	std	Z+7, r27	; 0x07
    1232:	82 81       	ldd	r24, Z+2	; 0x02
    1234:	93 81       	ldd	r25, Z+3	; 0x03
    1236:	01 97       	sbiw	r24, 0x01	; 1
    1238:	93 83       	std	Z+3, r25	; 0x03
    123a:	82 83       	std	Z+2, r24	; 0x02
    123c:	84 81       	ldd	r24, Z+4	; 0x04
    123e:	95 81       	ldd	r25, Z+5	; 0x05
    1240:	a6 81       	ldd	r26, Z+6	; 0x06
    1242:	b7 81       	ldd	r27, Z+7	; 0x07
    1244:	ac 01       	movw	r20, r24
    1246:	bd 01       	movw	r22, r26
    1248:	41 50       	subi	r20, 0x01	; 1
    124a:	50 40       	sbci	r21, 0x00	; 0
    124c:	60 40       	sbci	r22, 0x00	; 0
    124e:	70 40       	sbci	r23, 0x00	; 0
    1250:	4f 3f       	cpi	r20, 0xFF	; 255
    1252:	2f ef       	ldi	r18, 0xFF	; 255
    1254:	52 07       	cpc	r21, r18
    1256:	2f ef       	ldi	r18, 0xFF	; 255
    1258:	62 07       	cpc	r22, r18
    125a:	2f e3       	ldi	r18, 0x3F	; 63
    125c:	72 07       	cpc	r23, r18
    125e:	08 f3       	brcs	.-62     	; 0x1222 <_fpadd_parts+0x1f4>
    1260:	0b c0       	rjmp	.+22     	; 0x1278 <_fpadd_parts+0x24a>
    1262:	81 83       	std	Z+1, r24	; 0x01
    1264:	b3 82       	std	Z+3, r11	; 0x03
    1266:	a2 82       	std	Z+2, r10	; 0x02
    1268:	0c 0d       	add	r16, r12
    126a:	1d 1d       	adc	r17, r13
    126c:	2e 1d       	adc	r18, r14
    126e:	3f 1d       	adc	r19, r15
    1270:	04 83       	std	Z+4, r16	; 0x04
    1272:	15 83       	std	Z+5, r17	; 0x05
    1274:	26 83       	std	Z+6, r18	; 0x06
    1276:	37 83       	std	Z+7, r19	; 0x07
    1278:	83 e0       	ldi	r24, 0x03	; 3
    127a:	80 83       	st	Z, r24
    127c:	44 81       	ldd	r20, Z+4	; 0x04
    127e:	55 81       	ldd	r21, Z+5	; 0x05
    1280:	66 81       	ldd	r22, Z+6	; 0x06
    1282:	77 81       	ldd	r23, Z+7	; 0x07
    1284:	77 ff       	sbrs	r23, 7
    1286:	1d c0       	rjmp	.+58     	; 0x12c2 <_fpadd_parts+0x294>
    1288:	db 01       	movw	r26, r22
    128a:	ca 01       	movw	r24, r20
    128c:	81 70       	andi	r24, 0x01	; 1
    128e:	90 70       	andi	r25, 0x00	; 0
    1290:	a0 70       	andi	r26, 0x00	; 0
    1292:	b0 70       	andi	r27, 0x00	; 0
    1294:	76 95       	lsr	r23
    1296:	67 95       	ror	r22
    1298:	57 95       	ror	r21
    129a:	47 95       	ror	r20
    129c:	84 2b       	or	r24, r20
    129e:	95 2b       	or	r25, r21
    12a0:	a6 2b       	or	r26, r22
    12a2:	b7 2b       	or	r27, r23
    12a4:	84 83       	std	Z+4, r24	; 0x04
    12a6:	95 83       	std	Z+5, r25	; 0x05
    12a8:	a6 83       	std	Z+6, r26	; 0x06
    12aa:	b7 83       	std	Z+7, r27	; 0x07
    12ac:	82 81       	ldd	r24, Z+2	; 0x02
    12ae:	93 81       	ldd	r25, Z+3	; 0x03
    12b0:	01 96       	adiw	r24, 0x01	; 1
    12b2:	93 83       	std	Z+3, r25	; 0x03
    12b4:	82 83       	std	Z+2, r24	; 0x02
    12b6:	05 c0       	rjmp	.+10     	; 0x12c2 <_fpadd_parts+0x294>
    12b8:	c9 e7       	ldi	r28, 0x79	; 121
    12ba:	d3 e0       	ldi	r29, 0x03	; 3
    12bc:	03 c0       	rjmp	.+6      	; 0x12c4 <_fpadd_parts+0x296>
    12be:	e4 01       	movw	r28, r8
    12c0:	01 c0       	rjmp	.+2      	; 0x12c4 <_fpadd_parts+0x296>
    12c2:	ef 01       	movw	r28, r30
    12c4:	ce 01       	movw	r24, r28
    12c6:	cd b7       	in	r28, 0x3d	; 61
    12c8:	de b7       	in	r29, 0x3e	; 62
    12ca:	e0 e1       	ldi	r30, 0x10	; 16
    12cc:	0c 94 b0 0e 	jmp	0x1d60	; 0x1d60 <__epilogue_restores__+0x4>

000012d0 <__addsf3>:
    12d0:	a0 e2       	ldi	r26, 0x20	; 32
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	ee e6       	ldi	r30, 0x6E	; 110
    12d6:	f9 e0       	ldi	r31, 0x09	; 9
    12d8:	0c 94 a2 0e 	jmp	0x1d44	; 0x1d44 <__prologue_saves__+0x20>
    12dc:	dc 01       	movw	r26, r24
    12de:	cb 01       	movw	r24, r22
    12e0:	8d 83       	std	Y+5, r24	; 0x05
    12e2:	9e 83       	std	Y+6, r25	; 0x06
    12e4:	af 83       	std	Y+7, r26	; 0x07
    12e6:	b8 87       	std	Y+8, r27	; 0x08
    12e8:	29 83       	std	Y+1, r18	; 0x01
    12ea:	3a 83       	std	Y+2, r19	; 0x02
    12ec:	4b 83       	std	Y+3, r20	; 0x03
    12ee:	5c 83       	std	Y+4, r21	; 0x04
    12f0:	ce 01       	movw	r24, r28
    12f2:	05 96       	adiw	r24, 0x05	; 5
    12f4:	be 01       	movw	r22, r28
    12f6:	67 5e       	subi	r22, 0xE7	; 231
    12f8:	7f 4f       	sbci	r23, 0xFF	; 255
    12fa:	0e 94 75 0d 	call	0x1aea	; 0x1aea <__unpack_f>
    12fe:	ce 01       	movw	r24, r28
    1300:	01 96       	adiw	r24, 0x01	; 1
    1302:	be 01       	movw	r22, r28
    1304:	6f 5e       	subi	r22, 0xEF	; 239
    1306:	7f 4f       	sbci	r23, 0xFF	; 255
    1308:	0e 94 75 0d 	call	0x1aea	; 0x1aea <__unpack_f>
    130c:	ce 01       	movw	r24, r28
    130e:	49 96       	adiw	r24, 0x19	; 25
    1310:	be 01       	movw	r22, r28
    1312:	6f 5e       	subi	r22, 0xEF	; 239
    1314:	7f 4f       	sbci	r23, 0xFF	; 255
    1316:	ae 01       	movw	r20, r28
    1318:	47 5f       	subi	r20, 0xF7	; 247
    131a:	5f 4f       	sbci	r21, 0xFF	; 255
    131c:	0e 94 17 08 	call	0x102e	; 0x102e <_fpadd_parts>
    1320:	0e 94 9e 0c 	call	0x193c	; 0x193c <__pack_f>
    1324:	46 2f       	mov	r20, r22
    1326:	57 2f       	mov	r21, r23
    1328:	68 2f       	mov	r22, r24
    132a:	79 2f       	mov	r23, r25
    132c:	cb 01       	movw	r24, r22
    132e:	ba 01       	movw	r22, r20
    1330:	a0 96       	adiw	r28, 0x20	; 32
    1332:	e2 e0       	ldi	r30, 0x02	; 2
    1334:	0c 94 be 0e 	jmp	0x1d7c	; 0x1d7c <__epilogue_restores__+0x20>

00001338 <__subsf3>:
    1338:	a0 e2       	ldi	r26, 0x20	; 32
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	e2 ea       	ldi	r30, 0xA2	; 162
    133e:	f9 e0       	ldi	r31, 0x09	; 9
    1340:	0c 94 a2 0e 	jmp	0x1d44	; 0x1d44 <__prologue_saves__+0x20>
    1344:	dc 01       	movw	r26, r24
    1346:	cb 01       	movw	r24, r22
    1348:	8d 83       	std	Y+5, r24	; 0x05
    134a:	9e 83       	std	Y+6, r25	; 0x06
    134c:	af 83       	std	Y+7, r26	; 0x07
    134e:	b8 87       	std	Y+8, r27	; 0x08
    1350:	29 83       	std	Y+1, r18	; 0x01
    1352:	3a 83       	std	Y+2, r19	; 0x02
    1354:	4b 83       	std	Y+3, r20	; 0x03
    1356:	5c 83       	std	Y+4, r21	; 0x04
    1358:	ce 01       	movw	r24, r28
    135a:	05 96       	adiw	r24, 0x05	; 5
    135c:	be 01       	movw	r22, r28
    135e:	67 5e       	subi	r22, 0xE7	; 231
    1360:	7f 4f       	sbci	r23, 0xFF	; 255
    1362:	0e 94 75 0d 	call	0x1aea	; 0x1aea <__unpack_f>
    1366:	ce 01       	movw	r24, r28
    1368:	01 96       	adiw	r24, 0x01	; 1
    136a:	be 01       	movw	r22, r28
    136c:	6f 5e       	subi	r22, 0xEF	; 239
    136e:	7f 4f       	sbci	r23, 0xFF	; 255
    1370:	0e 94 75 0d 	call	0x1aea	; 0x1aea <__unpack_f>
    1374:	8a 89       	ldd	r24, Y+18	; 0x12
    1376:	91 e0       	ldi	r25, 0x01	; 1
    1378:	89 27       	eor	r24, r25
    137a:	8a 8b       	std	Y+18, r24	; 0x12
    137c:	ce 01       	movw	r24, r28
    137e:	49 96       	adiw	r24, 0x19	; 25
    1380:	be 01       	movw	r22, r28
    1382:	6f 5e       	subi	r22, 0xEF	; 239
    1384:	7f 4f       	sbci	r23, 0xFF	; 255
    1386:	ae 01       	movw	r20, r28
    1388:	47 5f       	subi	r20, 0xF7	; 247
    138a:	5f 4f       	sbci	r21, 0xFF	; 255
    138c:	0e 94 17 08 	call	0x102e	; 0x102e <_fpadd_parts>
    1390:	0e 94 9e 0c 	call	0x193c	; 0x193c <__pack_f>
    1394:	46 2f       	mov	r20, r22
    1396:	57 2f       	mov	r21, r23
    1398:	68 2f       	mov	r22, r24
    139a:	79 2f       	mov	r23, r25
    139c:	cb 01       	movw	r24, r22
    139e:	ba 01       	movw	r22, r20
    13a0:	a0 96       	adiw	r28, 0x20	; 32
    13a2:	e2 e0       	ldi	r30, 0x02	; 2
    13a4:	0c 94 be 0e 	jmp	0x1d7c	; 0x1d7c <__epilogue_restores__+0x20>

000013a8 <__mulsf3>:
    13a8:	a0 e2       	ldi	r26, 0x20	; 32
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	ea ed       	ldi	r30, 0xDA	; 218
    13ae:	f9 e0       	ldi	r31, 0x09	; 9
    13b0:	0c 94 94 0e 	jmp	0x1d28	; 0x1d28 <__prologue_saves__+0x4>
    13b4:	dc 01       	movw	r26, r24
    13b6:	cb 01       	movw	r24, r22
    13b8:	8d 83       	std	Y+5, r24	; 0x05
    13ba:	9e 83       	std	Y+6, r25	; 0x06
    13bc:	af 83       	std	Y+7, r26	; 0x07
    13be:	b8 87       	std	Y+8, r27	; 0x08
    13c0:	29 83       	std	Y+1, r18	; 0x01
    13c2:	3a 83       	std	Y+2, r19	; 0x02
    13c4:	4b 83       	std	Y+3, r20	; 0x03
    13c6:	5c 83       	std	Y+4, r21	; 0x04
    13c8:	ce 01       	movw	r24, r28
    13ca:	05 96       	adiw	r24, 0x05	; 5
    13cc:	be 01       	movw	r22, r28
    13ce:	67 5e       	subi	r22, 0xE7	; 231
    13d0:	7f 4f       	sbci	r23, 0xFF	; 255
    13d2:	0e 94 75 0d 	call	0x1aea	; 0x1aea <__unpack_f>
    13d6:	ce 01       	movw	r24, r28
    13d8:	01 96       	adiw	r24, 0x01	; 1
    13da:	be 01       	movw	r22, r28
    13dc:	6f 5e       	subi	r22, 0xEF	; 239
    13de:	7f 4f       	sbci	r23, 0xFF	; 255
    13e0:	0e 94 75 0d 	call	0x1aea	; 0x1aea <__unpack_f>
    13e4:	99 8d       	ldd	r25, Y+25	; 0x19
    13e6:	92 30       	cpi	r25, 0x02	; 2
    13e8:	78 f0       	brcs	.+30     	; 0x1408 <__mulsf3+0x60>
    13ea:	89 89       	ldd	r24, Y+17	; 0x11
    13ec:	82 30       	cpi	r24, 0x02	; 2
    13ee:	c0 f0       	brcs	.+48     	; 0x1420 <__mulsf3+0x78>
    13f0:	94 30       	cpi	r25, 0x04	; 4
    13f2:	19 f4       	brne	.+6      	; 0x13fa <__mulsf3+0x52>
    13f4:	82 30       	cpi	r24, 0x02	; 2
    13f6:	41 f4       	brne	.+16     	; 0x1408 <__mulsf3+0x60>
    13f8:	ca c0       	rjmp	.+404    	; 0x158e <__mulsf3+0x1e6>
    13fa:	84 30       	cpi	r24, 0x04	; 4
    13fc:	19 f4       	brne	.+6      	; 0x1404 <__mulsf3+0x5c>
    13fe:	92 30       	cpi	r25, 0x02	; 2
    1400:	79 f4       	brne	.+30     	; 0x1420 <__mulsf3+0x78>
    1402:	c5 c0       	rjmp	.+394    	; 0x158e <__mulsf3+0x1e6>
    1404:	92 30       	cpi	r25, 0x02	; 2
    1406:	51 f4       	brne	.+20     	; 0x141c <__mulsf3+0x74>
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	2a 8d       	ldd	r18, Y+26	; 0x1a
    140c:	9a 89       	ldd	r25, Y+18	; 0x12
    140e:	29 17       	cp	r18, r25
    1410:	09 f4       	brne	.+2      	; 0x1414 <__mulsf3+0x6c>
    1412:	80 e0       	ldi	r24, 0x00	; 0
    1414:	8a 8f       	std	Y+26, r24	; 0x1a
    1416:	ce 01       	movw	r24, r28
    1418:	49 96       	adiw	r24, 0x19	; 25
    141a:	bb c0       	rjmp	.+374    	; 0x1592 <__mulsf3+0x1ea>
    141c:	82 30       	cpi	r24, 0x02	; 2
    141e:	51 f4       	brne	.+20     	; 0x1434 <__mulsf3+0x8c>
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	2a 8d       	ldd	r18, Y+26	; 0x1a
    1424:	9a 89       	ldd	r25, Y+18	; 0x12
    1426:	29 17       	cp	r18, r25
    1428:	09 f4       	brne	.+2      	; 0x142c <__mulsf3+0x84>
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	8a 8b       	std	Y+18, r24	; 0x12
    142e:	ce 01       	movw	r24, r28
    1430:	41 96       	adiw	r24, 0x11	; 17
    1432:	af c0       	rjmp	.+350    	; 0x1592 <__mulsf3+0x1ea>
    1434:	4d 8c       	ldd	r4, Y+29	; 0x1d
    1436:	5e 8c       	ldd	r5, Y+30	; 0x1e
    1438:	6f 8c       	ldd	r6, Y+31	; 0x1f
    143a:	78 a0       	lds	r23, 0x88
    143c:	0d 89       	ldd	r16, Y+21	; 0x15
    143e:	1e 89       	ldd	r17, Y+22	; 0x16
    1440:	2f 89       	ldd	r18, Y+23	; 0x17
    1442:	38 8d       	ldd	r19, Y+24	; 0x18
    1444:	e0 e2       	ldi	r30, 0x20	; 32
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	40 e0       	ldi	r20, 0x00	; 0
    144a:	50 e0       	ldi	r21, 0x00	; 0
    144c:	ba 01       	movw	r22, r20
    144e:	88 24       	eor	r8, r8
    1450:	99 24       	eor	r9, r9
    1452:	54 01       	movw	r10, r8
    1454:	cc 24       	eor	r12, r12
    1456:	dd 24       	eor	r13, r13
    1458:	76 01       	movw	r14, r12
    145a:	c2 01       	movw	r24, r4
    145c:	81 70       	andi	r24, 0x01	; 1
    145e:	90 70       	andi	r25, 0x00	; 0
    1460:	00 97       	sbiw	r24, 0x00	; 0
    1462:	d1 f0       	breq	.+52     	; 0x1498 <__mulsf3+0xf0>
    1464:	c0 0e       	add	r12, r16
    1466:	d1 1e       	adc	r13, r17
    1468:	e2 1e       	adc	r14, r18
    146a:	f3 1e       	adc	r15, r19
    146c:	db 01       	movw	r26, r22
    146e:	ca 01       	movw	r24, r20
    1470:	88 0d       	add	r24, r8
    1472:	99 1d       	adc	r25, r9
    1474:	aa 1d       	adc	r26, r10
    1476:	bb 1d       	adc	r27, r11
    1478:	41 e0       	ldi	r20, 0x01	; 1
    147a:	50 e0       	ldi	r21, 0x00	; 0
    147c:	60 e0       	ldi	r22, 0x00	; 0
    147e:	70 e0       	ldi	r23, 0x00	; 0
    1480:	c0 16       	cp	r12, r16
    1482:	d1 06       	cpc	r13, r17
    1484:	e2 06       	cpc	r14, r18
    1486:	f3 06       	cpc	r15, r19
    1488:	18 f0       	brcs	.+6      	; 0x1490 <__mulsf3+0xe8>
    148a:	40 e0       	ldi	r20, 0x00	; 0
    148c:	50 e0       	ldi	r21, 0x00	; 0
    148e:	ba 01       	movw	r22, r20
    1490:	48 0f       	add	r20, r24
    1492:	59 1f       	adc	r21, r25
    1494:	6a 1f       	adc	r22, r26
    1496:	7b 1f       	adc	r23, r27
    1498:	88 0c       	add	r8, r8
    149a:	99 1c       	adc	r9, r9
    149c:	aa 1c       	adc	r10, r10
    149e:	bb 1c       	adc	r11, r11
    14a0:	37 ff       	sbrs	r19, 7
    14a2:	08 c0       	rjmp	.+16     	; 0x14b4 <__mulsf3+0x10c>
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	a0 e0       	ldi	r26, 0x00	; 0
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	88 2a       	or	r8, r24
    14ae:	99 2a       	or	r9, r25
    14b0:	aa 2a       	or	r10, r26
    14b2:	bb 2a       	or	r11, r27
    14b4:	00 0f       	add	r16, r16
    14b6:	11 1f       	adc	r17, r17
    14b8:	22 1f       	adc	r18, r18
    14ba:	33 1f       	adc	r19, r19
    14bc:	76 94       	lsr	r7
    14be:	67 94       	ror	r6
    14c0:	57 94       	ror	r5
    14c2:	47 94       	ror	r4
    14c4:	31 97       	sbiw	r30, 0x01	; 1
    14c6:	49 f6       	brne	.-110    	; 0x145a <__mulsf3+0xb2>
    14c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14cc:	2b 89       	ldd	r18, Y+19	; 0x13
    14ce:	3c 89       	ldd	r19, Y+20	; 0x14
    14d0:	82 0f       	add	r24, r18
    14d2:	93 1f       	adc	r25, r19
    14d4:	02 96       	adiw	r24, 0x02	; 2
    14d6:	9c 87       	std	Y+12, r25	; 0x0c
    14d8:	8b 87       	std	Y+11, r24	; 0x0b
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	2a 8d       	ldd	r18, Y+26	; 0x1a
    14de:	9a 89       	ldd	r25, Y+18	; 0x12
    14e0:	29 17       	cp	r18, r25
    14e2:	09 f4       	brne	.+2      	; 0x14e6 <__mulsf3+0x13e>
    14e4:	80 e0       	ldi	r24, 0x00	; 0
    14e6:	8a 87       	std	Y+10, r24	; 0x0a
    14e8:	2b 85       	ldd	r18, Y+11	; 0x0b
    14ea:	3c 85       	ldd	r19, Y+12	; 0x0c
    14ec:	17 c0       	rjmp	.+46     	; 0x151c <__mulsf3+0x174>
    14ee:	ca 01       	movw	r24, r20
    14f0:	81 70       	andi	r24, 0x01	; 1
    14f2:	90 70       	andi	r25, 0x00	; 0
    14f4:	00 97       	sbiw	r24, 0x00	; 0
    14f6:	61 f0       	breq	.+24     	; 0x1510 <__mulsf3+0x168>
    14f8:	f6 94       	lsr	r15
    14fa:	e7 94       	ror	r14
    14fc:	d7 94       	ror	r13
    14fe:	c7 94       	ror	r12
    1500:	80 e0       	ldi	r24, 0x00	; 0
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	a0 e0       	ldi	r26, 0x00	; 0
    1506:	b0 e8       	ldi	r27, 0x80	; 128
    1508:	c8 2a       	or	r12, r24
    150a:	d9 2a       	or	r13, r25
    150c:	ea 2a       	or	r14, r26
    150e:	fb 2a       	or	r15, r27
    1510:	76 95       	lsr	r23
    1512:	67 95       	ror	r22
    1514:	57 95       	ror	r21
    1516:	47 95       	ror	r20
    1518:	2f 5f       	subi	r18, 0xFF	; 255
    151a:	3f 4f       	sbci	r19, 0xFF	; 255
    151c:	77 fd       	sbrc	r23, 7
    151e:	e7 cf       	rjmp	.-50     	; 0x14ee <__mulsf3+0x146>
    1520:	c9 01       	movw	r24, r18
    1522:	0b c0       	rjmp	.+22     	; 0x153a <__mulsf3+0x192>
    1524:	44 0f       	add	r20, r20
    1526:	55 1f       	adc	r21, r21
    1528:	66 1f       	adc	r22, r22
    152a:	77 1f       	adc	r23, r23
    152c:	f7 fc       	sbrc	r15, 7
    152e:	41 60       	ori	r20, 0x01	; 1
    1530:	cc 0c       	add	r12, r12
    1532:	dd 1c       	adc	r13, r13
    1534:	ee 1c       	adc	r14, r14
    1536:	ff 1c       	adc	r15, r15
    1538:	01 97       	sbiw	r24, 0x01	; 1
    153a:	40 30       	cpi	r20, 0x00	; 0
    153c:	a0 e0       	ldi	r26, 0x00	; 0
    153e:	5a 07       	cpc	r21, r26
    1540:	a0 e0       	ldi	r26, 0x00	; 0
    1542:	6a 07       	cpc	r22, r26
    1544:	a0 e4       	ldi	r26, 0x40	; 64
    1546:	7a 07       	cpc	r23, r26
    1548:	68 f3       	brcs	.-38     	; 0x1524 <__mulsf3+0x17c>
    154a:	8b 87       	std	Y+11, r24	; 0x0b
    154c:	9c 87       	std	Y+12, r25	; 0x0c
    154e:	db 01       	movw	r26, r22
    1550:	ca 01       	movw	r24, r20
    1552:	8f 77       	andi	r24, 0x7F	; 127
    1554:	90 70       	andi	r25, 0x00	; 0
    1556:	a0 70       	andi	r26, 0x00	; 0
    1558:	b0 70       	andi	r27, 0x00	; 0
    155a:	80 34       	cpi	r24, 0x40	; 64
    155c:	91 05       	cpc	r25, r1
    155e:	a1 05       	cpc	r26, r1
    1560:	b1 05       	cpc	r27, r1
    1562:	61 f4       	brne	.+24     	; 0x157c <__mulsf3+0x1d4>
    1564:	47 fd       	sbrc	r20, 7
    1566:	0a c0       	rjmp	.+20     	; 0x157c <__mulsf3+0x1d4>
    1568:	c1 14       	cp	r12, r1
    156a:	d1 04       	cpc	r13, r1
    156c:	e1 04       	cpc	r14, r1
    156e:	f1 04       	cpc	r15, r1
    1570:	29 f0       	breq	.+10     	; 0x157c <__mulsf3+0x1d4>
    1572:	40 5c       	subi	r20, 0xC0	; 192
    1574:	5f 4f       	sbci	r21, 0xFF	; 255
    1576:	6f 4f       	sbci	r22, 0xFF	; 255
    1578:	7f 4f       	sbci	r23, 0xFF	; 255
    157a:	40 78       	andi	r20, 0x80	; 128
    157c:	4d 87       	std	Y+13, r20	; 0x0d
    157e:	5e 87       	std	Y+14, r21	; 0x0e
    1580:	6f 87       	std	Y+15, r22	; 0x0f
    1582:	78 8b       	std	Y+16, r23	; 0x10
    1584:	83 e0       	ldi	r24, 0x03	; 3
    1586:	89 87       	std	Y+9, r24	; 0x09
    1588:	ce 01       	movw	r24, r28
    158a:	09 96       	adiw	r24, 0x09	; 9
    158c:	02 c0       	rjmp	.+4      	; 0x1592 <__mulsf3+0x1ea>
    158e:	89 e7       	ldi	r24, 0x79	; 121
    1590:	93 e0       	ldi	r25, 0x03	; 3
    1592:	0e 94 9e 0c 	call	0x193c	; 0x193c <__pack_f>
    1596:	46 2f       	mov	r20, r22
    1598:	57 2f       	mov	r21, r23
    159a:	68 2f       	mov	r22, r24
    159c:	79 2f       	mov	r23, r25
    159e:	cb 01       	movw	r24, r22
    15a0:	ba 01       	movw	r22, r20
    15a2:	a0 96       	adiw	r28, 0x20	; 32
    15a4:	e0 e1       	ldi	r30, 0x10	; 16
    15a6:	0c 94 b0 0e 	jmp	0x1d60	; 0x1d60 <__epilogue_restores__+0x4>

000015aa <__gesf2>:
    15aa:	a8 e1       	ldi	r26, 0x18	; 24
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	eb ed       	ldi	r30, 0xDB	; 219
    15b0:	fa e0       	ldi	r31, 0x0A	; 10
    15b2:	0c 94 a2 0e 	jmp	0x1d44	; 0x1d44 <__prologue_saves__+0x20>
    15b6:	dc 01       	movw	r26, r24
    15b8:	cb 01       	movw	r24, r22
    15ba:	8d 83       	std	Y+5, r24	; 0x05
    15bc:	9e 83       	std	Y+6, r25	; 0x06
    15be:	af 83       	std	Y+7, r26	; 0x07
    15c0:	b8 87       	std	Y+8, r27	; 0x08
    15c2:	29 83       	std	Y+1, r18	; 0x01
    15c4:	3a 83       	std	Y+2, r19	; 0x02
    15c6:	4b 83       	std	Y+3, r20	; 0x03
    15c8:	5c 83       	std	Y+4, r21	; 0x04
    15ca:	ce 01       	movw	r24, r28
    15cc:	05 96       	adiw	r24, 0x05	; 5
    15ce:	be 01       	movw	r22, r28
    15d0:	6f 5e       	subi	r22, 0xEF	; 239
    15d2:	7f 4f       	sbci	r23, 0xFF	; 255
    15d4:	0e 94 75 0d 	call	0x1aea	; 0x1aea <__unpack_f>
    15d8:	ce 01       	movw	r24, r28
    15da:	01 96       	adiw	r24, 0x01	; 1
    15dc:	be 01       	movw	r22, r28
    15de:	67 5f       	subi	r22, 0xF7	; 247
    15e0:	7f 4f       	sbci	r23, 0xFF	; 255
    15e2:	0e 94 75 0d 	call	0x1aea	; 0x1aea <__unpack_f>
    15e6:	89 89       	ldd	r24, Y+17	; 0x11
    15e8:	82 30       	cpi	r24, 0x02	; 2
    15ea:	58 f0       	brcs	.+22     	; 0x1602 <__gesf2+0x58>
    15ec:	89 85       	ldd	r24, Y+9	; 0x09
    15ee:	82 30       	cpi	r24, 0x02	; 2
    15f0:	40 f0       	brcs	.+16     	; 0x1602 <__gesf2+0x58>
    15f2:	ce 01       	movw	r24, r28
    15f4:	41 96       	adiw	r24, 0x11	; 17
    15f6:	be 01       	movw	r22, r28
    15f8:	67 5f       	subi	r22, 0xF7	; 247
    15fa:	7f 4f       	sbci	r23, 0xFF	; 255
    15fc:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <__fpcmp_parts_f>
    1600:	01 c0       	rjmp	.+2      	; 0x1604 <__gesf2+0x5a>
    1602:	8f ef       	ldi	r24, 0xFF	; 255
    1604:	68 96       	adiw	r28, 0x18	; 24
    1606:	e2 e0       	ldi	r30, 0x02	; 2
    1608:	0c 94 be 0e 	jmp	0x1d7c	; 0x1d7c <__epilogue_restores__+0x20>

0000160c <__floatsisf>:
    160c:	cf 92       	push	r12
    160e:	df 92       	push	r13
    1610:	ef 92       	push	r14
    1612:	ff 92       	push	r15
    1614:	cf 93       	push	r28
    1616:	df 93       	push	r29
    1618:	cd b7       	in	r28, 0x3d	; 61
    161a:	de b7       	in	r29, 0x3e	; 62
    161c:	28 97       	sbiw	r28, 0x08	; 8
    161e:	0f b6       	in	r0, 0x3f	; 63
    1620:	f8 94       	cli
    1622:	de bf       	out	0x3e, r29	; 62
    1624:	0f be       	out	0x3f, r0	; 63
    1626:	cd bf       	out	0x3d, r28	; 61
    1628:	6b 01       	movw	r12, r22
    162a:	7c 01       	movw	r14, r24
    162c:	83 e0       	ldi	r24, 0x03	; 3
    162e:	89 83       	std	Y+1, r24	; 0x01
    1630:	d7 01       	movw	r26, r14
    1632:	c6 01       	movw	r24, r12
    1634:	88 27       	eor	r24, r24
    1636:	b7 fd       	sbrc	r27, 7
    1638:	83 95       	inc	r24
    163a:	99 27       	eor	r25, r25
    163c:	aa 27       	eor	r26, r26
    163e:	bb 27       	eor	r27, r27
    1640:	28 2f       	mov	r18, r24
    1642:	8a 83       	std	Y+2, r24	; 0x02
    1644:	c1 14       	cp	r12, r1
    1646:	d1 04       	cpc	r13, r1
    1648:	e1 04       	cpc	r14, r1
    164a:	f1 04       	cpc	r15, r1
    164c:	19 f4       	brne	.+6      	; 0x1654 <__floatsisf+0x48>
    164e:	82 e0       	ldi	r24, 0x02	; 2
    1650:	89 83       	std	Y+1, r24	; 0x01
    1652:	35 c0       	rjmp	.+106    	; 0x16be <__floatsisf+0xb2>
    1654:	8e e1       	ldi	r24, 0x1E	; 30
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	9c 83       	std	Y+4, r25	; 0x04
    165a:	8b 83       	std	Y+3, r24	; 0x03
    165c:	22 23       	and	r18, r18
    165e:	89 f0       	breq	.+34     	; 0x1682 <__floatsisf+0x76>
    1660:	80 e0       	ldi	r24, 0x00	; 0
    1662:	c8 16       	cp	r12, r24
    1664:	80 e0       	ldi	r24, 0x00	; 0
    1666:	d8 06       	cpc	r13, r24
    1668:	80 e0       	ldi	r24, 0x00	; 0
    166a:	e8 06       	cpc	r14, r24
    166c:	80 e8       	ldi	r24, 0x80	; 128
    166e:	f8 06       	cpc	r15, r24
    1670:	59 f1       	breq	.+86     	; 0x16c8 <__floatsisf+0xbc>
    1672:	f0 94       	com	r15
    1674:	e0 94       	com	r14
    1676:	d0 94       	com	r13
    1678:	c0 94       	com	r12
    167a:	c1 1c       	adc	r12, r1
    167c:	d1 1c       	adc	r13, r1
    167e:	e1 1c       	adc	r14, r1
    1680:	f1 1c       	adc	r15, r1
    1682:	cd 82       	std	Y+5, r12	; 0x05
    1684:	de 82       	std	Y+6, r13	; 0x06
    1686:	ef 82       	std	Y+7, r14	; 0x07
    1688:	f8 86       	std	Y+8, r15	; 0x08
    168a:	c7 01       	movw	r24, r14
    168c:	b6 01       	movw	r22, r12
    168e:	0e 94 4b 0c 	call	0x1896	; 0x1896 <__clzsi2>
    1692:	01 97       	sbiw	r24, 0x01	; 1
    1694:	18 16       	cp	r1, r24
    1696:	19 06       	cpc	r1, r25
    1698:	94 f4       	brge	.+36     	; 0x16be <__floatsisf+0xb2>
    169a:	08 2e       	mov	r0, r24
    169c:	04 c0       	rjmp	.+8      	; 0x16a6 <__floatsisf+0x9a>
    169e:	cc 0c       	add	r12, r12
    16a0:	dd 1c       	adc	r13, r13
    16a2:	ee 1c       	adc	r14, r14
    16a4:	ff 1c       	adc	r15, r15
    16a6:	0a 94       	dec	r0
    16a8:	d2 f7       	brpl	.-12     	; 0x169e <__floatsisf+0x92>
    16aa:	cd 82       	std	Y+5, r12	; 0x05
    16ac:	de 82       	std	Y+6, r13	; 0x06
    16ae:	ef 82       	std	Y+7, r14	; 0x07
    16b0:	f8 86       	std	Y+8, r15	; 0x08
    16b2:	2e e1       	ldi	r18, 0x1E	; 30
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	28 1b       	sub	r18, r24
    16b8:	39 0b       	sbc	r19, r25
    16ba:	3c 83       	std	Y+4, r19	; 0x04
    16bc:	2b 83       	std	Y+3, r18	; 0x03
    16be:	ce 01       	movw	r24, r28
    16c0:	01 96       	adiw	r24, 0x01	; 1
    16c2:	0e 94 9e 0c 	call	0x193c	; 0x193c <__pack_f>
    16c6:	04 c0       	rjmp	.+8      	; 0x16d0 <__floatsisf+0xc4>
    16c8:	60 e0       	ldi	r22, 0x00	; 0
    16ca:	70 e0       	ldi	r23, 0x00	; 0
    16cc:	80 e0       	ldi	r24, 0x00	; 0
    16ce:	9f ec       	ldi	r25, 0xCF	; 207
    16d0:	38 2f       	mov	r19, r24
    16d2:	29 2f       	mov	r18, r25
    16d4:	86 2f       	mov	r24, r22
    16d6:	97 2f       	mov	r25, r23
    16d8:	a3 2f       	mov	r26, r19
    16da:	b2 2f       	mov	r27, r18
    16dc:	bc 01       	movw	r22, r24
    16de:	cd 01       	movw	r24, r26
    16e0:	28 96       	adiw	r28, 0x08	; 8
    16e2:	0f b6       	in	r0, 0x3f	; 63
    16e4:	f8 94       	cli
    16e6:	de bf       	out	0x3e, r29	; 62
    16e8:	0f be       	out	0x3f, r0	; 63
    16ea:	cd bf       	out	0x3d, r28	; 61
    16ec:	df 91       	pop	r29
    16ee:	cf 91       	pop	r28
    16f0:	ff 90       	pop	r15
    16f2:	ef 90       	pop	r14
    16f4:	df 90       	pop	r13
    16f6:	cf 90       	pop	r12
    16f8:	08 95       	ret

000016fa <__fixsfsi>:
    16fa:	ac e0       	ldi	r26, 0x0C	; 12
    16fc:	b0 e0       	ldi	r27, 0x00	; 0
    16fe:	e3 e8       	ldi	r30, 0x83	; 131
    1700:	fb e0       	ldi	r31, 0x0B	; 11
    1702:	0c 94 a0 0e 	jmp	0x1d40	; 0x1d40 <__prologue_saves__+0x1c>
    1706:	dc 01       	movw	r26, r24
    1708:	cb 01       	movw	r24, r22
    170a:	89 83       	std	Y+1, r24	; 0x01
    170c:	9a 83       	std	Y+2, r25	; 0x02
    170e:	ab 83       	std	Y+3, r26	; 0x03
    1710:	bc 83       	std	Y+4, r27	; 0x04
    1712:	ce 01       	movw	r24, r28
    1714:	01 96       	adiw	r24, 0x01	; 1
    1716:	be 01       	movw	r22, r28
    1718:	6b 5f       	subi	r22, 0xFB	; 251
    171a:	7f 4f       	sbci	r23, 0xFF	; 255
    171c:	0e 94 75 0d 	call	0x1aea	; 0x1aea <__unpack_f>
    1720:	8d 81       	ldd	r24, Y+5	; 0x05
    1722:	82 30       	cpi	r24, 0x02	; 2
    1724:	69 f1       	breq	.+90     	; 0x1780 <__fixsfsi+0x86>
    1726:	82 30       	cpi	r24, 0x02	; 2
    1728:	58 f1       	brcs	.+86     	; 0x1780 <__fixsfsi+0x86>
    172a:	84 30       	cpi	r24, 0x04	; 4
    172c:	39 f0       	breq	.+14     	; 0x173c <__fixsfsi+0x42>
    172e:	2f 81       	ldd	r18, Y+7	; 0x07
    1730:	38 85       	ldd	r19, Y+8	; 0x08
    1732:	37 fd       	sbrc	r19, 7
    1734:	25 c0       	rjmp	.+74     	; 0x1780 <__fixsfsi+0x86>
    1736:	2f 31       	cpi	r18, 0x1F	; 31
    1738:	31 05       	cpc	r19, r1
    173a:	44 f0       	brlt	.+16     	; 0x174c <__fixsfsi+0x52>
    173c:	8e 81       	ldd	r24, Y+6	; 0x06
    173e:	88 23       	and	r24, r24
    1740:	19 f1       	breq	.+70     	; 0x1788 <__fixsfsi+0x8e>
    1742:	00 e0       	ldi	r16, 0x00	; 0
    1744:	10 e0       	ldi	r17, 0x00	; 0
    1746:	20 e0       	ldi	r18, 0x00	; 0
    1748:	30 e8       	ldi	r19, 0x80	; 128
    174a:	22 c0       	rjmp	.+68     	; 0x1790 <__fixsfsi+0x96>
    174c:	8e e1       	ldi	r24, 0x1E	; 30
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	82 1b       	sub	r24, r18
    1752:	93 0b       	sbc	r25, r19
    1754:	09 85       	ldd	r16, Y+9	; 0x09
    1756:	1a 85       	ldd	r17, Y+10	; 0x0a
    1758:	2b 85       	ldd	r18, Y+11	; 0x0b
    175a:	3c 85       	ldd	r19, Y+12	; 0x0c
    175c:	04 c0       	rjmp	.+8      	; 0x1766 <__fixsfsi+0x6c>
    175e:	36 95       	lsr	r19
    1760:	27 95       	ror	r18
    1762:	17 95       	ror	r17
    1764:	07 95       	ror	r16
    1766:	8a 95       	dec	r24
    1768:	d2 f7       	brpl	.-12     	; 0x175e <__fixsfsi+0x64>
    176a:	8e 81       	ldd	r24, Y+6	; 0x06
    176c:	88 23       	and	r24, r24
    176e:	81 f0       	breq	.+32     	; 0x1790 <__fixsfsi+0x96>
    1770:	30 95       	com	r19
    1772:	20 95       	com	r18
    1774:	10 95       	com	r17
    1776:	01 95       	neg	r16
    1778:	1f 4f       	sbci	r17, 0xFF	; 255
    177a:	2f 4f       	sbci	r18, 0xFF	; 255
    177c:	3f 4f       	sbci	r19, 0xFF	; 255
    177e:	08 c0       	rjmp	.+16     	; 0x1790 <__fixsfsi+0x96>
    1780:	00 e0       	ldi	r16, 0x00	; 0
    1782:	10 e0       	ldi	r17, 0x00	; 0
    1784:	98 01       	movw	r18, r16
    1786:	04 c0       	rjmp	.+8      	; 0x1790 <__fixsfsi+0x96>
    1788:	0f ef       	ldi	r16, 0xFF	; 255
    178a:	1f ef       	ldi	r17, 0xFF	; 255
    178c:	2f ef       	ldi	r18, 0xFF	; 255
    178e:	3f e7       	ldi	r19, 0x7F	; 127
    1790:	b8 01       	movw	r22, r16
    1792:	c9 01       	movw	r24, r18
    1794:	2c 96       	adiw	r28, 0x0c	; 12
    1796:	e4 e0       	ldi	r30, 0x04	; 4
    1798:	0c 94 bc 0e 	jmp	0x1d78	; 0x1d78 <__epilogue_restores__+0x1c>

0000179c <__floatunsisf>:
    179c:	a8 e0       	ldi	r26, 0x08	; 8
    179e:	b0 e0       	ldi	r27, 0x00	; 0
    17a0:	e4 ed       	ldi	r30, 0xD4	; 212
    17a2:	fb e0       	ldi	r31, 0x0B	; 11
    17a4:	0c 94 9c 0e 	jmp	0x1d38	; 0x1d38 <__prologue_saves__+0x14>
    17a8:	6b 01       	movw	r12, r22
    17aa:	7c 01       	movw	r14, r24
    17ac:	1a 82       	std	Y+2, r1	; 0x02
    17ae:	61 15       	cp	r22, r1
    17b0:	71 05       	cpc	r23, r1
    17b2:	81 05       	cpc	r24, r1
    17b4:	91 05       	cpc	r25, r1
    17b6:	19 f4       	brne	.+6      	; 0x17be <__floatunsisf+0x22>
    17b8:	82 e0       	ldi	r24, 0x02	; 2
    17ba:	89 83       	std	Y+1, r24	; 0x01
    17bc:	5e c0       	rjmp	.+188    	; 0x187a <__floatunsisf+0xde>
    17be:	83 e0       	ldi	r24, 0x03	; 3
    17c0:	89 83       	std	Y+1, r24	; 0x01
    17c2:	0e e1       	ldi	r16, 0x1E	; 30
    17c4:	10 e0       	ldi	r17, 0x00	; 0
    17c6:	1c 83       	std	Y+4, r17	; 0x04
    17c8:	0b 83       	std	Y+3, r16	; 0x03
    17ca:	cd 82       	std	Y+5, r12	; 0x05
    17cc:	de 82       	std	Y+6, r13	; 0x06
    17ce:	ef 82       	std	Y+7, r14	; 0x07
    17d0:	f8 86       	std	Y+8, r15	; 0x08
    17d2:	c7 01       	movw	r24, r14
    17d4:	b6 01       	movw	r22, r12
    17d6:	0e 94 4b 0c 	call	0x1896	; 0x1896 <__clzsi2>
    17da:	9c 01       	movw	r18, r24
    17dc:	21 50       	subi	r18, 0x01	; 1
    17de:	30 40       	sbci	r19, 0x00	; 0
    17e0:	37 ff       	sbrs	r19, 7
    17e2:	38 c0       	rjmp	.+112    	; 0x1854 <__floatunsisf+0xb8>
    17e4:	ee 27       	eor	r30, r30
    17e6:	ff 27       	eor	r31, r31
    17e8:	e2 1b       	sub	r30, r18
    17ea:	f3 0b       	sbc	r31, r19
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	a0 e0       	ldi	r26, 0x00	; 0
    17f2:	b0 e0       	ldi	r27, 0x00	; 0
    17f4:	0e 2e       	mov	r0, r30
    17f6:	04 c0       	rjmp	.+8      	; 0x1800 <__floatunsisf+0x64>
    17f8:	88 0f       	add	r24, r24
    17fa:	99 1f       	adc	r25, r25
    17fc:	aa 1f       	adc	r26, r26
    17fe:	bb 1f       	adc	r27, r27
    1800:	0a 94       	dec	r0
    1802:	d2 f7       	brpl	.-12     	; 0x17f8 <__floatunsisf+0x5c>
    1804:	01 97       	sbiw	r24, 0x01	; 1
    1806:	a1 09       	sbc	r26, r1
    1808:	b1 09       	sbc	r27, r1
    180a:	8c 21       	and	r24, r12
    180c:	9d 21       	and	r25, r13
    180e:	ae 21       	and	r26, r14
    1810:	bf 21       	and	r27, r15
    1812:	41 e0       	ldi	r20, 0x01	; 1
    1814:	50 e0       	ldi	r21, 0x00	; 0
    1816:	60 e0       	ldi	r22, 0x00	; 0
    1818:	70 e0       	ldi	r23, 0x00	; 0
    181a:	00 97       	sbiw	r24, 0x00	; 0
    181c:	a1 05       	cpc	r26, r1
    181e:	b1 05       	cpc	r27, r1
    1820:	19 f4       	brne	.+6      	; 0x1828 <__floatunsisf+0x8c>
    1822:	40 e0       	ldi	r20, 0x00	; 0
    1824:	50 e0       	ldi	r21, 0x00	; 0
    1826:	ba 01       	movw	r22, r20
    1828:	04 c0       	rjmp	.+8      	; 0x1832 <__floatunsisf+0x96>
    182a:	f6 94       	lsr	r15
    182c:	e7 94       	ror	r14
    182e:	d7 94       	ror	r13
    1830:	c7 94       	ror	r12
    1832:	ea 95       	dec	r30
    1834:	d2 f7       	brpl	.-12     	; 0x182a <__floatunsisf+0x8e>
    1836:	c4 2a       	or	r12, r20
    1838:	d5 2a       	or	r13, r21
    183a:	e6 2a       	or	r14, r22
    183c:	f7 2a       	or	r15, r23
    183e:	cd 82       	std	Y+5, r12	; 0x05
    1840:	de 82       	std	Y+6, r13	; 0x06
    1842:	ef 82       	std	Y+7, r14	; 0x07
    1844:	f8 86       	std	Y+8, r15	; 0x08
    1846:	8e e1       	ldi	r24, 0x1E	; 30
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	82 1b       	sub	r24, r18
    184c:	93 0b       	sbc	r25, r19
    184e:	9c 83       	std	Y+4, r25	; 0x04
    1850:	8b 83       	std	Y+3, r24	; 0x03
    1852:	13 c0       	rjmp	.+38     	; 0x187a <__floatunsisf+0xde>
    1854:	21 15       	cp	r18, r1
    1856:	31 05       	cpc	r19, r1
    1858:	81 f0       	breq	.+32     	; 0x187a <__floatunsisf+0xde>
    185a:	02 2e       	mov	r0, r18
    185c:	04 c0       	rjmp	.+8      	; 0x1866 <__floatunsisf+0xca>
    185e:	cc 0c       	add	r12, r12
    1860:	dd 1c       	adc	r13, r13
    1862:	ee 1c       	adc	r14, r14
    1864:	ff 1c       	adc	r15, r15
    1866:	0a 94       	dec	r0
    1868:	d2 f7       	brpl	.-12     	; 0x185e <__floatunsisf+0xc2>
    186a:	cd 82       	std	Y+5, r12	; 0x05
    186c:	de 82       	std	Y+6, r13	; 0x06
    186e:	ef 82       	std	Y+7, r14	; 0x07
    1870:	f8 86       	std	Y+8, r15	; 0x08
    1872:	02 1b       	sub	r16, r18
    1874:	13 0b       	sbc	r17, r19
    1876:	1c 83       	std	Y+4, r17	; 0x04
    1878:	0b 83       	std	Y+3, r16	; 0x03
    187a:	ce 01       	movw	r24, r28
    187c:	01 96       	adiw	r24, 0x01	; 1
    187e:	0e 94 9e 0c 	call	0x193c	; 0x193c <__pack_f>
    1882:	46 2f       	mov	r20, r22
    1884:	57 2f       	mov	r21, r23
    1886:	68 2f       	mov	r22, r24
    1888:	79 2f       	mov	r23, r25
    188a:	cb 01       	movw	r24, r22
    188c:	ba 01       	movw	r22, r20
    188e:	28 96       	adiw	r28, 0x08	; 8
    1890:	e8 e0       	ldi	r30, 0x08	; 8
    1892:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__epilogue_restores__+0x14>

00001896 <__clzsi2>:
    1896:	cf 92       	push	r12
    1898:	df 92       	push	r13
    189a:	ef 92       	push	r14
    189c:	ff 92       	push	r15
    189e:	0f 93       	push	r16
    18a0:	1f 93       	push	r17
    18a2:	8b 01       	movw	r16, r22
    18a4:	9c 01       	movw	r18, r24
    18a6:	00 30       	cpi	r16, 0x00	; 0
    18a8:	80 e0       	ldi	r24, 0x00	; 0
    18aa:	18 07       	cpc	r17, r24
    18ac:	81 e0       	ldi	r24, 0x01	; 1
    18ae:	28 07       	cpc	r18, r24
    18b0:	80 e0       	ldi	r24, 0x00	; 0
    18b2:	38 07       	cpc	r19, r24
    18b4:	50 f4       	brcc	.+20     	; 0x18ca <__clzsi2+0x34>
    18b6:	0f 3f       	cpi	r16, 0xFF	; 255
    18b8:	11 05       	cpc	r17, r1
    18ba:	21 05       	cpc	r18, r1
    18bc:	31 05       	cpc	r19, r1
    18be:	09 f0       	breq	.+2      	; 0x18c2 <__clzsi2+0x2c>
    18c0:	88 f4       	brcc	.+34     	; 0x18e4 <__clzsi2+0x4e>
    18c2:	80 e0       	ldi	r24, 0x00	; 0
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	dc 01       	movw	r26, r24
    18c8:	16 c0       	rjmp	.+44     	; 0x18f6 <__clzsi2+0x60>
    18ca:	00 30       	cpi	r16, 0x00	; 0
    18cc:	e0 e0       	ldi	r30, 0x00	; 0
    18ce:	1e 07       	cpc	r17, r30
    18d0:	e0 e0       	ldi	r30, 0x00	; 0
    18d2:	2e 07       	cpc	r18, r30
    18d4:	e1 e0       	ldi	r30, 0x01	; 1
    18d6:	3e 07       	cpc	r19, r30
    18d8:	50 f4       	brcc	.+20     	; 0x18ee <__clzsi2+0x58>
    18da:	80 e1       	ldi	r24, 0x10	; 16
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	a0 e0       	ldi	r26, 0x00	; 0
    18e0:	b0 e0       	ldi	r27, 0x00	; 0
    18e2:	09 c0       	rjmp	.+18     	; 0x18f6 <__clzsi2+0x60>
    18e4:	88 e0       	ldi	r24, 0x08	; 8
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	a0 e0       	ldi	r26, 0x00	; 0
    18ea:	b0 e0       	ldi	r27, 0x00	; 0
    18ec:	04 c0       	rjmp	.+8      	; 0x18f6 <__clzsi2+0x60>
    18ee:	88 e1       	ldi	r24, 0x18	; 24
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	a0 e0       	ldi	r26, 0x00	; 0
    18f4:	b0 e0       	ldi	r27, 0x00	; 0
    18f6:	40 e2       	ldi	r20, 0x20	; 32
    18f8:	50 e0       	ldi	r21, 0x00	; 0
    18fa:	60 e0       	ldi	r22, 0x00	; 0
    18fc:	70 e0       	ldi	r23, 0x00	; 0
    18fe:	48 1b       	sub	r20, r24
    1900:	59 0b       	sbc	r21, r25
    1902:	6a 0b       	sbc	r22, r26
    1904:	7b 0b       	sbc	r23, r27
    1906:	68 01       	movw	r12, r16
    1908:	79 01       	movw	r14, r18
    190a:	04 c0       	rjmp	.+8      	; 0x1914 <__clzsi2+0x7e>
    190c:	f6 94       	lsr	r15
    190e:	e7 94       	ror	r14
    1910:	d7 94       	ror	r13
    1912:	c7 94       	ror	r12
    1914:	8a 95       	dec	r24
    1916:	d2 f7       	brpl	.-12     	; 0x190c <__clzsi2+0x76>
    1918:	d7 01       	movw	r26, r14
    191a:	c6 01       	movw	r24, r12
    191c:	8f 57       	subi	r24, 0x7F	; 127
    191e:	9c 4f       	sbci	r25, 0xFC	; 252
    1920:	fc 01       	movw	r30, r24
    1922:	80 81       	ld	r24, Z
    1924:	48 1b       	sub	r20, r24
    1926:	51 09       	sbc	r21, r1
    1928:	61 09       	sbc	r22, r1
    192a:	71 09       	sbc	r23, r1
    192c:	ca 01       	movw	r24, r20
    192e:	1f 91       	pop	r17
    1930:	0f 91       	pop	r16
    1932:	ff 90       	pop	r15
    1934:	ef 90       	pop	r14
    1936:	df 90       	pop	r13
    1938:	cf 90       	pop	r12
    193a:	08 95       	ret

0000193c <__pack_f>:
    193c:	cf 92       	push	r12
    193e:	df 92       	push	r13
    1940:	ef 92       	push	r14
    1942:	ff 92       	push	r15
    1944:	0f 93       	push	r16
    1946:	1f 93       	push	r17
    1948:	dc 01       	movw	r26, r24
    194a:	14 96       	adiw	r26, 0x04	; 4
    194c:	4d 91       	ld	r20, X+
    194e:	5d 91       	ld	r21, X+
    1950:	6d 91       	ld	r22, X+
    1952:	7c 91       	ld	r23, X
    1954:	17 97       	sbiw	r26, 0x07	; 7
    1956:	11 96       	adiw	r26, 0x01	; 1
    1958:	ec 91       	ld	r30, X
    195a:	11 97       	sbiw	r26, 0x01	; 1
    195c:	8c 91       	ld	r24, X
    195e:	82 30       	cpi	r24, 0x02	; 2
    1960:	20 f4       	brcc	.+8      	; 0x196a <__pack_f+0x2e>
    1962:	60 61       	ori	r22, 0x10	; 16
    1964:	8f ef       	ldi	r24, 0xFF	; 255
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	a5 c0       	rjmp	.+330    	; 0x1ab4 <__pack_f+0x178>
    196a:	84 30       	cpi	r24, 0x04	; 4
    196c:	09 f4       	brne	.+2      	; 0x1970 <__pack_f+0x34>
    196e:	9d c0       	rjmp	.+314    	; 0x1aaa <__pack_f+0x16e>
    1970:	82 30       	cpi	r24, 0x02	; 2
    1972:	09 f4       	brne	.+2      	; 0x1976 <__pack_f+0x3a>
    1974:	94 c0       	rjmp	.+296    	; 0x1a9e <__pack_f+0x162>
    1976:	41 15       	cp	r20, r1
    1978:	51 05       	cpc	r21, r1
    197a:	61 05       	cpc	r22, r1
    197c:	71 05       	cpc	r23, r1
    197e:	09 f4       	brne	.+2      	; 0x1982 <__pack_f+0x46>
    1980:	91 c0       	rjmp	.+290    	; 0x1aa4 <__pack_f+0x168>
    1982:	12 96       	adiw	r26, 0x02	; 2
    1984:	8d 91       	ld	r24, X+
    1986:	9c 91       	ld	r25, X
    1988:	13 97       	sbiw	r26, 0x03	; 3
    198a:	2f ef       	ldi	r18, 0xFF	; 255
    198c:	82 38       	cpi	r24, 0x82	; 130
    198e:	92 07       	cpc	r25, r18
    1990:	0c f0       	brlt	.+2      	; 0x1994 <__pack_f+0x58>
    1992:	59 c0       	rjmp	.+178    	; 0x1a46 <__pack_f+0x10a>
    1994:	22 e8       	ldi	r18, 0x82	; 130
    1996:	3f ef       	ldi	r19, 0xFF	; 255
    1998:	28 1b       	sub	r18, r24
    199a:	39 0b       	sbc	r19, r25
    199c:	2a 31       	cpi	r18, 0x1A	; 26
    199e:	31 05       	cpc	r19, r1
    19a0:	64 f5       	brge	.+88     	; 0x19fa <__pack_f+0xbe>
    19a2:	6a 01       	movw	r12, r20
    19a4:	7b 01       	movw	r14, r22
    19a6:	02 2e       	mov	r0, r18
    19a8:	04 c0       	rjmp	.+8      	; 0x19b2 <__pack_f+0x76>
    19aa:	f6 94       	lsr	r15
    19ac:	e7 94       	ror	r14
    19ae:	d7 94       	ror	r13
    19b0:	c7 94       	ror	r12
    19b2:	0a 94       	dec	r0
    19b4:	d2 f7       	brpl	.-12     	; 0x19aa <__pack_f+0x6e>
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	a0 e0       	ldi	r26, 0x00	; 0
    19bc:	b0 e0       	ldi	r27, 0x00	; 0
    19be:	04 c0       	rjmp	.+8      	; 0x19c8 <__pack_f+0x8c>
    19c0:	88 0f       	add	r24, r24
    19c2:	99 1f       	adc	r25, r25
    19c4:	aa 1f       	adc	r26, r26
    19c6:	bb 1f       	adc	r27, r27
    19c8:	2a 95       	dec	r18
    19ca:	d2 f7       	brpl	.-12     	; 0x19c0 <__pack_f+0x84>
    19cc:	01 97       	sbiw	r24, 0x01	; 1
    19ce:	a1 09       	sbc	r26, r1
    19d0:	b1 09       	sbc	r27, r1
    19d2:	84 23       	and	r24, r20
    19d4:	95 23       	and	r25, r21
    19d6:	a6 23       	and	r26, r22
    19d8:	b7 23       	and	r27, r23
    19da:	41 e0       	ldi	r20, 0x01	; 1
    19dc:	50 e0       	ldi	r21, 0x00	; 0
    19de:	60 e0       	ldi	r22, 0x00	; 0
    19e0:	70 e0       	ldi	r23, 0x00	; 0
    19e2:	00 97       	sbiw	r24, 0x00	; 0
    19e4:	a1 05       	cpc	r26, r1
    19e6:	b1 05       	cpc	r27, r1
    19e8:	19 f4       	brne	.+6      	; 0x19f0 <__pack_f+0xb4>
    19ea:	40 e0       	ldi	r20, 0x00	; 0
    19ec:	50 e0       	ldi	r21, 0x00	; 0
    19ee:	ba 01       	movw	r22, r20
    19f0:	4c 29       	or	r20, r12
    19f2:	5d 29       	or	r21, r13
    19f4:	6e 29       	or	r22, r14
    19f6:	7f 29       	or	r23, r15
    19f8:	03 c0       	rjmp	.+6      	; 0x1a00 <__pack_f+0xc4>
    19fa:	40 e0       	ldi	r20, 0x00	; 0
    19fc:	50 e0       	ldi	r21, 0x00	; 0
    19fe:	ba 01       	movw	r22, r20
    1a00:	db 01       	movw	r26, r22
    1a02:	ca 01       	movw	r24, r20
    1a04:	8f 77       	andi	r24, 0x7F	; 127
    1a06:	90 70       	andi	r25, 0x00	; 0
    1a08:	a0 70       	andi	r26, 0x00	; 0
    1a0a:	b0 70       	andi	r27, 0x00	; 0
    1a0c:	80 34       	cpi	r24, 0x40	; 64
    1a0e:	91 05       	cpc	r25, r1
    1a10:	a1 05       	cpc	r26, r1
    1a12:	b1 05       	cpc	r27, r1
    1a14:	39 f4       	brne	.+14     	; 0x1a24 <__pack_f+0xe8>
    1a16:	47 ff       	sbrs	r20, 7
    1a18:	09 c0       	rjmp	.+18     	; 0x1a2c <__pack_f+0xf0>
    1a1a:	40 5c       	subi	r20, 0xC0	; 192
    1a1c:	5f 4f       	sbci	r21, 0xFF	; 255
    1a1e:	6f 4f       	sbci	r22, 0xFF	; 255
    1a20:	7f 4f       	sbci	r23, 0xFF	; 255
    1a22:	04 c0       	rjmp	.+8      	; 0x1a2c <__pack_f+0xf0>
    1a24:	41 5c       	subi	r20, 0xC1	; 193
    1a26:	5f 4f       	sbci	r21, 0xFF	; 255
    1a28:	6f 4f       	sbci	r22, 0xFF	; 255
    1a2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	40 30       	cpi	r20, 0x00	; 0
    1a32:	20 e0       	ldi	r18, 0x00	; 0
    1a34:	52 07       	cpc	r21, r18
    1a36:	20 e0       	ldi	r18, 0x00	; 0
    1a38:	62 07       	cpc	r22, r18
    1a3a:	20 e4       	ldi	r18, 0x40	; 64
    1a3c:	72 07       	cpc	r23, r18
    1a3e:	38 f5       	brcc	.+78     	; 0x1a8e <__pack_f+0x152>
    1a40:	80 e0       	ldi	r24, 0x00	; 0
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	24 c0       	rjmp	.+72     	; 0x1a8e <__pack_f+0x152>
    1a46:	80 38       	cpi	r24, 0x80	; 128
    1a48:	91 05       	cpc	r25, r1
    1a4a:	7c f5       	brge	.+94     	; 0x1aaa <__pack_f+0x16e>
    1a4c:	8a 01       	movw	r16, r20
    1a4e:	9b 01       	movw	r18, r22
    1a50:	0f 77       	andi	r16, 0x7F	; 127
    1a52:	10 70       	andi	r17, 0x00	; 0
    1a54:	20 70       	andi	r18, 0x00	; 0
    1a56:	30 70       	andi	r19, 0x00	; 0
    1a58:	00 34       	cpi	r16, 0x40	; 64
    1a5a:	11 05       	cpc	r17, r1
    1a5c:	21 05       	cpc	r18, r1
    1a5e:	31 05       	cpc	r19, r1
    1a60:	39 f4       	brne	.+14     	; 0x1a70 <__pack_f+0x134>
    1a62:	47 ff       	sbrs	r20, 7
    1a64:	09 c0       	rjmp	.+18     	; 0x1a78 <__pack_f+0x13c>
    1a66:	40 5c       	subi	r20, 0xC0	; 192
    1a68:	5f 4f       	sbci	r21, 0xFF	; 255
    1a6a:	6f 4f       	sbci	r22, 0xFF	; 255
    1a6c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a6e:	04 c0       	rjmp	.+8      	; 0x1a78 <__pack_f+0x13c>
    1a70:	41 5c       	subi	r20, 0xC1	; 193
    1a72:	5f 4f       	sbci	r21, 0xFF	; 255
    1a74:	6f 4f       	sbci	r22, 0xFF	; 255
    1a76:	7f 4f       	sbci	r23, 0xFF	; 255
    1a78:	77 fd       	sbrc	r23, 7
    1a7a:	03 c0       	rjmp	.+6      	; 0x1a82 <__pack_f+0x146>
    1a7c:	81 58       	subi	r24, 0x81	; 129
    1a7e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a80:	06 c0       	rjmp	.+12     	; 0x1a8e <__pack_f+0x152>
    1a82:	76 95       	lsr	r23
    1a84:	67 95       	ror	r22
    1a86:	57 95       	ror	r21
    1a88:	47 95       	ror	r20
    1a8a:	80 58       	subi	r24, 0x80	; 128
    1a8c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a8e:	97 e0       	ldi	r25, 0x07	; 7
    1a90:	76 95       	lsr	r23
    1a92:	67 95       	ror	r22
    1a94:	57 95       	ror	r21
    1a96:	47 95       	ror	r20
    1a98:	9a 95       	dec	r25
    1a9a:	d1 f7       	brne	.-12     	; 0x1a90 <__pack_f+0x154>
    1a9c:	0b c0       	rjmp	.+22     	; 0x1ab4 <__pack_f+0x178>
    1a9e:	80 e0       	ldi	r24, 0x00	; 0
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	05 c0       	rjmp	.+10     	; 0x1aae <__pack_f+0x172>
    1aa4:	80 e0       	ldi	r24, 0x00	; 0
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	05 c0       	rjmp	.+10     	; 0x1ab4 <__pack_f+0x178>
    1aaa:	8f ef       	ldi	r24, 0xFF	; 255
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	40 e0       	ldi	r20, 0x00	; 0
    1ab0:	50 e0       	ldi	r21, 0x00	; 0
    1ab2:	ba 01       	movw	r22, r20
    1ab4:	98 2f       	mov	r25, r24
    1ab6:	97 95       	ror	r25
    1ab8:	99 27       	eor	r25, r25
    1aba:	97 95       	ror	r25
    1abc:	a6 2f       	mov	r26, r22
    1abe:	af 77       	andi	r26, 0x7F	; 127
    1ac0:	e7 95       	ror	r30
    1ac2:	ee 27       	eor	r30, r30
    1ac4:	e7 95       	ror	r30
    1ac6:	86 95       	lsr	r24
    1ac8:	3a 2f       	mov	r19, r26
    1aca:	39 2b       	or	r19, r25
    1acc:	28 2f       	mov	r18, r24
    1ace:	2e 2b       	or	r18, r30
    1ad0:	84 2f       	mov	r24, r20
    1ad2:	95 2f       	mov	r25, r21
    1ad4:	a3 2f       	mov	r26, r19
    1ad6:	b2 2f       	mov	r27, r18
    1ad8:	bc 01       	movw	r22, r24
    1ada:	cd 01       	movw	r24, r26
    1adc:	1f 91       	pop	r17
    1ade:	0f 91       	pop	r16
    1ae0:	ff 90       	pop	r15
    1ae2:	ef 90       	pop	r14
    1ae4:	df 90       	pop	r13
    1ae6:	cf 90       	pop	r12
    1ae8:	08 95       	ret

00001aea <__unpack_f>:
    1aea:	dc 01       	movw	r26, r24
    1aec:	fb 01       	movw	r30, r22
    1aee:	4c 91       	ld	r20, X
    1af0:	11 96       	adiw	r26, 0x01	; 1
    1af2:	5c 91       	ld	r21, X
    1af4:	11 97       	sbiw	r26, 0x01	; 1
    1af6:	12 96       	adiw	r26, 0x02	; 2
    1af8:	8c 91       	ld	r24, X
    1afa:	12 97       	sbiw	r26, 0x02	; 2
    1afc:	68 2f       	mov	r22, r24
    1afe:	6f 77       	andi	r22, 0x7F	; 127
    1b00:	70 e0       	ldi	r23, 0x00	; 0
    1b02:	98 2f       	mov	r25, r24
    1b04:	99 1f       	adc	r25, r25
    1b06:	99 27       	eor	r25, r25
    1b08:	99 1f       	adc	r25, r25
    1b0a:	13 96       	adiw	r26, 0x03	; 3
    1b0c:	2c 91       	ld	r18, X
    1b0e:	13 97       	sbiw	r26, 0x03	; 3
    1b10:	82 2f       	mov	r24, r18
    1b12:	88 0f       	add	r24, r24
    1b14:	89 2b       	or	r24, r25
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	22 1f       	adc	r18, r18
    1b1a:	22 27       	eor	r18, r18
    1b1c:	22 1f       	adc	r18, r18
    1b1e:	21 83       	std	Z+1, r18	; 0x01
    1b20:	00 97       	sbiw	r24, 0x00	; 0
    1b22:	39 f5       	brne	.+78     	; 0x1b72 <__unpack_f+0x88>
    1b24:	41 15       	cp	r20, r1
    1b26:	51 05       	cpc	r21, r1
    1b28:	61 05       	cpc	r22, r1
    1b2a:	71 05       	cpc	r23, r1
    1b2c:	11 f4       	brne	.+4      	; 0x1b32 <__unpack_f+0x48>
    1b2e:	82 e0       	ldi	r24, 0x02	; 2
    1b30:	29 c0       	rjmp	.+82     	; 0x1b84 <__unpack_f+0x9a>
    1b32:	82 e8       	ldi	r24, 0x82	; 130
    1b34:	9f ef       	ldi	r25, 0xFF	; 255
    1b36:	93 83       	std	Z+3, r25	; 0x03
    1b38:	82 83       	std	Z+2, r24	; 0x02
    1b3a:	27 e0       	ldi	r18, 0x07	; 7
    1b3c:	44 0f       	add	r20, r20
    1b3e:	55 1f       	adc	r21, r21
    1b40:	66 1f       	adc	r22, r22
    1b42:	77 1f       	adc	r23, r23
    1b44:	2a 95       	dec	r18
    1b46:	d1 f7       	brne	.-12     	; 0x1b3c <__unpack_f+0x52>
    1b48:	83 e0       	ldi	r24, 0x03	; 3
    1b4a:	80 83       	st	Z, r24
    1b4c:	09 c0       	rjmp	.+18     	; 0x1b60 <__unpack_f+0x76>
    1b4e:	44 0f       	add	r20, r20
    1b50:	55 1f       	adc	r21, r21
    1b52:	66 1f       	adc	r22, r22
    1b54:	77 1f       	adc	r23, r23
    1b56:	82 81       	ldd	r24, Z+2	; 0x02
    1b58:	93 81       	ldd	r25, Z+3	; 0x03
    1b5a:	01 97       	sbiw	r24, 0x01	; 1
    1b5c:	93 83       	std	Z+3, r25	; 0x03
    1b5e:	82 83       	std	Z+2, r24	; 0x02
    1b60:	40 30       	cpi	r20, 0x00	; 0
    1b62:	80 e0       	ldi	r24, 0x00	; 0
    1b64:	58 07       	cpc	r21, r24
    1b66:	80 e0       	ldi	r24, 0x00	; 0
    1b68:	68 07       	cpc	r22, r24
    1b6a:	80 e4       	ldi	r24, 0x40	; 64
    1b6c:	78 07       	cpc	r23, r24
    1b6e:	78 f3       	brcs	.-34     	; 0x1b4e <__unpack_f+0x64>
    1b70:	20 c0       	rjmp	.+64     	; 0x1bb2 <__unpack_f+0xc8>
    1b72:	8f 3f       	cpi	r24, 0xFF	; 255
    1b74:	91 05       	cpc	r25, r1
    1b76:	79 f4       	brne	.+30     	; 0x1b96 <__unpack_f+0xac>
    1b78:	41 15       	cp	r20, r1
    1b7a:	51 05       	cpc	r21, r1
    1b7c:	61 05       	cpc	r22, r1
    1b7e:	71 05       	cpc	r23, r1
    1b80:	19 f4       	brne	.+6      	; 0x1b88 <__unpack_f+0x9e>
    1b82:	84 e0       	ldi	r24, 0x04	; 4
    1b84:	80 83       	st	Z, r24
    1b86:	08 95       	ret
    1b88:	64 ff       	sbrs	r22, 4
    1b8a:	03 c0       	rjmp	.+6      	; 0x1b92 <__unpack_f+0xa8>
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	80 83       	st	Z, r24
    1b90:	10 c0       	rjmp	.+32     	; 0x1bb2 <__unpack_f+0xc8>
    1b92:	10 82       	st	Z, r1
    1b94:	0e c0       	rjmp	.+28     	; 0x1bb2 <__unpack_f+0xc8>
    1b96:	8f 57       	subi	r24, 0x7F	; 127
    1b98:	90 40       	sbci	r25, 0x00	; 0
    1b9a:	93 83       	std	Z+3, r25	; 0x03
    1b9c:	82 83       	std	Z+2, r24	; 0x02
    1b9e:	83 e0       	ldi	r24, 0x03	; 3
    1ba0:	80 83       	st	Z, r24
    1ba2:	87 e0       	ldi	r24, 0x07	; 7
    1ba4:	44 0f       	add	r20, r20
    1ba6:	55 1f       	adc	r21, r21
    1ba8:	66 1f       	adc	r22, r22
    1baa:	77 1f       	adc	r23, r23
    1bac:	8a 95       	dec	r24
    1bae:	d1 f7       	brne	.-12     	; 0x1ba4 <__unpack_f+0xba>
    1bb0:	70 64       	ori	r23, 0x40	; 64
    1bb2:	44 83       	std	Z+4, r20	; 0x04
    1bb4:	55 83       	std	Z+5, r21	; 0x05
    1bb6:	66 83       	std	Z+6, r22	; 0x06
    1bb8:	77 83       	std	Z+7, r23	; 0x07
    1bba:	08 95       	ret

00001bbc <__fpcmp_parts_f>:
    1bbc:	cf 93       	push	r28
    1bbe:	fc 01       	movw	r30, r24
    1bc0:	db 01       	movw	r26, r22
    1bc2:	90 81       	ld	r25, Z
    1bc4:	92 30       	cpi	r25, 0x02	; 2
    1bc6:	08 f4       	brcc	.+2      	; 0x1bca <__fpcmp_parts_f+0xe>
    1bc8:	4c c0       	rjmp	.+152    	; 0x1c62 <__fpcmp_parts_f+0xa6>
    1bca:	8c 91       	ld	r24, X
    1bcc:	82 30       	cpi	r24, 0x02	; 2
    1bce:	08 f4       	brcc	.+2      	; 0x1bd2 <__fpcmp_parts_f+0x16>
    1bd0:	48 c0       	rjmp	.+144    	; 0x1c62 <__fpcmp_parts_f+0xa6>
    1bd2:	94 30       	cpi	r25, 0x04	; 4
    1bd4:	69 f4       	brne	.+26     	; 0x1bf0 <__fpcmp_parts_f+0x34>
    1bd6:	21 81       	ldd	r18, Z+1	; 0x01
    1bd8:	84 30       	cpi	r24, 0x04	; 4
    1bda:	39 f4       	brne	.+14     	; 0x1bea <__fpcmp_parts_f+0x2e>
    1bdc:	11 96       	adiw	r26, 0x01	; 1
    1bde:	8c 91       	ld	r24, X
    1be0:	11 97       	sbiw	r26, 0x01	; 1
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	82 1b       	sub	r24, r18
    1be6:	91 09       	sbc	r25, r1
    1be8:	44 c0       	rjmp	.+136    	; 0x1c72 <__fpcmp_parts_f+0xb6>
    1bea:	22 23       	and	r18, r18
    1bec:	d1 f1       	breq	.+116    	; 0x1c62 <__fpcmp_parts_f+0xa6>
    1bee:	3f c0       	rjmp	.+126    	; 0x1c6e <__fpcmp_parts_f+0xb2>
    1bf0:	84 30       	cpi	r24, 0x04	; 4
    1bf2:	21 f0       	breq	.+8      	; 0x1bfc <__fpcmp_parts_f+0x40>
    1bf4:	92 30       	cpi	r25, 0x02	; 2
    1bf6:	41 f4       	brne	.+16     	; 0x1c08 <__fpcmp_parts_f+0x4c>
    1bf8:	82 30       	cpi	r24, 0x02	; 2
    1bfa:	b1 f1       	breq	.+108    	; 0x1c68 <__fpcmp_parts_f+0xac>
    1bfc:	11 96       	adiw	r26, 0x01	; 1
    1bfe:	8c 91       	ld	r24, X
    1c00:	11 97       	sbiw	r26, 0x01	; 1
    1c02:	88 23       	and	r24, r24
    1c04:	a1 f1       	breq	.+104    	; 0x1c6e <__fpcmp_parts_f+0xb2>
    1c06:	2d c0       	rjmp	.+90     	; 0x1c62 <__fpcmp_parts_f+0xa6>
    1c08:	c1 81       	ldd	r28, Z+1	; 0x01
    1c0a:	82 30       	cpi	r24, 0x02	; 2
    1c0c:	01 f1       	breq	.+64     	; 0x1c4e <__fpcmp_parts_f+0x92>
    1c0e:	11 96       	adiw	r26, 0x01	; 1
    1c10:	8c 91       	ld	r24, X
    1c12:	11 97       	sbiw	r26, 0x01	; 1
    1c14:	c8 17       	cp	r28, r24
    1c16:	d9 f4       	brne	.+54     	; 0x1c4e <__fpcmp_parts_f+0x92>
    1c18:	82 81       	ldd	r24, Z+2	; 0x02
    1c1a:	93 81       	ldd	r25, Z+3	; 0x03
    1c1c:	12 96       	adiw	r26, 0x02	; 2
    1c1e:	2d 91       	ld	r18, X+
    1c20:	3c 91       	ld	r19, X
    1c22:	13 97       	sbiw	r26, 0x03	; 3
    1c24:	28 17       	cp	r18, r24
    1c26:	39 07       	cpc	r19, r25
    1c28:	94 f0       	brlt	.+36     	; 0x1c4e <__fpcmp_parts_f+0x92>
    1c2a:	82 17       	cp	r24, r18
    1c2c:	93 07       	cpc	r25, r19
    1c2e:	bc f0       	brlt	.+46     	; 0x1c5e <__fpcmp_parts_f+0xa2>
    1c30:	44 81       	ldd	r20, Z+4	; 0x04
    1c32:	55 81       	ldd	r21, Z+5	; 0x05
    1c34:	66 81       	ldd	r22, Z+6	; 0x06
    1c36:	77 81       	ldd	r23, Z+7	; 0x07
    1c38:	14 96       	adiw	r26, 0x04	; 4
    1c3a:	8d 91       	ld	r24, X+
    1c3c:	9d 91       	ld	r25, X+
    1c3e:	0d 90       	ld	r0, X+
    1c40:	bc 91       	ld	r27, X
    1c42:	a0 2d       	mov	r26, r0
    1c44:	84 17       	cp	r24, r20
    1c46:	95 07       	cpc	r25, r21
    1c48:	a6 07       	cpc	r26, r22
    1c4a:	b7 07       	cpc	r27, r23
    1c4c:	18 f4       	brcc	.+6      	; 0x1c54 <__fpcmp_parts_f+0x98>
    1c4e:	cc 23       	and	r28, r28
    1c50:	41 f0       	breq	.+16     	; 0x1c62 <__fpcmp_parts_f+0xa6>
    1c52:	0d c0       	rjmp	.+26     	; 0x1c6e <__fpcmp_parts_f+0xb2>
    1c54:	48 17       	cp	r20, r24
    1c56:	59 07       	cpc	r21, r25
    1c58:	6a 07       	cpc	r22, r26
    1c5a:	7b 07       	cpc	r23, r27
    1c5c:	28 f4       	brcc	.+10     	; 0x1c68 <__fpcmp_parts_f+0xac>
    1c5e:	cc 23       	and	r28, r28
    1c60:	31 f0       	breq	.+12     	; 0x1c6e <__fpcmp_parts_f+0xb2>
    1c62:	81 e0       	ldi	r24, 0x01	; 1
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	05 c0       	rjmp	.+10     	; 0x1c72 <__fpcmp_parts_f+0xb6>
    1c68:	80 e0       	ldi	r24, 0x00	; 0
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	02 c0       	rjmp	.+4      	; 0x1c72 <__fpcmp_parts_f+0xb6>
    1c6e:	8f ef       	ldi	r24, 0xFF	; 255
    1c70:	9f ef       	ldi	r25, 0xFF	; 255
    1c72:	cf 91       	pop	r28
    1c74:	08 95       	ret

00001c76 <main>:
#include "adc.h"
#include "timer.h"
#include "led.h"
#include "spi.h"
int main()
{
    1c76:	cf 93       	push	r28
    1c78:	df 93       	push	r29
    1c7a:	cd b7       	in	r28, 0x3d	; 61
    1c7c:	de b7       	in	r29, 0x3e	; 62
    1c7e:	2a 97       	sbiw	r28, 0x0a	; 10
    1c80:	0f b6       	in	r0, 0x3f	; 63
    1c82:	f8 94       	cli
    1c84:	de bf       	out	0x3e, r29	; 62
    1c86:	0f be       	out	0x3f, r0	; 63
    1c88:	cd bf       	out	0x3d, r28	; 61
	int tag;
	struct task task;
	led_init();
    1c8a:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <led_init>
	uart_init();
    1c8e:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_init>
	task_init();
    1c92:	0e 94 c0 03 	call	0x780	; 0x780 <task_init>
	timer_init();
    1c96:	0e 94 29 06 	call	0xc52	; 0xc52 <timer_init>
	adc_init();
    1c9a:	0e 94 96 00 	call	0x12c	; 0x12c <adc_init>
	spi_init();
    1c9e:	0e 94 7f 07 	call	0xefe	; 0xefe <spi_init>

	printf("$ ");
    1ca2:	0f 92       	push	r0
    1ca4:	0f 92       	push	r0
    1ca6:	85 e4       	ldi	r24, 0x45	; 69
    1ca8:	92 e0       	ldi	r25, 0x02	; 2
    1caa:	ed b7       	in	r30, 0x3d	; 61
    1cac:	fe b7       	in	r31, 0x3e	; 62
    1cae:	92 83       	std	Z+2, r25	; 0x02
    1cb0:	81 83       	std	Z+1, r24	; 0x01
    1cb2:	0e 94 b4 10 	call	0x2168	; 0x2168 <printf>
    1cb6:	0f 90       	pop	r0
    1cb8:	0f 90       	pop	r0
	while(1){
		cli();
    1cba:	f8 94       	cli
		tag = task_delete(&task);
    1cbc:	ce 01       	movw	r24, r28
    1cbe:	01 96       	adiw	r24, 0x01	; 1
    1cc0:	0e 94 09 04 	call	0x812	; 0x812 <task_delete>
		sei();
    1cc4:	78 94       	sei
		if(tag)
    1cc6:	00 97       	sbiw	r24, 0x00	; 0
    1cc8:	c1 f3       	breq	.-16     	; 0x1cba <main+0x44>
			((*task.fun))(task.arg);
    1cca:	e9 81       	ldd	r30, Y+1	; 0x01
    1ccc:	fa 81       	ldd	r31, Y+2	; 0x02
    1cce:	ce 01       	movw	r24, r28
    1cd0:	03 96       	adiw	r24, 0x03	; 3
    1cd2:	19 95       	eicall
    1cd4:	f2 cf       	rjmp	.-28     	; 0x1cba <main+0x44>

00001cd6 <__divmodhi4>:
    1cd6:	97 fb       	bst	r25, 7
    1cd8:	09 2e       	mov	r0, r25
    1cda:	07 26       	eor	r0, r23
    1cdc:	0a d0       	rcall	.+20     	; 0x1cf2 <__divmodhi4_neg1>
    1cde:	77 fd       	sbrc	r23, 7
    1ce0:	04 d0       	rcall	.+8      	; 0x1cea <__divmodhi4_neg2>
    1ce2:	0c d0       	rcall	.+24     	; 0x1cfc <__udivmodhi4>
    1ce4:	06 d0       	rcall	.+12     	; 0x1cf2 <__divmodhi4_neg1>
    1ce6:	00 20       	and	r0, r0
    1ce8:	1a f4       	brpl	.+6      	; 0x1cf0 <__divmodhi4_exit>

00001cea <__divmodhi4_neg2>:
    1cea:	70 95       	com	r23
    1cec:	61 95       	neg	r22
    1cee:	7f 4f       	sbci	r23, 0xFF	; 255

00001cf0 <__divmodhi4_exit>:
    1cf0:	08 95       	ret

00001cf2 <__divmodhi4_neg1>:
    1cf2:	f6 f7       	brtc	.-4      	; 0x1cf0 <__divmodhi4_exit>
    1cf4:	90 95       	com	r25
    1cf6:	81 95       	neg	r24
    1cf8:	9f 4f       	sbci	r25, 0xFF	; 255
    1cfa:	08 95       	ret

00001cfc <__udivmodhi4>:
    1cfc:	aa 1b       	sub	r26, r26
    1cfe:	bb 1b       	sub	r27, r27
    1d00:	51 e1       	ldi	r21, 0x11	; 17
    1d02:	07 c0       	rjmp	.+14     	; 0x1d12 <__udivmodhi4_ep>

00001d04 <__udivmodhi4_loop>:
    1d04:	aa 1f       	adc	r26, r26
    1d06:	bb 1f       	adc	r27, r27
    1d08:	a6 17       	cp	r26, r22
    1d0a:	b7 07       	cpc	r27, r23
    1d0c:	10 f0       	brcs	.+4      	; 0x1d12 <__udivmodhi4_ep>
    1d0e:	a6 1b       	sub	r26, r22
    1d10:	b7 0b       	sbc	r27, r23

00001d12 <__udivmodhi4_ep>:
    1d12:	88 1f       	adc	r24, r24
    1d14:	99 1f       	adc	r25, r25
    1d16:	5a 95       	dec	r21
    1d18:	a9 f7       	brne	.-22     	; 0x1d04 <__udivmodhi4_loop>
    1d1a:	80 95       	com	r24
    1d1c:	90 95       	com	r25
    1d1e:	bc 01       	movw	r22, r24
    1d20:	cd 01       	movw	r24, r26
    1d22:	08 95       	ret

00001d24 <__prologue_saves__>:
    1d24:	2f 92       	push	r2
    1d26:	3f 92       	push	r3
    1d28:	4f 92       	push	r4
    1d2a:	5f 92       	push	r5
    1d2c:	6f 92       	push	r6
    1d2e:	7f 92       	push	r7
    1d30:	8f 92       	push	r8
    1d32:	9f 92       	push	r9
    1d34:	af 92       	push	r10
    1d36:	bf 92       	push	r11
    1d38:	cf 92       	push	r12
    1d3a:	df 92       	push	r13
    1d3c:	ef 92       	push	r14
    1d3e:	ff 92       	push	r15
    1d40:	0f 93       	push	r16
    1d42:	1f 93       	push	r17
    1d44:	cf 93       	push	r28
    1d46:	df 93       	push	r29
    1d48:	cd b7       	in	r28, 0x3d	; 61
    1d4a:	de b7       	in	r29, 0x3e	; 62
    1d4c:	ca 1b       	sub	r28, r26
    1d4e:	db 0b       	sbc	r29, r27
    1d50:	0f b6       	in	r0, 0x3f	; 63
    1d52:	f8 94       	cli
    1d54:	de bf       	out	0x3e, r29	; 62
    1d56:	0f be       	out	0x3f, r0	; 63
    1d58:	cd bf       	out	0x3d, r28	; 61
    1d5a:	19 94       	eijmp

00001d5c <__epilogue_restores__>:
    1d5c:	2a 88       	ldd	r2, Y+18	; 0x12
    1d5e:	39 88       	ldd	r3, Y+17	; 0x11
    1d60:	48 88       	ldd	r4, Y+16	; 0x10
    1d62:	5f 84       	ldd	r5, Y+15	; 0x0f
    1d64:	6e 84       	ldd	r6, Y+14	; 0x0e
    1d66:	7d 84       	ldd	r7, Y+13	; 0x0d
    1d68:	8c 84       	ldd	r8, Y+12	; 0x0c
    1d6a:	9b 84       	ldd	r9, Y+11	; 0x0b
    1d6c:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d6e:	b9 84       	ldd	r11, Y+9	; 0x09
    1d70:	c8 84       	ldd	r12, Y+8	; 0x08
    1d72:	df 80       	ldd	r13, Y+7	; 0x07
    1d74:	ee 80       	ldd	r14, Y+6	; 0x06
    1d76:	fd 80       	ldd	r15, Y+5	; 0x05
    1d78:	0c 81       	ldd	r16, Y+4	; 0x04
    1d7a:	1b 81       	ldd	r17, Y+3	; 0x03
    1d7c:	aa 81       	ldd	r26, Y+2	; 0x02
    1d7e:	b9 81       	ldd	r27, Y+1	; 0x01
    1d80:	ce 0f       	add	r28, r30
    1d82:	d1 1d       	adc	r29, r1
    1d84:	0f b6       	in	r0, 0x3f	; 63
    1d86:	f8 94       	cli
    1d88:	de bf       	out	0x3e, r29	; 62
    1d8a:	0f be       	out	0x3f, r0	; 63
    1d8c:	cd bf       	out	0x3d, r28	; 61
    1d8e:	ed 01       	movw	r28, r26
    1d90:	08 95       	ret

00001d92 <malloc>:
    1d92:	cf 93       	push	r28
    1d94:	df 93       	push	r29
    1d96:	ac 01       	movw	r20, r24
    1d98:	82 30       	cpi	r24, 0x02	; 2
    1d9a:	91 05       	cpc	r25, r1
    1d9c:	10 f4       	brcc	.+4      	; 0x1da2 <malloc+0x10>
    1d9e:	42 e0       	ldi	r20, 0x02	; 2
    1da0:	50 e0       	ldi	r21, 0x00	; 0
    1da2:	e0 91 43 07 	lds	r30, 0x0743
    1da6:	f0 91 44 07 	lds	r31, 0x0744
    1daa:	20 e0       	ldi	r18, 0x00	; 0
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	a0 e0       	ldi	r26, 0x00	; 0
    1db0:	b0 e0       	ldi	r27, 0x00	; 0
    1db2:	24 c0       	rjmp	.+72     	; 0x1dfc <malloc+0x6a>
    1db4:	80 81       	ld	r24, Z
    1db6:	91 81       	ldd	r25, Z+1	; 0x01
    1db8:	84 17       	cp	r24, r20
    1dba:	95 07       	cpc	r25, r21
    1dbc:	d0 f0       	brcs	.+52     	; 0x1df2 <malloc+0x60>
    1dbe:	84 17       	cp	r24, r20
    1dc0:	95 07       	cpc	r25, r21
    1dc2:	71 f4       	brne	.+28     	; 0x1de0 <malloc+0x4e>
    1dc4:	82 81       	ldd	r24, Z+2	; 0x02
    1dc6:	93 81       	ldd	r25, Z+3	; 0x03
    1dc8:	10 97       	sbiw	r26, 0x00	; 0
    1dca:	29 f0       	breq	.+10     	; 0x1dd6 <malloc+0x44>
    1dcc:	13 96       	adiw	r26, 0x03	; 3
    1dce:	9c 93       	st	X, r25
    1dd0:	8e 93       	st	-X, r24
    1dd2:	12 97       	sbiw	r26, 0x02	; 2
    1dd4:	2c c0       	rjmp	.+88     	; 0x1e2e <malloc+0x9c>
    1dd6:	90 93 44 07 	sts	0x0744, r25
    1dda:	80 93 43 07 	sts	0x0743, r24
    1dde:	27 c0       	rjmp	.+78     	; 0x1e2e <malloc+0x9c>
    1de0:	21 15       	cp	r18, r1
    1de2:	31 05       	cpc	r19, r1
    1de4:	19 f0       	breq	.+6      	; 0x1dec <malloc+0x5a>
    1de6:	82 17       	cp	r24, r18
    1de8:	93 07       	cpc	r25, r19
    1dea:	18 f4       	brcc	.+6      	; 0x1df2 <malloc+0x60>
    1dec:	9c 01       	movw	r18, r24
    1dee:	bd 01       	movw	r22, r26
    1df0:	ef 01       	movw	r28, r30
    1df2:	92 81       	ldd	r25, Z+2	; 0x02
    1df4:	83 81       	ldd	r24, Z+3	; 0x03
    1df6:	df 01       	movw	r26, r30
    1df8:	e9 2f       	mov	r30, r25
    1dfa:	f8 2f       	mov	r31, r24
    1dfc:	30 97       	sbiw	r30, 0x00	; 0
    1dfe:	d1 f6       	brne	.-76     	; 0x1db4 <malloc+0x22>
    1e00:	21 15       	cp	r18, r1
    1e02:	31 05       	cpc	r19, r1
    1e04:	f9 f0       	breq	.+62     	; 0x1e44 <malloc+0xb2>
    1e06:	c9 01       	movw	r24, r18
    1e08:	84 1b       	sub	r24, r20
    1e0a:	95 0b       	sbc	r25, r21
    1e0c:	84 30       	cpi	r24, 0x04	; 4
    1e0e:	91 05       	cpc	r25, r1
    1e10:	80 f4       	brcc	.+32     	; 0x1e32 <malloc+0xa0>
    1e12:	8a 81       	ldd	r24, Y+2	; 0x02
    1e14:	9b 81       	ldd	r25, Y+3	; 0x03
    1e16:	61 15       	cp	r22, r1
    1e18:	71 05       	cpc	r23, r1
    1e1a:	21 f0       	breq	.+8      	; 0x1e24 <malloc+0x92>
    1e1c:	fb 01       	movw	r30, r22
    1e1e:	93 83       	std	Z+3, r25	; 0x03
    1e20:	82 83       	std	Z+2, r24	; 0x02
    1e22:	04 c0       	rjmp	.+8      	; 0x1e2c <malloc+0x9a>
    1e24:	90 93 44 07 	sts	0x0744, r25
    1e28:	80 93 43 07 	sts	0x0743, r24
    1e2c:	fe 01       	movw	r30, r28
    1e2e:	32 96       	adiw	r30, 0x02	; 2
    1e30:	42 c0       	rjmp	.+132    	; 0x1eb6 <malloc+0x124>
    1e32:	fe 01       	movw	r30, r28
    1e34:	e8 0f       	add	r30, r24
    1e36:	f9 1f       	adc	r31, r25
    1e38:	41 93       	st	Z+, r20
    1e3a:	51 93       	st	Z+, r21
    1e3c:	02 97       	sbiw	r24, 0x02	; 2
    1e3e:	99 83       	std	Y+1, r25	; 0x01
    1e40:	88 83       	st	Y, r24
    1e42:	39 c0       	rjmp	.+114    	; 0x1eb6 <malloc+0x124>
    1e44:	80 91 41 07 	lds	r24, 0x0741
    1e48:	90 91 42 07 	lds	r25, 0x0742
    1e4c:	00 97       	sbiw	r24, 0x00	; 0
    1e4e:	41 f4       	brne	.+16     	; 0x1e60 <malloc+0xce>
    1e50:	80 91 83 04 	lds	r24, 0x0483
    1e54:	90 91 84 04 	lds	r25, 0x0484
    1e58:	90 93 42 07 	sts	0x0742, r25
    1e5c:	80 93 41 07 	sts	0x0741, r24
    1e60:	20 91 81 04 	lds	r18, 0x0481
    1e64:	30 91 82 04 	lds	r19, 0x0482
    1e68:	21 15       	cp	r18, r1
    1e6a:	31 05       	cpc	r19, r1
    1e6c:	41 f4       	brne	.+16     	; 0x1e7e <malloc+0xec>
    1e6e:	2d b7       	in	r18, 0x3d	; 61
    1e70:	3e b7       	in	r19, 0x3e	; 62
    1e72:	80 91 85 04 	lds	r24, 0x0485
    1e76:	90 91 86 04 	lds	r25, 0x0486
    1e7a:	28 1b       	sub	r18, r24
    1e7c:	39 0b       	sbc	r19, r25
    1e7e:	e0 91 41 07 	lds	r30, 0x0741
    1e82:	f0 91 42 07 	lds	r31, 0x0742
    1e86:	e2 17       	cp	r30, r18
    1e88:	f3 07       	cpc	r31, r19
    1e8a:	98 f4       	brcc	.+38     	; 0x1eb2 <malloc+0x120>
    1e8c:	2e 1b       	sub	r18, r30
    1e8e:	3f 0b       	sbc	r19, r31
    1e90:	24 17       	cp	r18, r20
    1e92:	35 07       	cpc	r19, r21
    1e94:	70 f0       	brcs	.+28     	; 0x1eb2 <malloc+0x120>
    1e96:	ca 01       	movw	r24, r20
    1e98:	02 96       	adiw	r24, 0x02	; 2
    1e9a:	28 17       	cp	r18, r24
    1e9c:	39 07       	cpc	r19, r25
    1e9e:	48 f0       	brcs	.+18     	; 0x1eb2 <malloc+0x120>
    1ea0:	8e 0f       	add	r24, r30
    1ea2:	9f 1f       	adc	r25, r31
    1ea4:	90 93 42 07 	sts	0x0742, r25
    1ea8:	80 93 41 07 	sts	0x0741, r24
    1eac:	41 93       	st	Z+, r20
    1eae:	51 93       	st	Z+, r21
    1eb0:	02 c0       	rjmp	.+4      	; 0x1eb6 <malloc+0x124>
    1eb2:	e0 e0       	ldi	r30, 0x00	; 0
    1eb4:	f0 e0       	ldi	r31, 0x00	; 0
    1eb6:	cf 01       	movw	r24, r30
    1eb8:	df 91       	pop	r29
    1eba:	cf 91       	pop	r28
    1ebc:	08 95       	ret

00001ebe <free>:
    1ebe:	0f 93       	push	r16
    1ec0:	1f 93       	push	r17
    1ec2:	cf 93       	push	r28
    1ec4:	df 93       	push	r29
    1ec6:	9c 01       	movw	r18, r24
    1ec8:	00 97       	sbiw	r24, 0x00	; 0
    1eca:	09 f4       	brne	.+2      	; 0x1ece <free+0x10>
    1ecc:	8c c0       	rjmp	.+280    	; 0x1fe6 <free+0x128>
    1ece:	dc 01       	movw	r26, r24
    1ed0:	12 97       	sbiw	r26, 0x02	; 2
    1ed2:	13 96       	adiw	r26, 0x03	; 3
    1ed4:	1c 92       	st	X, r1
    1ed6:	1e 92       	st	-X, r1
    1ed8:	12 97       	sbiw	r26, 0x02	; 2
    1eda:	60 91 43 07 	lds	r22, 0x0743
    1ede:	70 91 44 07 	lds	r23, 0x0744
    1ee2:	61 15       	cp	r22, r1
    1ee4:	71 05       	cpc	r23, r1
    1ee6:	89 f4       	brne	.+34     	; 0x1f0a <free+0x4c>
    1ee8:	8d 91       	ld	r24, X+
    1eea:	9c 91       	ld	r25, X
    1eec:	11 97       	sbiw	r26, 0x01	; 1
    1eee:	82 0f       	add	r24, r18
    1ef0:	93 1f       	adc	r25, r19
    1ef2:	20 91 41 07 	lds	r18, 0x0741
    1ef6:	30 91 42 07 	lds	r19, 0x0742
    1efa:	28 17       	cp	r18, r24
    1efc:	39 07       	cpc	r19, r25
    1efe:	69 f5       	brne	.+90     	; 0x1f5a <free+0x9c>
    1f00:	b0 93 42 07 	sts	0x0742, r27
    1f04:	a0 93 41 07 	sts	0x0741, r26
    1f08:	6e c0       	rjmp	.+220    	; 0x1fe6 <free+0x128>
    1f0a:	fb 01       	movw	r30, r22
    1f0c:	40 e0       	ldi	r20, 0x00	; 0
    1f0e:	50 e0       	ldi	r21, 0x00	; 0
    1f10:	01 c0       	rjmp	.+2      	; 0x1f14 <free+0x56>
    1f12:	fc 01       	movw	r30, r24
    1f14:	ea 17       	cp	r30, r26
    1f16:	fb 07       	cpc	r31, r27
    1f18:	30 f4       	brcc	.+12     	; 0x1f26 <free+0x68>
    1f1a:	82 81       	ldd	r24, Z+2	; 0x02
    1f1c:	93 81       	ldd	r25, Z+3	; 0x03
    1f1e:	af 01       	movw	r20, r30
    1f20:	00 97       	sbiw	r24, 0x00	; 0
    1f22:	b9 f7       	brne	.-18     	; 0x1f12 <free+0x54>
    1f24:	1f c0       	rjmp	.+62     	; 0x1f64 <free+0xa6>
    1f26:	e9 01       	movw	r28, r18
    1f28:	22 97       	sbiw	r28, 0x02	; 2
    1f2a:	fb 83       	std	Y+3, r31	; 0x03
    1f2c:	ea 83       	std	Y+2, r30	; 0x02
    1f2e:	08 81       	ld	r16, Y
    1f30:	19 81       	ldd	r17, Y+1	; 0x01
    1f32:	c9 01       	movw	r24, r18
    1f34:	80 0f       	add	r24, r16
    1f36:	91 1f       	adc	r25, r17
    1f38:	8e 17       	cp	r24, r30
    1f3a:	9f 07       	cpc	r25, r31
    1f3c:	59 f4       	brne	.+22     	; 0x1f54 <free+0x96>
    1f3e:	80 81       	ld	r24, Z
    1f40:	91 81       	ldd	r25, Z+1	; 0x01
    1f42:	80 0f       	add	r24, r16
    1f44:	91 1f       	adc	r25, r17
    1f46:	02 96       	adiw	r24, 0x02	; 2
    1f48:	99 83       	std	Y+1, r25	; 0x01
    1f4a:	88 83       	st	Y, r24
    1f4c:	82 81       	ldd	r24, Z+2	; 0x02
    1f4e:	93 81       	ldd	r25, Z+3	; 0x03
    1f50:	9b 83       	std	Y+3, r25	; 0x03
    1f52:	8a 83       	std	Y+2, r24	; 0x02
    1f54:	41 15       	cp	r20, r1
    1f56:	51 05       	cpc	r21, r1
    1f58:	29 f4       	brne	.+10     	; 0x1f64 <free+0xa6>
    1f5a:	b0 93 44 07 	sts	0x0744, r27
    1f5e:	a0 93 43 07 	sts	0x0743, r26
    1f62:	41 c0       	rjmp	.+130    	; 0x1fe6 <free+0x128>
    1f64:	fa 01       	movw	r30, r20
    1f66:	b3 83       	std	Z+3, r27	; 0x03
    1f68:	a2 83       	std	Z+2, r26	; 0x02
    1f6a:	c1 91       	ld	r28, Z+
    1f6c:	d1 91       	ld	r29, Z+
    1f6e:	ec 0f       	add	r30, r28
    1f70:	fd 1f       	adc	r31, r29
    1f72:	ae 17       	cp	r26, r30
    1f74:	bf 07       	cpc	r27, r31
    1f76:	81 f4       	brne	.+32     	; 0x1f98 <free+0xda>
    1f78:	f9 01       	movw	r30, r18
    1f7a:	92 91       	ld	r25, -Z
    1f7c:	82 91       	ld	r24, -Z
    1f7e:	8c 0f       	add	r24, r28
    1f80:	9d 1f       	adc	r25, r29
    1f82:	02 96       	adiw	r24, 0x02	; 2
    1f84:	da 01       	movw	r26, r20
    1f86:	11 96       	adiw	r26, 0x01	; 1
    1f88:	9c 93       	st	X, r25
    1f8a:	8e 93       	st	-X, r24
    1f8c:	82 81       	ldd	r24, Z+2	; 0x02
    1f8e:	93 81       	ldd	r25, Z+3	; 0x03
    1f90:	13 96       	adiw	r26, 0x03	; 3
    1f92:	9c 93       	st	X, r25
    1f94:	8e 93       	st	-X, r24
    1f96:	12 97       	sbiw	r26, 0x02	; 2
    1f98:	e0 e0       	ldi	r30, 0x00	; 0
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	02 c0       	rjmp	.+4      	; 0x1fa2 <free+0xe4>
    1f9e:	fb 01       	movw	r30, r22
    1fa0:	bc 01       	movw	r22, r24
    1fa2:	db 01       	movw	r26, r22
    1fa4:	12 96       	adiw	r26, 0x02	; 2
    1fa6:	8d 91       	ld	r24, X+
    1fa8:	9c 91       	ld	r25, X
    1faa:	13 97       	sbiw	r26, 0x03	; 3
    1fac:	00 97       	sbiw	r24, 0x00	; 0
    1fae:	b9 f7       	brne	.-18     	; 0x1f9e <free+0xe0>
    1fb0:	cb 01       	movw	r24, r22
    1fb2:	02 96       	adiw	r24, 0x02	; 2
    1fb4:	2d 91       	ld	r18, X+
    1fb6:	3c 91       	ld	r19, X
    1fb8:	11 97       	sbiw	r26, 0x01	; 1
    1fba:	82 0f       	add	r24, r18
    1fbc:	93 1f       	adc	r25, r19
    1fbe:	20 91 41 07 	lds	r18, 0x0741
    1fc2:	30 91 42 07 	lds	r19, 0x0742
    1fc6:	28 17       	cp	r18, r24
    1fc8:	39 07       	cpc	r19, r25
    1fca:	69 f4       	brne	.+26     	; 0x1fe6 <free+0x128>
    1fcc:	30 97       	sbiw	r30, 0x00	; 0
    1fce:	29 f4       	brne	.+10     	; 0x1fda <free+0x11c>
    1fd0:	10 92 44 07 	sts	0x0744, r1
    1fd4:	10 92 43 07 	sts	0x0743, r1
    1fd8:	02 c0       	rjmp	.+4      	; 0x1fde <free+0x120>
    1fda:	13 82       	std	Z+3, r1	; 0x03
    1fdc:	12 82       	std	Z+2, r1	; 0x02
    1fde:	70 93 42 07 	sts	0x0742, r23
    1fe2:	60 93 41 07 	sts	0x0741, r22
    1fe6:	df 91       	pop	r29
    1fe8:	cf 91       	pop	r28
    1fea:	1f 91       	pop	r17
    1fec:	0f 91       	pop	r16
    1fee:	08 95       	ret

00001ff0 <atoi>:
    1ff0:	fc 01       	movw	r30, r24
    1ff2:	88 27       	eor	r24, r24
    1ff4:	99 27       	eor	r25, r25
    1ff6:	e8 94       	clt
    1ff8:	21 91       	ld	r18, Z+
    1ffa:	20 32       	cpi	r18, 0x20	; 32
    1ffc:	e9 f3       	breq	.-6      	; 0x1ff8 <atoi+0x8>
    1ffe:	29 30       	cpi	r18, 0x09	; 9
    2000:	10 f0       	brcs	.+4      	; 0x2006 <atoi+0x16>
    2002:	2e 30       	cpi	r18, 0x0E	; 14
    2004:	c8 f3       	brcs	.-14     	; 0x1ff8 <atoi+0x8>
    2006:	2b 32       	cpi	r18, 0x2B	; 43
    2008:	41 f0       	breq	.+16     	; 0x201a <atoi+0x2a>
    200a:	2d 32       	cpi	r18, 0x2D	; 45
    200c:	39 f4       	brne	.+14     	; 0x201c <atoi+0x2c>
    200e:	68 94       	set
    2010:	04 c0       	rjmp	.+8      	; 0x201a <atoi+0x2a>
    2012:	0e 94 52 10 	call	0x20a4	; 0x20a4 <__mulhi_const_10>
    2016:	82 0f       	add	r24, r18
    2018:	91 1d       	adc	r25, r1
    201a:	21 91       	ld	r18, Z+
    201c:	20 53       	subi	r18, 0x30	; 48
    201e:	2a 30       	cpi	r18, 0x0A	; 10
    2020:	c0 f3       	brcs	.-16     	; 0x2012 <atoi+0x22>
    2022:	1e f4       	brtc	.+6      	; 0x202a <atoi+0x3a>
    2024:	90 95       	com	r25
    2026:	81 95       	neg	r24
    2028:	9f 4f       	sbci	r25, 0xFF	; 255
    202a:	08 95       	ret

0000202c <strtok>:
    202c:	40 e9       	ldi	r20, 0x90	; 144
    202e:	54 e0       	ldi	r21, 0x04	; 4
    2030:	0e 94 2b 10 	call	0x2056	; 0x2056 <strtok_r>
    2034:	08 95       	ret

00002036 <strcmp>:
    2036:	fb 01       	movw	r30, r22
    2038:	dc 01       	movw	r26, r24
    203a:	8d 91       	ld	r24, X+
    203c:	01 90       	ld	r0, Z+
    203e:	80 19       	sub	r24, r0
    2040:	01 10       	cpse	r0, r1
    2042:	d9 f3       	breq	.-10     	; 0x203a <strcmp+0x4>
    2044:	99 0b       	sbc	r25, r25
    2046:	08 95       	ret

00002048 <strcpy>:
    2048:	fb 01       	movw	r30, r22
    204a:	dc 01       	movw	r26, r24
    204c:	01 90       	ld	r0, Z+
    204e:	0d 92       	st	X+, r0
    2050:	00 20       	and	r0, r0
    2052:	e1 f7       	brne	.-8      	; 0x204c <strcpy+0x4>
    2054:	08 95       	ret

00002056 <strtok_r>:
    2056:	fa 01       	movw	r30, r20
    2058:	a1 91       	ld	r26, Z+
    205a:	b0 81       	ld	r27, Z
    205c:	00 97       	sbiw	r24, 0x00	; 0
    205e:	19 f4       	brne	.+6      	; 0x2066 <strtok_r+0x10>
    2060:	10 97       	sbiw	r26, 0x00	; 0
    2062:	e1 f0       	breq	.+56     	; 0x209c <strtok_r+0x46>
    2064:	cd 01       	movw	r24, r26
    2066:	dc 01       	movw	r26, r24
    2068:	cd 01       	movw	r24, r26
    206a:	0d 90       	ld	r0, X+
    206c:	00 20       	and	r0, r0
    206e:	11 f4       	brne	.+4      	; 0x2074 <strtok_r+0x1e>
    2070:	c0 01       	movw	r24, r0
    2072:	13 c0       	rjmp	.+38     	; 0x209a <strtok_r+0x44>
    2074:	fb 01       	movw	r30, r22
    2076:	21 91       	ld	r18, Z+
    2078:	22 23       	and	r18, r18
    207a:	19 f0       	breq	.+6      	; 0x2082 <strtok_r+0x2c>
    207c:	20 15       	cp	r18, r0
    207e:	d9 f7       	brne	.-10     	; 0x2076 <strtok_r+0x20>
    2080:	f3 cf       	rjmp	.-26     	; 0x2068 <strtok_r+0x12>
    2082:	fb 01       	movw	r30, r22
    2084:	21 91       	ld	r18, Z+
    2086:	20 15       	cp	r18, r0
    2088:	19 f4       	brne	.+6      	; 0x2090 <strtok_r+0x3a>
    208a:	1e 92       	st	-X, r1
    208c:	11 96       	adiw	r26, 0x01	; 1
    208e:	06 c0       	rjmp	.+12     	; 0x209c <strtok_r+0x46>
    2090:	22 23       	and	r18, r18
    2092:	c1 f7       	brne	.-16     	; 0x2084 <strtok_r+0x2e>
    2094:	0d 90       	ld	r0, X+
    2096:	00 20       	and	r0, r0
    2098:	a1 f7       	brne	.-24     	; 0x2082 <strtok_r+0x2c>
    209a:	d0 01       	movw	r26, r0
    209c:	fa 01       	movw	r30, r20
    209e:	a1 93       	st	Z+, r26
    20a0:	b0 83       	st	Z, r27
    20a2:	08 95       	ret

000020a4 <__mulhi_const_10>:
    20a4:	7a e0       	ldi	r23, 0x0A	; 10
    20a6:	97 9f       	mul	r25, r23
    20a8:	90 2d       	mov	r25, r0
    20aa:	87 9f       	mul	r24, r23
    20ac:	80 2d       	mov	r24, r0
    20ae:	91 0d       	add	r25, r1
    20b0:	11 24       	eor	r1, r1
    20b2:	08 95       	ret

000020b4 <fgets>:
    20b4:	cf 92       	push	r12
    20b6:	df 92       	push	r13
    20b8:	ef 92       	push	r14
    20ba:	ff 92       	push	r15
    20bc:	0f 93       	push	r16
    20be:	1f 93       	push	r17
    20c0:	cf 93       	push	r28
    20c2:	df 93       	push	r29
    20c4:	8c 01       	movw	r16, r24
    20c6:	6a 01       	movw	r12, r20
    20c8:	fa 01       	movw	r30, r20
    20ca:	83 81       	ldd	r24, Z+3	; 0x03
    20cc:	80 ff       	sbrs	r24, 0
    20ce:	1a c0       	rjmp	.+52     	; 0x2104 <fgets+0x50>
    20d0:	16 16       	cp	r1, r22
    20d2:	17 06       	cpc	r1, r23
    20d4:	bc f4       	brge	.+46     	; 0x2104 <fgets+0x50>
    20d6:	7b 01       	movw	r14, r22
    20d8:	e8 01       	movw	r28, r16
    20da:	0e c0       	rjmp	.+28     	; 0x20f8 <fgets+0x44>
    20dc:	c6 01       	movw	r24, r12
    20de:	0e 94 47 13 	call	0x268e	; 0x268e <fgetc>
    20e2:	ff ef       	ldi	r31, 0xFF	; 255
    20e4:	8f 3f       	cpi	r24, 0xFF	; 255
    20e6:	9f 07       	cpc	r25, r31
    20e8:	69 f0       	breq	.+26     	; 0x2104 <fgets+0x50>
    20ea:	89 93       	st	Y+, r24
    20ec:	08 94       	sec
    20ee:	e1 08       	sbc	r14, r1
    20f0:	f1 08       	sbc	r15, r1
    20f2:	8a 30       	cpi	r24, 0x0A	; 10
    20f4:	91 05       	cpc	r25, r1
    20f6:	21 f0       	breq	.+8      	; 0x2100 <fgets+0x4c>
    20f8:	21 e0       	ldi	r18, 0x01	; 1
    20fa:	e2 16       	cp	r14, r18
    20fc:	f1 04       	cpc	r15, r1
    20fe:	71 f7       	brne	.-36     	; 0x20dc <fgets+0x28>
    2100:	18 82       	st	Y, r1
    2102:	02 c0       	rjmp	.+4      	; 0x2108 <fgets+0x54>
    2104:	00 e0       	ldi	r16, 0x00	; 0
    2106:	10 e0       	ldi	r17, 0x00	; 0
    2108:	c8 01       	movw	r24, r16
    210a:	df 91       	pop	r29
    210c:	cf 91       	pop	r28
    210e:	1f 91       	pop	r17
    2110:	0f 91       	pop	r16
    2112:	ff 90       	pop	r15
    2114:	ef 90       	pop	r14
    2116:	df 90       	pop	r13
    2118:	cf 90       	pop	r12
    211a:	08 95       	ret

0000211c <gets>:
    211c:	0f 93       	push	r16
    211e:	1f 93       	push	r17
    2120:	cf 93       	push	r28
    2122:	df 93       	push	r29
    2124:	8c 01       	movw	r16, r24
    2126:	e0 91 45 07 	lds	r30, 0x0745
    212a:	f0 91 46 07 	lds	r31, 0x0746
    212e:	83 81       	ldd	r24, Z+3	; 0x03
    2130:	80 ff       	sbrs	r24, 0
    2132:	12 c0       	rjmp	.+36     	; 0x2158 <gets+0x3c>
    2134:	e8 01       	movw	r28, r16
    2136:	80 91 45 07 	lds	r24, 0x0745
    213a:	90 91 46 07 	lds	r25, 0x0746
    213e:	0e 94 47 13 	call	0x268e	; 0x268e <fgetc>
    2142:	2f ef       	ldi	r18, 0xFF	; 255
    2144:	8f 3f       	cpi	r24, 0xFF	; 255
    2146:	92 07       	cpc	r25, r18
    2148:	39 f0       	breq	.+14     	; 0x2158 <gets+0x3c>
    214a:	89 93       	st	Y+, r24
    214c:	8a 30       	cpi	r24, 0x0A	; 10
    214e:	91 05       	cpc	r25, r1
    2150:	91 f7       	brne	.-28     	; 0x2136 <gets+0x1a>
    2152:	21 97       	sbiw	r28, 0x01	; 1
    2154:	18 82       	st	Y, r1
    2156:	02 c0       	rjmp	.+4      	; 0x215c <gets+0x40>
    2158:	00 e0       	ldi	r16, 0x00	; 0
    215a:	10 e0       	ldi	r17, 0x00	; 0
    215c:	c8 01       	movw	r24, r16
    215e:	df 91       	pop	r29
    2160:	cf 91       	pop	r28
    2162:	1f 91       	pop	r17
    2164:	0f 91       	pop	r16
    2166:	08 95       	ret

00002168 <printf>:
    2168:	cf 93       	push	r28
    216a:	df 93       	push	r29
    216c:	cd b7       	in	r28, 0x3d	; 61
    216e:	de b7       	in	r29, 0x3e	; 62
    2170:	fe 01       	movw	r30, r28
    2172:	36 96       	adiw	r30, 0x06	; 6
    2174:	61 91       	ld	r22, Z+
    2176:	71 91       	ld	r23, Z+
    2178:	80 91 47 07 	lds	r24, 0x0747
    217c:	90 91 48 07 	lds	r25, 0x0748
    2180:	af 01       	movw	r20, r30
    2182:	0e 94 2a 11 	call	0x2254	; 0x2254 <vfprintf>
    2186:	df 91       	pop	r29
    2188:	cf 91       	pop	r28
    218a:	08 95       	ret

0000218c <putchar>:
    218c:	60 91 47 07 	lds	r22, 0x0747
    2190:	70 91 48 07 	lds	r23, 0x0748
    2194:	0e 94 87 13 	call	0x270e	; 0x270e <fputc>
    2198:	08 95       	ret

0000219a <puts>:
    219a:	0f 93       	push	r16
    219c:	1f 93       	push	r17
    219e:	cf 93       	push	r28
    21a0:	df 93       	push	r29
    21a2:	8c 01       	movw	r16, r24
    21a4:	e0 91 47 07 	lds	r30, 0x0747
    21a8:	f0 91 48 07 	lds	r31, 0x0748
    21ac:	83 81       	ldd	r24, Z+3	; 0x03
    21ae:	81 ff       	sbrs	r24, 1
    21b0:	1a c0       	rjmp	.+52     	; 0x21e6 <puts+0x4c>
    21b2:	c0 e0       	ldi	r28, 0x00	; 0
    21b4:	d0 e0       	ldi	r29, 0x00	; 0
    21b6:	05 c0       	rjmp	.+10     	; 0x21c2 <puts+0x28>
    21b8:	19 95       	eicall
    21ba:	00 97       	sbiw	r24, 0x00	; 0
    21bc:	11 f0       	breq	.+4      	; 0x21c2 <puts+0x28>
    21be:	cf ef       	ldi	r28, 0xFF	; 255
    21c0:	df ef       	ldi	r29, 0xFF	; 255
    21c2:	f8 01       	movw	r30, r16
    21c4:	81 91       	ld	r24, Z+
    21c6:	8f 01       	movw	r16, r30
    21c8:	60 91 47 07 	lds	r22, 0x0747
    21cc:	70 91 48 07 	lds	r23, 0x0748
    21d0:	db 01       	movw	r26, r22
    21d2:	18 96       	adiw	r26, 0x08	; 8
    21d4:	ed 91       	ld	r30, X+
    21d6:	fc 91       	ld	r31, X
    21d8:	19 97       	sbiw	r26, 0x09	; 9
    21da:	88 23       	and	r24, r24
    21dc:	69 f7       	brne	.-38     	; 0x21b8 <puts+0x1e>
    21de:	8a e0       	ldi	r24, 0x0A	; 10
    21e0:	19 95       	eicall
    21e2:	00 97       	sbiw	r24, 0x00	; 0
    21e4:	11 f0       	breq	.+4      	; 0x21ea <puts+0x50>
    21e6:	cf ef       	ldi	r28, 0xFF	; 255
    21e8:	df ef       	ldi	r29, 0xFF	; 255
    21ea:	ce 01       	movw	r24, r28
    21ec:	df 91       	pop	r29
    21ee:	cf 91       	pop	r28
    21f0:	1f 91       	pop	r17
    21f2:	0f 91       	pop	r16
    21f4:	08 95       	ret

000021f6 <sprintf>:
    21f6:	0f 93       	push	r16
    21f8:	1f 93       	push	r17
    21fa:	cf 93       	push	r28
    21fc:	df 93       	push	r29
    21fe:	cd b7       	in	r28, 0x3d	; 61
    2200:	de b7       	in	r29, 0x3e	; 62
    2202:	2e 97       	sbiw	r28, 0x0e	; 14
    2204:	0f b6       	in	r0, 0x3f	; 63
    2206:	f8 94       	cli
    2208:	de bf       	out	0x3e, r29	; 62
    220a:	0f be       	out	0x3f, r0	; 63
    220c:	cd bf       	out	0x3d, r28	; 61
    220e:	0e 89       	ldd	r16, Y+22	; 0x16
    2210:	1f 89       	ldd	r17, Y+23	; 0x17
    2212:	86 e0       	ldi	r24, 0x06	; 6
    2214:	8c 83       	std	Y+4, r24	; 0x04
    2216:	1a 83       	std	Y+2, r17	; 0x02
    2218:	09 83       	std	Y+1, r16	; 0x01
    221a:	8f ef       	ldi	r24, 0xFF	; 255
    221c:	9f e7       	ldi	r25, 0x7F	; 127
    221e:	9e 83       	std	Y+6, r25	; 0x06
    2220:	8d 83       	std	Y+5, r24	; 0x05
    2222:	ae 01       	movw	r20, r28
    2224:	46 5e       	subi	r20, 0xE6	; 230
    2226:	5f 4f       	sbci	r21, 0xFF	; 255
    2228:	ce 01       	movw	r24, r28
    222a:	01 96       	adiw	r24, 0x01	; 1
    222c:	68 8d       	ldd	r22, Y+24	; 0x18
    222e:	79 8d       	ldd	r23, Y+25	; 0x19
    2230:	0e 94 2a 11 	call	0x2254	; 0x2254 <vfprintf>
    2234:	ef 81       	ldd	r30, Y+7	; 0x07
    2236:	f8 85       	ldd	r31, Y+8	; 0x08
    2238:	e0 0f       	add	r30, r16
    223a:	f1 1f       	adc	r31, r17
    223c:	10 82       	st	Z, r1
    223e:	2e 96       	adiw	r28, 0x0e	; 14
    2240:	0f b6       	in	r0, 0x3f	; 63
    2242:	f8 94       	cli
    2244:	de bf       	out	0x3e, r29	; 62
    2246:	0f be       	out	0x3f, r0	; 63
    2248:	cd bf       	out	0x3d, r28	; 61
    224a:	df 91       	pop	r29
    224c:	cf 91       	pop	r28
    224e:	1f 91       	pop	r17
    2250:	0f 91       	pop	r16
    2252:	08 95       	ret

00002254 <vfprintf>:
    2254:	2f 92       	push	r2
    2256:	3f 92       	push	r3
    2258:	4f 92       	push	r4
    225a:	5f 92       	push	r5
    225c:	6f 92       	push	r6
    225e:	7f 92       	push	r7
    2260:	8f 92       	push	r8
    2262:	9f 92       	push	r9
    2264:	af 92       	push	r10
    2266:	bf 92       	push	r11
    2268:	cf 92       	push	r12
    226a:	df 92       	push	r13
    226c:	ef 92       	push	r14
    226e:	ff 92       	push	r15
    2270:	0f 93       	push	r16
    2272:	1f 93       	push	r17
    2274:	cf 93       	push	r28
    2276:	df 93       	push	r29
    2278:	cd b7       	in	r28, 0x3d	; 61
    227a:	de b7       	in	r29, 0x3e	; 62
    227c:	2d 97       	sbiw	r28, 0x0d	; 13
    227e:	0f b6       	in	r0, 0x3f	; 63
    2280:	f8 94       	cli
    2282:	de bf       	out	0x3e, r29	; 62
    2284:	0f be       	out	0x3f, r0	; 63
    2286:	cd bf       	out	0x3d, r28	; 61
    2288:	3c 01       	movw	r6, r24
    228a:	7d 87       	std	Y+13, r23	; 0x0d
    228c:	6c 87       	std	Y+12, r22	; 0x0c
    228e:	5a 01       	movw	r10, r20
    2290:	fc 01       	movw	r30, r24
    2292:	17 82       	std	Z+7, r1	; 0x07
    2294:	16 82       	std	Z+6, r1	; 0x06
    2296:	83 81       	ldd	r24, Z+3	; 0x03
    2298:	81 ff       	sbrs	r24, 1
    229a:	c8 c1       	rjmp	.+912    	; 0x262c <vfprintf+0x3d8>
    229c:	2e 01       	movw	r4, r28
    229e:	08 94       	sec
    22a0:	41 1c       	adc	r4, r1
    22a2:	51 1c       	adc	r5, r1
    22a4:	f3 01       	movw	r30, r6
    22a6:	93 81       	ldd	r25, Z+3	; 0x03
    22a8:	ec 85       	ldd	r30, Y+12	; 0x0c
    22aa:	fd 85       	ldd	r31, Y+13	; 0x0d
    22ac:	93 fd       	sbrc	r25, 3
    22ae:	85 91       	lpm	r24, Z+
    22b0:	93 ff       	sbrs	r25, 3
    22b2:	81 91       	ld	r24, Z+
    22b4:	fd 87       	std	Y+13, r31	; 0x0d
    22b6:	ec 87       	std	Y+12, r30	; 0x0c
    22b8:	88 23       	and	r24, r24
    22ba:	09 f4       	brne	.+2      	; 0x22be <vfprintf+0x6a>
    22bc:	b3 c1       	rjmp	.+870    	; 0x2624 <vfprintf+0x3d0>
    22be:	85 32       	cpi	r24, 0x25	; 37
    22c0:	41 f4       	brne	.+16     	; 0x22d2 <vfprintf+0x7e>
    22c2:	93 fd       	sbrc	r25, 3
    22c4:	85 91       	lpm	r24, Z+
    22c6:	93 ff       	sbrs	r25, 3
    22c8:	81 91       	ld	r24, Z+
    22ca:	fd 87       	std	Y+13, r31	; 0x0d
    22cc:	ec 87       	std	Y+12, r30	; 0x0c
    22ce:	85 32       	cpi	r24, 0x25	; 37
    22d0:	29 f4       	brne	.+10     	; 0x22dc <vfprintf+0x88>
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	b3 01       	movw	r22, r6
    22d6:	0e 94 87 13 	call	0x270e	; 0x270e <fputc>
    22da:	e4 cf       	rjmp	.-56     	; 0x22a4 <vfprintf+0x50>
    22dc:	ff 24       	eor	r15, r15
    22de:	ee 24       	eor	r14, r14
    22e0:	10 e0       	ldi	r17, 0x00	; 0
    22e2:	10 32       	cpi	r17, 0x20	; 32
    22e4:	b0 f4       	brcc	.+44     	; 0x2312 <vfprintf+0xbe>
    22e6:	8b 32       	cpi	r24, 0x2B	; 43
    22e8:	69 f0       	breq	.+26     	; 0x2304 <vfprintf+0xb0>
    22ea:	8c 32       	cpi	r24, 0x2C	; 44
    22ec:	28 f4       	brcc	.+10     	; 0x22f8 <vfprintf+0xa4>
    22ee:	80 32       	cpi	r24, 0x20	; 32
    22f0:	51 f0       	breq	.+20     	; 0x2306 <vfprintf+0xb2>
    22f2:	83 32       	cpi	r24, 0x23	; 35
    22f4:	71 f4       	brne	.+28     	; 0x2312 <vfprintf+0xbe>
    22f6:	0b c0       	rjmp	.+22     	; 0x230e <vfprintf+0xba>
    22f8:	8d 32       	cpi	r24, 0x2D	; 45
    22fa:	39 f0       	breq	.+14     	; 0x230a <vfprintf+0xb6>
    22fc:	80 33       	cpi	r24, 0x30	; 48
    22fe:	49 f4       	brne	.+18     	; 0x2312 <vfprintf+0xbe>
    2300:	11 60       	ori	r17, 0x01	; 1
    2302:	2c c0       	rjmp	.+88     	; 0x235c <vfprintf+0x108>
    2304:	12 60       	ori	r17, 0x02	; 2
    2306:	14 60       	ori	r17, 0x04	; 4
    2308:	29 c0       	rjmp	.+82     	; 0x235c <vfprintf+0x108>
    230a:	18 60       	ori	r17, 0x08	; 8
    230c:	27 c0       	rjmp	.+78     	; 0x235c <vfprintf+0x108>
    230e:	10 61       	ori	r17, 0x10	; 16
    2310:	25 c0       	rjmp	.+74     	; 0x235c <vfprintf+0x108>
    2312:	17 fd       	sbrc	r17, 7
    2314:	2e c0       	rjmp	.+92     	; 0x2372 <vfprintf+0x11e>
    2316:	28 2f       	mov	r18, r24
    2318:	20 53       	subi	r18, 0x30	; 48
    231a:	2a 30       	cpi	r18, 0x0A	; 10
    231c:	98 f4       	brcc	.+38     	; 0x2344 <vfprintf+0xf0>
    231e:	16 ff       	sbrs	r17, 6
    2320:	08 c0       	rjmp	.+16     	; 0x2332 <vfprintf+0xde>
    2322:	8f 2d       	mov	r24, r15
    2324:	88 0f       	add	r24, r24
    2326:	f8 2e       	mov	r15, r24
    2328:	ff 0c       	add	r15, r15
    232a:	ff 0c       	add	r15, r15
    232c:	f8 0e       	add	r15, r24
    232e:	f2 0e       	add	r15, r18
    2330:	15 c0       	rjmp	.+42     	; 0x235c <vfprintf+0x108>
    2332:	8e 2d       	mov	r24, r14
    2334:	88 0f       	add	r24, r24
    2336:	e8 2e       	mov	r14, r24
    2338:	ee 0c       	add	r14, r14
    233a:	ee 0c       	add	r14, r14
    233c:	e8 0e       	add	r14, r24
    233e:	e2 0e       	add	r14, r18
    2340:	10 62       	ori	r17, 0x20	; 32
    2342:	0c c0       	rjmp	.+24     	; 0x235c <vfprintf+0x108>
    2344:	8e 32       	cpi	r24, 0x2E	; 46
    2346:	21 f4       	brne	.+8      	; 0x2350 <vfprintf+0xfc>
    2348:	16 fd       	sbrc	r17, 6
    234a:	6c c1       	rjmp	.+728    	; 0x2624 <vfprintf+0x3d0>
    234c:	10 64       	ori	r17, 0x40	; 64
    234e:	06 c0       	rjmp	.+12     	; 0x235c <vfprintf+0x108>
    2350:	8c 36       	cpi	r24, 0x6C	; 108
    2352:	11 f4       	brne	.+4      	; 0x2358 <vfprintf+0x104>
    2354:	10 68       	ori	r17, 0x80	; 128
    2356:	02 c0       	rjmp	.+4      	; 0x235c <vfprintf+0x108>
    2358:	88 36       	cpi	r24, 0x68	; 104
    235a:	59 f4       	brne	.+22     	; 0x2372 <vfprintf+0x11e>
    235c:	ec 85       	ldd	r30, Y+12	; 0x0c
    235e:	fd 85       	ldd	r31, Y+13	; 0x0d
    2360:	93 fd       	sbrc	r25, 3
    2362:	85 91       	lpm	r24, Z+
    2364:	93 ff       	sbrs	r25, 3
    2366:	81 91       	ld	r24, Z+
    2368:	fd 87       	std	Y+13, r31	; 0x0d
    236a:	ec 87       	std	Y+12, r30	; 0x0c
    236c:	88 23       	and	r24, r24
    236e:	09 f0       	breq	.+2      	; 0x2372 <vfprintf+0x11e>
    2370:	b8 cf       	rjmp	.-144    	; 0x22e2 <vfprintf+0x8e>
    2372:	98 2f       	mov	r25, r24
    2374:	95 54       	subi	r25, 0x45	; 69
    2376:	93 30       	cpi	r25, 0x03	; 3
    2378:	18 f0       	brcs	.+6      	; 0x2380 <vfprintf+0x12c>
    237a:	90 52       	subi	r25, 0x20	; 32
    237c:	93 30       	cpi	r25, 0x03	; 3
    237e:	38 f4       	brcc	.+14     	; 0x238e <vfprintf+0x13a>
    2380:	24 e0       	ldi	r18, 0x04	; 4
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	a2 0e       	add	r10, r18
    2386:	b3 1e       	adc	r11, r19
    2388:	3f e3       	ldi	r19, 0x3F	; 63
    238a:	39 83       	std	Y+1, r19	; 0x01
    238c:	0f c0       	rjmp	.+30     	; 0x23ac <vfprintf+0x158>
    238e:	83 36       	cpi	r24, 0x63	; 99
    2390:	31 f0       	breq	.+12     	; 0x239e <vfprintf+0x14a>
    2392:	83 37       	cpi	r24, 0x73	; 115
    2394:	81 f0       	breq	.+32     	; 0x23b6 <vfprintf+0x162>
    2396:	83 35       	cpi	r24, 0x53	; 83
    2398:	09 f0       	breq	.+2      	; 0x239c <vfprintf+0x148>
    239a:	5a c0       	rjmp	.+180    	; 0x2450 <vfprintf+0x1fc>
    239c:	22 c0       	rjmp	.+68     	; 0x23e2 <vfprintf+0x18e>
    239e:	f5 01       	movw	r30, r10
    23a0:	80 81       	ld	r24, Z
    23a2:	89 83       	std	Y+1, r24	; 0x01
    23a4:	22 e0       	ldi	r18, 0x02	; 2
    23a6:	30 e0       	ldi	r19, 0x00	; 0
    23a8:	a2 0e       	add	r10, r18
    23aa:	b3 1e       	adc	r11, r19
    23ac:	21 e0       	ldi	r18, 0x01	; 1
    23ae:	c2 2e       	mov	r12, r18
    23b0:	d1 2c       	mov	r13, r1
    23b2:	42 01       	movw	r8, r4
    23b4:	14 c0       	rjmp	.+40     	; 0x23de <vfprintf+0x18a>
    23b6:	92 e0       	ldi	r25, 0x02	; 2
    23b8:	29 2e       	mov	r2, r25
    23ba:	31 2c       	mov	r3, r1
    23bc:	2a 0c       	add	r2, r10
    23be:	3b 1c       	adc	r3, r11
    23c0:	f5 01       	movw	r30, r10
    23c2:	80 80       	ld	r8, Z
    23c4:	91 80       	ldd	r9, Z+1	; 0x01
    23c6:	16 ff       	sbrs	r17, 6
    23c8:	03 c0       	rjmp	.+6      	; 0x23d0 <vfprintf+0x17c>
    23ca:	6f 2d       	mov	r22, r15
    23cc:	70 e0       	ldi	r23, 0x00	; 0
    23ce:	02 c0       	rjmp	.+4      	; 0x23d4 <vfprintf+0x180>
    23d0:	6f ef       	ldi	r22, 0xFF	; 255
    23d2:	7f ef       	ldi	r23, 0xFF	; 255
    23d4:	c4 01       	movw	r24, r8
    23d6:	0e 94 3c 13 	call	0x2678	; 0x2678 <strnlen>
    23da:	6c 01       	movw	r12, r24
    23dc:	51 01       	movw	r10, r2
    23de:	1f 77       	andi	r17, 0x7F	; 127
    23e0:	15 c0       	rjmp	.+42     	; 0x240c <vfprintf+0x1b8>
    23e2:	82 e0       	ldi	r24, 0x02	; 2
    23e4:	28 2e       	mov	r2, r24
    23e6:	31 2c       	mov	r3, r1
    23e8:	2a 0c       	add	r2, r10
    23ea:	3b 1c       	adc	r3, r11
    23ec:	f5 01       	movw	r30, r10
    23ee:	80 80       	ld	r8, Z
    23f0:	91 80       	ldd	r9, Z+1	; 0x01
    23f2:	16 ff       	sbrs	r17, 6
    23f4:	03 c0       	rjmp	.+6      	; 0x23fc <vfprintf+0x1a8>
    23f6:	6f 2d       	mov	r22, r15
    23f8:	70 e0       	ldi	r23, 0x00	; 0
    23fa:	02 c0       	rjmp	.+4      	; 0x2400 <vfprintf+0x1ac>
    23fc:	6f ef       	ldi	r22, 0xFF	; 255
    23fe:	7f ef       	ldi	r23, 0xFF	; 255
    2400:	c4 01       	movw	r24, r8
    2402:	0e 94 31 13 	call	0x2662	; 0x2662 <strnlen_P>
    2406:	6c 01       	movw	r12, r24
    2408:	10 68       	ori	r17, 0x80	; 128
    240a:	51 01       	movw	r10, r2
    240c:	13 fd       	sbrc	r17, 3
    240e:	1c c0       	rjmp	.+56     	; 0x2448 <vfprintf+0x1f4>
    2410:	06 c0       	rjmp	.+12     	; 0x241e <vfprintf+0x1ca>
    2412:	80 e2       	ldi	r24, 0x20	; 32
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	b3 01       	movw	r22, r6
    2418:	0e 94 87 13 	call	0x270e	; 0x270e <fputc>
    241c:	ea 94       	dec	r14
    241e:	8e 2d       	mov	r24, r14
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	c8 16       	cp	r12, r24
    2424:	d9 06       	cpc	r13, r25
    2426:	a8 f3       	brcs	.-22     	; 0x2412 <vfprintf+0x1be>
    2428:	0f c0       	rjmp	.+30     	; 0x2448 <vfprintf+0x1f4>
    242a:	f4 01       	movw	r30, r8
    242c:	17 fd       	sbrc	r17, 7
    242e:	85 91       	lpm	r24, Z+
    2430:	17 ff       	sbrs	r17, 7
    2432:	81 91       	ld	r24, Z+
    2434:	4f 01       	movw	r8, r30
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	b3 01       	movw	r22, r6
    243a:	0e 94 87 13 	call	0x270e	; 0x270e <fputc>
    243e:	e1 10       	cpse	r14, r1
    2440:	ea 94       	dec	r14
    2442:	08 94       	sec
    2444:	c1 08       	sbc	r12, r1
    2446:	d1 08       	sbc	r13, r1
    2448:	c1 14       	cp	r12, r1
    244a:	d1 04       	cpc	r13, r1
    244c:	71 f7       	brne	.-36     	; 0x242a <vfprintf+0x1d6>
    244e:	e7 c0       	rjmp	.+462    	; 0x261e <vfprintf+0x3ca>
    2450:	84 36       	cpi	r24, 0x64	; 100
    2452:	11 f0       	breq	.+4      	; 0x2458 <vfprintf+0x204>
    2454:	89 36       	cpi	r24, 0x69	; 105
    2456:	51 f5       	brne	.+84     	; 0x24ac <vfprintf+0x258>
    2458:	f5 01       	movw	r30, r10
    245a:	17 ff       	sbrs	r17, 7
    245c:	07 c0       	rjmp	.+14     	; 0x246c <vfprintf+0x218>
    245e:	80 81       	ld	r24, Z
    2460:	91 81       	ldd	r25, Z+1	; 0x01
    2462:	a2 81       	ldd	r26, Z+2	; 0x02
    2464:	b3 81       	ldd	r27, Z+3	; 0x03
    2466:	24 e0       	ldi	r18, 0x04	; 4
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	08 c0       	rjmp	.+16     	; 0x247c <vfprintf+0x228>
    246c:	80 81       	ld	r24, Z
    246e:	91 81       	ldd	r25, Z+1	; 0x01
    2470:	aa 27       	eor	r26, r26
    2472:	97 fd       	sbrc	r25, 7
    2474:	a0 95       	com	r26
    2476:	ba 2f       	mov	r27, r26
    2478:	22 e0       	ldi	r18, 0x02	; 2
    247a:	30 e0       	ldi	r19, 0x00	; 0
    247c:	a2 0e       	add	r10, r18
    247e:	b3 1e       	adc	r11, r19
    2480:	01 2f       	mov	r16, r17
    2482:	0f 76       	andi	r16, 0x6F	; 111
    2484:	b7 ff       	sbrs	r27, 7
    2486:	08 c0       	rjmp	.+16     	; 0x2498 <vfprintf+0x244>
    2488:	b0 95       	com	r27
    248a:	a0 95       	com	r26
    248c:	90 95       	com	r25
    248e:	81 95       	neg	r24
    2490:	9f 4f       	sbci	r25, 0xFF	; 255
    2492:	af 4f       	sbci	r26, 0xFF	; 255
    2494:	bf 4f       	sbci	r27, 0xFF	; 255
    2496:	00 68       	ori	r16, 0x80	; 128
    2498:	bc 01       	movw	r22, r24
    249a:	cd 01       	movw	r24, r26
    249c:	a2 01       	movw	r20, r4
    249e:	2a e0       	ldi	r18, 0x0A	; 10
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	0e 94 b3 13 	call	0x2766	; 0x2766 <__ultoa_invert>
    24a6:	d8 2e       	mov	r13, r24
    24a8:	d4 18       	sub	r13, r4
    24aa:	3f c0       	rjmp	.+126    	; 0x252a <vfprintf+0x2d6>
    24ac:	85 37       	cpi	r24, 0x75	; 117
    24ae:	21 f4       	brne	.+8      	; 0x24b8 <vfprintf+0x264>
    24b0:	1f 7e       	andi	r17, 0xEF	; 239
    24b2:	2a e0       	ldi	r18, 0x0A	; 10
    24b4:	30 e0       	ldi	r19, 0x00	; 0
    24b6:	20 c0       	rjmp	.+64     	; 0x24f8 <vfprintf+0x2a4>
    24b8:	19 7f       	andi	r17, 0xF9	; 249
    24ba:	8f 36       	cpi	r24, 0x6F	; 111
    24bc:	a9 f0       	breq	.+42     	; 0x24e8 <vfprintf+0x294>
    24be:	80 37       	cpi	r24, 0x70	; 112
    24c0:	20 f4       	brcc	.+8      	; 0x24ca <vfprintf+0x276>
    24c2:	88 35       	cpi	r24, 0x58	; 88
    24c4:	09 f0       	breq	.+2      	; 0x24c8 <vfprintf+0x274>
    24c6:	ae c0       	rjmp	.+348    	; 0x2624 <vfprintf+0x3d0>
    24c8:	0b c0       	rjmp	.+22     	; 0x24e0 <vfprintf+0x28c>
    24ca:	80 37       	cpi	r24, 0x70	; 112
    24cc:	21 f0       	breq	.+8      	; 0x24d6 <vfprintf+0x282>
    24ce:	88 37       	cpi	r24, 0x78	; 120
    24d0:	09 f0       	breq	.+2      	; 0x24d4 <vfprintf+0x280>
    24d2:	a8 c0       	rjmp	.+336    	; 0x2624 <vfprintf+0x3d0>
    24d4:	01 c0       	rjmp	.+2      	; 0x24d8 <vfprintf+0x284>
    24d6:	10 61       	ori	r17, 0x10	; 16
    24d8:	14 ff       	sbrs	r17, 4
    24da:	09 c0       	rjmp	.+18     	; 0x24ee <vfprintf+0x29a>
    24dc:	14 60       	ori	r17, 0x04	; 4
    24de:	07 c0       	rjmp	.+14     	; 0x24ee <vfprintf+0x29a>
    24e0:	14 ff       	sbrs	r17, 4
    24e2:	08 c0       	rjmp	.+16     	; 0x24f4 <vfprintf+0x2a0>
    24e4:	16 60       	ori	r17, 0x06	; 6
    24e6:	06 c0       	rjmp	.+12     	; 0x24f4 <vfprintf+0x2a0>
    24e8:	28 e0       	ldi	r18, 0x08	; 8
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	05 c0       	rjmp	.+10     	; 0x24f8 <vfprintf+0x2a4>
    24ee:	20 e1       	ldi	r18, 0x10	; 16
    24f0:	30 e0       	ldi	r19, 0x00	; 0
    24f2:	02 c0       	rjmp	.+4      	; 0x24f8 <vfprintf+0x2a4>
    24f4:	20 e1       	ldi	r18, 0x10	; 16
    24f6:	32 e0       	ldi	r19, 0x02	; 2
    24f8:	f5 01       	movw	r30, r10
    24fa:	17 ff       	sbrs	r17, 7
    24fc:	07 c0       	rjmp	.+14     	; 0x250c <vfprintf+0x2b8>
    24fe:	60 81       	ld	r22, Z
    2500:	71 81       	ldd	r23, Z+1	; 0x01
    2502:	82 81       	ldd	r24, Z+2	; 0x02
    2504:	93 81       	ldd	r25, Z+3	; 0x03
    2506:	44 e0       	ldi	r20, 0x04	; 4
    2508:	50 e0       	ldi	r21, 0x00	; 0
    250a:	06 c0       	rjmp	.+12     	; 0x2518 <vfprintf+0x2c4>
    250c:	60 81       	ld	r22, Z
    250e:	71 81       	ldd	r23, Z+1	; 0x01
    2510:	80 e0       	ldi	r24, 0x00	; 0
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	42 e0       	ldi	r20, 0x02	; 2
    2516:	50 e0       	ldi	r21, 0x00	; 0
    2518:	a4 0e       	add	r10, r20
    251a:	b5 1e       	adc	r11, r21
    251c:	a2 01       	movw	r20, r4
    251e:	0e 94 b3 13 	call	0x2766	; 0x2766 <__ultoa_invert>
    2522:	d8 2e       	mov	r13, r24
    2524:	d4 18       	sub	r13, r4
    2526:	01 2f       	mov	r16, r17
    2528:	0f 77       	andi	r16, 0x7F	; 127
    252a:	06 ff       	sbrs	r16, 6
    252c:	09 c0       	rjmp	.+18     	; 0x2540 <vfprintf+0x2ec>
    252e:	0e 7f       	andi	r16, 0xFE	; 254
    2530:	df 14       	cp	r13, r15
    2532:	30 f4       	brcc	.+12     	; 0x2540 <vfprintf+0x2ec>
    2534:	04 ff       	sbrs	r16, 4
    2536:	06 c0       	rjmp	.+12     	; 0x2544 <vfprintf+0x2f0>
    2538:	02 fd       	sbrc	r16, 2
    253a:	04 c0       	rjmp	.+8      	; 0x2544 <vfprintf+0x2f0>
    253c:	0f 7e       	andi	r16, 0xEF	; 239
    253e:	02 c0       	rjmp	.+4      	; 0x2544 <vfprintf+0x2f0>
    2540:	1d 2d       	mov	r17, r13
    2542:	01 c0       	rjmp	.+2      	; 0x2546 <vfprintf+0x2f2>
    2544:	1f 2d       	mov	r17, r15
    2546:	80 2f       	mov	r24, r16
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	04 ff       	sbrs	r16, 4
    254c:	0c c0       	rjmp	.+24     	; 0x2566 <vfprintf+0x312>
    254e:	fe 01       	movw	r30, r28
    2550:	ed 0d       	add	r30, r13
    2552:	f1 1d       	adc	r31, r1
    2554:	20 81       	ld	r18, Z
    2556:	20 33       	cpi	r18, 0x30	; 48
    2558:	11 f4       	brne	.+4      	; 0x255e <vfprintf+0x30a>
    255a:	09 7e       	andi	r16, 0xE9	; 233
    255c:	09 c0       	rjmp	.+18     	; 0x2570 <vfprintf+0x31c>
    255e:	02 ff       	sbrs	r16, 2
    2560:	06 c0       	rjmp	.+12     	; 0x256e <vfprintf+0x31a>
    2562:	1e 5f       	subi	r17, 0xFE	; 254
    2564:	05 c0       	rjmp	.+10     	; 0x2570 <vfprintf+0x31c>
    2566:	86 78       	andi	r24, 0x86	; 134
    2568:	90 70       	andi	r25, 0x00	; 0
    256a:	00 97       	sbiw	r24, 0x00	; 0
    256c:	09 f0       	breq	.+2      	; 0x2570 <vfprintf+0x31c>
    256e:	1f 5f       	subi	r17, 0xFF	; 255
    2570:	80 2e       	mov	r8, r16
    2572:	99 24       	eor	r9, r9
    2574:	03 fd       	sbrc	r16, 3
    2576:	12 c0       	rjmp	.+36     	; 0x259c <vfprintf+0x348>
    2578:	00 ff       	sbrs	r16, 0
    257a:	0d c0       	rjmp	.+26     	; 0x2596 <vfprintf+0x342>
    257c:	fd 2c       	mov	r15, r13
    257e:	1e 15       	cp	r17, r14
    2580:	50 f4       	brcc	.+20     	; 0x2596 <vfprintf+0x342>
    2582:	fe 0c       	add	r15, r14
    2584:	f1 1a       	sub	r15, r17
    2586:	1e 2d       	mov	r17, r14
    2588:	06 c0       	rjmp	.+12     	; 0x2596 <vfprintf+0x342>
    258a:	80 e2       	ldi	r24, 0x20	; 32
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	b3 01       	movw	r22, r6
    2590:	0e 94 87 13 	call	0x270e	; 0x270e <fputc>
    2594:	1f 5f       	subi	r17, 0xFF	; 255
    2596:	1e 15       	cp	r17, r14
    2598:	c0 f3       	brcs	.-16     	; 0x258a <vfprintf+0x336>
    259a:	04 c0       	rjmp	.+8      	; 0x25a4 <vfprintf+0x350>
    259c:	1e 15       	cp	r17, r14
    259e:	10 f4       	brcc	.+4      	; 0x25a4 <vfprintf+0x350>
    25a0:	e1 1a       	sub	r14, r17
    25a2:	01 c0       	rjmp	.+2      	; 0x25a6 <vfprintf+0x352>
    25a4:	ee 24       	eor	r14, r14
    25a6:	84 fe       	sbrs	r8, 4
    25a8:	0f c0       	rjmp	.+30     	; 0x25c8 <vfprintf+0x374>
    25aa:	80 e3       	ldi	r24, 0x30	; 48
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	b3 01       	movw	r22, r6
    25b0:	0e 94 87 13 	call	0x270e	; 0x270e <fputc>
    25b4:	82 fe       	sbrs	r8, 2
    25b6:	1f c0       	rjmp	.+62     	; 0x25f6 <vfprintf+0x3a2>
    25b8:	81 fe       	sbrs	r8, 1
    25ba:	03 c0       	rjmp	.+6      	; 0x25c2 <vfprintf+0x36e>
    25bc:	88 e5       	ldi	r24, 0x58	; 88
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	10 c0       	rjmp	.+32     	; 0x25e2 <vfprintf+0x38e>
    25c2:	88 e7       	ldi	r24, 0x78	; 120
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	0d c0       	rjmp	.+26     	; 0x25e2 <vfprintf+0x38e>
    25c8:	c4 01       	movw	r24, r8
    25ca:	86 78       	andi	r24, 0x86	; 134
    25cc:	90 70       	andi	r25, 0x00	; 0
    25ce:	00 97       	sbiw	r24, 0x00	; 0
    25d0:	91 f0       	breq	.+36     	; 0x25f6 <vfprintf+0x3a2>
    25d2:	81 fc       	sbrc	r8, 1
    25d4:	02 c0       	rjmp	.+4      	; 0x25da <vfprintf+0x386>
    25d6:	80 e2       	ldi	r24, 0x20	; 32
    25d8:	01 c0       	rjmp	.+2      	; 0x25dc <vfprintf+0x388>
    25da:	8b e2       	ldi	r24, 0x2B	; 43
    25dc:	07 fd       	sbrc	r16, 7
    25de:	8d e2       	ldi	r24, 0x2D	; 45
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	b3 01       	movw	r22, r6
    25e4:	0e 94 87 13 	call	0x270e	; 0x270e <fputc>
    25e8:	06 c0       	rjmp	.+12     	; 0x25f6 <vfprintf+0x3a2>
    25ea:	80 e3       	ldi	r24, 0x30	; 48
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	b3 01       	movw	r22, r6
    25f0:	0e 94 87 13 	call	0x270e	; 0x270e <fputc>
    25f4:	fa 94       	dec	r15
    25f6:	df 14       	cp	r13, r15
    25f8:	c0 f3       	brcs	.-16     	; 0x25ea <vfprintf+0x396>
    25fa:	da 94       	dec	r13
    25fc:	f2 01       	movw	r30, r4
    25fe:	ed 0d       	add	r30, r13
    2600:	f1 1d       	adc	r31, r1
    2602:	80 81       	ld	r24, Z
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	b3 01       	movw	r22, r6
    2608:	0e 94 87 13 	call	0x270e	; 0x270e <fputc>
    260c:	dd 20       	and	r13, r13
    260e:	a9 f7       	brne	.-22     	; 0x25fa <vfprintf+0x3a6>
    2610:	06 c0       	rjmp	.+12     	; 0x261e <vfprintf+0x3ca>
    2612:	80 e2       	ldi	r24, 0x20	; 32
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	b3 01       	movw	r22, r6
    2618:	0e 94 87 13 	call	0x270e	; 0x270e <fputc>
    261c:	ea 94       	dec	r14
    261e:	ee 20       	and	r14, r14
    2620:	c1 f7       	brne	.-16     	; 0x2612 <vfprintf+0x3be>
    2622:	40 ce       	rjmp	.-896    	; 0x22a4 <vfprintf+0x50>
    2624:	f3 01       	movw	r30, r6
    2626:	86 81       	ldd	r24, Z+6	; 0x06
    2628:	97 81       	ldd	r25, Z+7	; 0x07
    262a:	02 c0       	rjmp	.+4      	; 0x2630 <vfprintf+0x3dc>
    262c:	8f ef       	ldi	r24, 0xFF	; 255
    262e:	9f ef       	ldi	r25, 0xFF	; 255
    2630:	2d 96       	adiw	r28, 0x0d	; 13
    2632:	0f b6       	in	r0, 0x3f	; 63
    2634:	f8 94       	cli
    2636:	de bf       	out	0x3e, r29	; 62
    2638:	0f be       	out	0x3f, r0	; 63
    263a:	cd bf       	out	0x3d, r28	; 61
    263c:	df 91       	pop	r29
    263e:	cf 91       	pop	r28
    2640:	1f 91       	pop	r17
    2642:	0f 91       	pop	r16
    2644:	ff 90       	pop	r15
    2646:	ef 90       	pop	r14
    2648:	df 90       	pop	r13
    264a:	cf 90       	pop	r12
    264c:	bf 90       	pop	r11
    264e:	af 90       	pop	r10
    2650:	9f 90       	pop	r9
    2652:	8f 90       	pop	r8
    2654:	7f 90       	pop	r7
    2656:	6f 90       	pop	r6
    2658:	5f 90       	pop	r5
    265a:	4f 90       	pop	r4
    265c:	3f 90       	pop	r3
    265e:	2f 90       	pop	r2
    2660:	08 95       	ret

00002662 <strnlen_P>:
    2662:	fc 01       	movw	r30, r24
    2664:	05 90       	lpm	r0, Z+
    2666:	61 50       	subi	r22, 0x01	; 1
    2668:	70 40       	sbci	r23, 0x00	; 0
    266a:	01 10       	cpse	r0, r1
    266c:	d8 f7       	brcc	.-10     	; 0x2664 <strnlen_P+0x2>
    266e:	80 95       	com	r24
    2670:	90 95       	com	r25
    2672:	8e 0f       	add	r24, r30
    2674:	9f 1f       	adc	r25, r31
    2676:	08 95       	ret

00002678 <strnlen>:
    2678:	fc 01       	movw	r30, r24
    267a:	61 50       	subi	r22, 0x01	; 1
    267c:	70 40       	sbci	r23, 0x00	; 0
    267e:	01 90       	ld	r0, Z+
    2680:	01 10       	cpse	r0, r1
    2682:	d8 f7       	brcc	.-10     	; 0x267a <strnlen+0x2>
    2684:	80 95       	com	r24
    2686:	90 95       	com	r25
    2688:	8e 0f       	add	r24, r30
    268a:	9f 1f       	adc	r25, r31
    268c:	08 95       	ret

0000268e <fgetc>:
    268e:	cf 93       	push	r28
    2690:	df 93       	push	r29
    2692:	ec 01       	movw	r28, r24
    2694:	2b 81       	ldd	r18, Y+3	; 0x03
    2696:	20 ff       	sbrs	r18, 0
    2698:	35 c0       	rjmp	.+106    	; 0x2704 <fgetc+0x76>
    269a:	26 ff       	sbrs	r18, 6
    269c:	09 c0       	rjmp	.+18     	; 0x26b0 <fgetc+0x22>
    269e:	2f 7b       	andi	r18, 0xBF	; 191
    26a0:	2b 83       	std	Y+3, r18	; 0x03
    26a2:	8e 81       	ldd	r24, Y+6	; 0x06
    26a4:	9f 81       	ldd	r25, Y+7	; 0x07
    26a6:	01 96       	adiw	r24, 0x01	; 1
    26a8:	9f 83       	std	Y+7, r25	; 0x07
    26aa:	8e 83       	std	Y+6, r24	; 0x06
    26ac:	8a 81       	ldd	r24, Y+2	; 0x02
    26ae:	28 c0       	rjmp	.+80     	; 0x2700 <fgetc+0x72>
    26b0:	22 ff       	sbrs	r18, 2
    26b2:	0f c0       	rjmp	.+30     	; 0x26d2 <fgetc+0x44>
    26b4:	e8 81       	ld	r30, Y
    26b6:	f9 81       	ldd	r31, Y+1	; 0x01
    26b8:	80 81       	ld	r24, Z
    26ba:	99 27       	eor	r25, r25
    26bc:	87 fd       	sbrc	r24, 7
    26be:	90 95       	com	r25
    26c0:	00 97       	sbiw	r24, 0x00	; 0
    26c2:	19 f4       	brne	.+6      	; 0x26ca <fgetc+0x3c>
    26c4:	20 62       	ori	r18, 0x20	; 32
    26c6:	2b 83       	std	Y+3, r18	; 0x03
    26c8:	1d c0       	rjmp	.+58     	; 0x2704 <fgetc+0x76>
    26ca:	31 96       	adiw	r30, 0x01	; 1
    26cc:	f9 83       	std	Y+1, r31	; 0x01
    26ce:	e8 83       	st	Y, r30
    26d0:	11 c0       	rjmp	.+34     	; 0x26f4 <fgetc+0x66>
    26d2:	ea 85       	ldd	r30, Y+10	; 0x0a
    26d4:	fb 85       	ldd	r31, Y+11	; 0x0b
    26d6:	ce 01       	movw	r24, r28
    26d8:	19 95       	eicall
    26da:	97 ff       	sbrs	r25, 7
    26dc:	0b c0       	rjmp	.+22     	; 0x26f4 <fgetc+0x66>
    26de:	2b 81       	ldd	r18, Y+3	; 0x03
    26e0:	3f ef       	ldi	r19, 0xFF	; 255
    26e2:	8f 3f       	cpi	r24, 0xFF	; 255
    26e4:	93 07       	cpc	r25, r19
    26e6:	11 f4       	brne	.+4      	; 0x26ec <fgetc+0x5e>
    26e8:	80 e1       	ldi	r24, 0x10	; 16
    26ea:	01 c0       	rjmp	.+2      	; 0x26ee <fgetc+0x60>
    26ec:	80 e2       	ldi	r24, 0x20	; 32
    26ee:	82 2b       	or	r24, r18
    26f0:	8b 83       	std	Y+3, r24	; 0x03
    26f2:	08 c0       	rjmp	.+16     	; 0x2704 <fgetc+0x76>
    26f4:	2e 81       	ldd	r18, Y+6	; 0x06
    26f6:	3f 81       	ldd	r19, Y+7	; 0x07
    26f8:	2f 5f       	subi	r18, 0xFF	; 255
    26fa:	3f 4f       	sbci	r19, 0xFF	; 255
    26fc:	3f 83       	std	Y+7, r19	; 0x07
    26fe:	2e 83       	std	Y+6, r18	; 0x06
    2700:	90 e0       	ldi	r25, 0x00	; 0
    2702:	02 c0       	rjmp	.+4      	; 0x2708 <fgetc+0x7a>
    2704:	8f ef       	ldi	r24, 0xFF	; 255
    2706:	9f ef       	ldi	r25, 0xFF	; 255
    2708:	df 91       	pop	r29
    270a:	cf 91       	pop	r28
    270c:	08 95       	ret

0000270e <fputc>:
    270e:	0f 93       	push	r16
    2710:	1f 93       	push	r17
    2712:	cf 93       	push	r28
    2714:	df 93       	push	r29
    2716:	8c 01       	movw	r16, r24
    2718:	eb 01       	movw	r28, r22
    271a:	8b 81       	ldd	r24, Y+3	; 0x03
    271c:	81 ff       	sbrs	r24, 1
    271e:	1b c0       	rjmp	.+54     	; 0x2756 <fputc+0x48>
    2720:	82 ff       	sbrs	r24, 2
    2722:	0d c0       	rjmp	.+26     	; 0x273e <fputc+0x30>
    2724:	2e 81       	ldd	r18, Y+6	; 0x06
    2726:	3f 81       	ldd	r19, Y+7	; 0x07
    2728:	8c 81       	ldd	r24, Y+4	; 0x04
    272a:	9d 81       	ldd	r25, Y+5	; 0x05
    272c:	28 17       	cp	r18, r24
    272e:	39 07       	cpc	r19, r25
    2730:	64 f4       	brge	.+24     	; 0x274a <fputc+0x3c>
    2732:	e8 81       	ld	r30, Y
    2734:	f9 81       	ldd	r31, Y+1	; 0x01
    2736:	01 93       	st	Z+, r16
    2738:	f9 83       	std	Y+1, r31	; 0x01
    273a:	e8 83       	st	Y, r30
    273c:	06 c0       	rjmp	.+12     	; 0x274a <fputc+0x3c>
    273e:	e8 85       	ldd	r30, Y+8	; 0x08
    2740:	f9 85       	ldd	r31, Y+9	; 0x09
    2742:	80 2f       	mov	r24, r16
    2744:	19 95       	eicall
    2746:	00 97       	sbiw	r24, 0x00	; 0
    2748:	31 f4       	brne	.+12     	; 0x2756 <fputc+0x48>
    274a:	8e 81       	ldd	r24, Y+6	; 0x06
    274c:	9f 81       	ldd	r25, Y+7	; 0x07
    274e:	01 96       	adiw	r24, 0x01	; 1
    2750:	9f 83       	std	Y+7, r25	; 0x07
    2752:	8e 83       	std	Y+6, r24	; 0x06
    2754:	02 c0       	rjmp	.+4      	; 0x275a <fputc+0x4c>
    2756:	0f ef       	ldi	r16, 0xFF	; 255
    2758:	1f ef       	ldi	r17, 0xFF	; 255
    275a:	c8 01       	movw	r24, r16
    275c:	df 91       	pop	r29
    275e:	cf 91       	pop	r28
    2760:	1f 91       	pop	r17
    2762:	0f 91       	pop	r16
    2764:	08 95       	ret

00002766 <__ultoa_invert>:
    2766:	fa 01       	movw	r30, r20
    2768:	aa 27       	eor	r26, r26
    276a:	28 30       	cpi	r18, 0x08	; 8
    276c:	51 f1       	breq	.+84     	; 0x27c2 <__ultoa_invert+0x5c>
    276e:	20 31       	cpi	r18, 0x10	; 16
    2770:	81 f1       	breq	.+96     	; 0x27d2 <__ultoa_invert+0x6c>
    2772:	e8 94       	clt
    2774:	6f 93       	push	r22
    2776:	6e 7f       	andi	r22, 0xFE	; 254
    2778:	6e 5f       	subi	r22, 0xFE	; 254
    277a:	7f 4f       	sbci	r23, 0xFF	; 255
    277c:	8f 4f       	sbci	r24, 0xFF	; 255
    277e:	9f 4f       	sbci	r25, 0xFF	; 255
    2780:	af 4f       	sbci	r26, 0xFF	; 255
    2782:	b1 e0       	ldi	r27, 0x01	; 1
    2784:	3e d0       	rcall	.+124    	; 0x2802 <__ultoa_invert+0x9c>
    2786:	b4 e0       	ldi	r27, 0x04	; 4
    2788:	3c d0       	rcall	.+120    	; 0x2802 <__ultoa_invert+0x9c>
    278a:	67 0f       	add	r22, r23
    278c:	78 1f       	adc	r23, r24
    278e:	89 1f       	adc	r24, r25
    2790:	9a 1f       	adc	r25, r26
    2792:	a1 1d       	adc	r26, r1
    2794:	68 0f       	add	r22, r24
    2796:	79 1f       	adc	r23, r25
    2798:	8a 1f       	adc	r24, r26
    279a:	91 1d       	adc	r25, r1
    279c:	a1 1d       	adc	r26, r1
    279e:	6a 0f       	add	r22, r26
    27a0:	71 1d       	adc	r23, r1
    27a2:	81 1d       	adc	r24, r1
    27a4:	91 1d       	adc	r25, r1
    27a6:	a1 1d       	adc	r26, r1
    27a8:	20 d0       	rcall	.+64     	; 0x27ea <__ultoa_invert+0x84>
    27aa:	09 f4       	brne	.+2      	; 0x27ae <__ultoa_invert+0x48>
    27ac:	68 94       	set
    27ae:	3f 91       	pop	r19
    27b0:	2a e0       	ldi	r18, 0x0A	; 10
    27b2:	26 9f       	mul	r18, r22
    27b4:	11 24       	eor	r1, r1
    27b6:	30 19       	sub	r19, r0
    27b8:	30 5d       	subi	r19, 0xD0	; 208
    27ba:	31 93       	st	Z+, r19
    27bc:	de f6       	brtc	.-74     	; 0x2774 <__ultoa_invert+0xe>
    27be:	cf 01       	movw	r24, r30
    27c0:	08 95       	ret
    27c2:	46 2f       	mov	r20, r22
    27c4:	47 70       	andi	r20, 0x07	; 7
    27c6:	40 5d       	subi	r20, 0xD0	; 208
    27c8:	41 93       	st	Z+, r20
    27ca:	b3 e0       	ldi	r27, 0x03	; 3
    27cc:	0f d0       	rcall	.+30     	; 0x27ec <__ultoa_invert+0x86>
    27ce:	c9 f7       	brne	.-14     	; 0x27c2 <__ultoa_invert+0x5c>
    27d0:	f6 cf       	rjmp	.-20     	; 0x27be <__ultoa_invert+0x58>
    27d2:	46 2f       	mov	r20, r22
    27d4:	4f 70       	andi	r20, 0x0F	; 15
    27d6:	40 5d       	subi	r20, 0xD0	; 208
    27d8:	4a 33       	cpi	r20, 0x3A	; 58
    27da:	18 f0       	brcs	.+6      	; 0x27e2 <__ultoa_invert+0x7c>
    27dc:	49 5d       	subi	r20, 0xD9	; 217
    27de:	31 fd       	sbrc	r19, 1
    27e0:	40 52       	subi	r20, 0x20	; 32
    27e2:	41 93       	st	Z+, r20
    27e4:	02 d0       	rcall	.+4      	; 0x27ea <__ultoa_invert+0x84>
    27e6:	a9 f7       	brne	.-22     	; 0x27d2 <__ultoa_invert+0x6c>
    27e8:	ea cf       	rjmp	.-44     	; 0x27be <__ultoa_invert+0x58>
    27ea:	b4 e0       	ldi	r27, 0x04	; 4
    27ec:	a6 95       	lsr	r26
    27ee:	97 95       	ror	r25
    27f0:	87 95       	ror	r24
    27f2:	77 95       	ror	r23
    27f4:	67 95       	ror	r22
    27f6:	ba 95       	dec	r27
    27f8:	c9 f7       	brne	.-14     	; 0x27ec <__ultoa_invert+0x86>
    27fa:	00 97       	sbiw	r24, 0x00	; 0
    27fc:	61 05       	cpc	r22, r1
    27fe:	71 05       	cpc	r23, r1
    2800:	08 95       	ret
    2802:	9b 01       	movw	r18, r22
    2804:	ac 01       	movw	r20, r24
    2806:	0a 2e       	mov	r0, r26
    2808:	06 94       	lsr	r0
    280a:	57 95       	ror	r21
    280c:	47 95       	ror	r20
    280e:	37 95       	ror	r19
    2810:	27 95       	ror	r18
    2812:	ba 95       	dec	r27
    2814:	c9 f7       	brne	.-14     	; 0x2808 <__ultoa_invert+0xa2>
    2816:	62 0f       	add	r22, r18
    2818:	73 1f       	adc	r23, r19
    281a:	84 1f       	adc	r24, r20
    281c:	95 1f       	adc	r25, r21
    281e:	a0 1d       	adc	r26, r0
    2820:	08 95       	ret

00002822 <_exit>:
    2822:	f8 94       	cli

00002824 <__stop_program>:
    2824:	ff cf       	rjmp	.-2      	; 0x2824 <__stop_program>
