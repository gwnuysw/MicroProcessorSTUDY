
Project2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  00000220  000002b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000220  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800206  00800206  000002ba  2**0
                  ALLOC
  3 .stab         000006e4  00000000  00000000  000002bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  000009a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00000a28  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005e3  00000000  00000000  00000ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000207  00000000  00000000  000010cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ea  00000000  00000000  000012d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f0  00000000  00000000  000016bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000014d  00000000  00000000  000017ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000fa  00000000  00000000  000018f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  000019f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
   8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
   c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  3c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  64:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  6c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  74:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 e2       	ldi	r30, 0x20	; 32
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 30       	cpi	r26, 0x06	; 6
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
 110:	12 e0       	ldi	r17, 0x02	; 2
 112:	a6 e0       	ldi	r26, 0x06	; 6
 114:	b2 e0       	ldi	r27, 0x02	; 2
 116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
 118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
 11a:	a7 30       	cpi	r26, 0x07	; 7
 11c:	b1 07       	cpc	r27, r17
 11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
 120:	0e 94 fd 00 	call	0x1fa	; 0x1fa <main>
 124:	0c 94 0e 01 	jmp	0x21c	; 0x21c <_exit>

00000128 <__bad_interrupt>:
 128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <led_init>:
#include "led.h"

static uint8_t Leds;

void led_init() {
	DDRL = PORTL = 0xff;
 12c:	8f ef       	ldi	r24, 0xFF	; 255
 12e:	80 93 0b 01 	sts	0x010B, r24
 132:	80 93 0a 01 	sts	0x010A, r24
}
 136:	08 95       	ret

00000138 <led_on_all>:
void led_on_all(void) {
	Leds = PORTL = 0x00;
 138:	10 92 0b 01 	sts	0x010B, r1
 13c:	10 92 06 02 	sts	0x0206, r1
}
 140:	08 95       	ret

00000142 <led_off_all>:
void led_off_all(void) {
	 Leds = PORTL = 0xff;
 142:	8f ef       	ldi	r24, 0xFF	; 255
 144:	80 93 0b 01 	sts	0x010B, r24
 148:	80 93 06 02 	sts	0x0206, r24
}
 14c:	08 95       	ret

0000014e <led_on>:
void led_on(uint8_t led_no) {
	Leds &= ~(1 << led_no);
 14e:	21 e0       	ldi	r18, 0x01	; 1
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	02 c0       	rjmp	.+4      	; 0x158 <led_on+0xa>
 154:	22 0f       	add	r18, r18
 156:	33 1f       	adc	r19, r19
 158:	8a 95       	dec	r24
 15a:	e2 f7       	brpl	.-8      	; 0x154 <led_on+0x6>
 15c:	20 95       	com	r18
 15e:	80 91 06 02 	lds	r24, 0x0206
 162:	28 23       	and	r18, r24
 164:	20 93 06 02 	sts	0x0206, r18
	PORTL = Leds;
 168:	20 93 0b 01 	sts	0x010B, r18
}
 16c:	08 95       	ret

0000016e <led_off>:
void led_off(uint8_t led_no) {
	Leds |= (1 << led_no);
 16e:	21 e0       	ldi	r18, 0x01	; 1
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	02 c0       	rjmp	.+4      	; 0x178 <led_off+0xa>
 174:	22 0f       	add	r18, r18
 176:	33 1f       	adc	r19, r19
 178:	8a 95       	dec	r24
 17a:	e2 f7       	brpl	.-8      	; 0x174 <led_off+0x6>
 17c:	80 91 06 02 	lds	r24, 0x0206
 180:	82 2b       	or	r24, r18
 182:	80 93 06 02 	sts	0x0206, r24
	PORTL = Leds;
 186:	80 93 0b 01 	sts	0x010B, r24
}
 18a:	08 95       	ret

0000018c <led_set>:
void led_set(uint8_t led_mask) {
	Leds = ~led_mask;
 18c:	80 95       	com	r24
 18e:	80 93 06 02 	sts	0x0206, r24
	PORTL = Leds;
 192:	80 93 0b 01 	sts	0x010B, r24
} 
 196:	08 95       	ret

00000198 <uart_init>:
#include <util/delay.h>
#include "uart_busy.h"

void uart_init()
{
	UBRR0H = 0x00; UBRR0L = 0x07; // 115.2Kbps
 198:	10 92 c5 00 	sts	0x00C5, r1
 19c:	87 e0       	ldi	r24, 0x07	; 7
 19e:	80 93 c4 00 	sts	0x00C4, r24
	sbi(UCSR0A, U2X0); // 115.2Kbps
 1a2:	e0 ec       	ldi	r30, 0xC0	; 192
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	80 81       	ld	r24, Z
 1a8:	82 60       	ori	r24, 0x02	; 2
 1aa:	80 83       	st	Z, r24
	sbi(UCSR0B, TXEN0); // TX enable
 1ac:	e1 ec       	ldi	r30, 0xC1	; 193
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	80 81       	ld	r24, Z
 1b2:	88 60       	ori	r24, 0x08	; 8
 1b4:	80 83       	st	Z, r24
}
 1b6:	08 95       	ret

000001b8 <uart_putchar>:
int uart_putchar(char ch)
{
 1b8:	cf 93       	push	r28
 1ba:	c8 2f       	mov	r28, r24
	if (ch == '\n')
 1bc:	8a 30       	cpi	r24, 0x0A	; 10
 1be:	19 f4       	brne	.+6      	; 0x1c6 <uart_putchar+0xe>
		uart_putchar('\r');
 1c0:	8d e0       	ldi	r24, 0x0D	; 13
 1c2:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <uart_putchar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c6:	87 ea       	ldi	r24, 0xA7	; 167
 1c8:	91 e6       	ldi	r25, 0x61	; 97
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <uart_putchar+0x12>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <uart_putchar+0x18>
 1d0:	00 00       	nop
	_delay_ms(100);
	UDR0 = ch;
 1d2:	c0 93 c6 00 	sts	0x00C6, r28
 	return(1);
}
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	cf 91       	pop	r28
 1dc:	08 95       	ret

000001de <uart_putstr>:
int uart_putstr(char *sp)
{
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
 1e2:	ec 01       	movw	r28, r24
	for ( ; *sp; sp++)
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <uart_putstr+0xc>
 		uart_putchar(*sp);
 1e6:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <uart_putchar>
	UDR0 = ch;
 	return(1);
}
int uart_putstr(char *sp)
{
	for ( ; *sp; sp++)
 1ea:	89 91       	ld	r24, Y+
 1ec:	88 23       	and	r24, r24
 1ee:	d9 f7       	brne	.-10     	; 0x1e6 <uart_putstr+0x8>
 		uart_putchar(*sp);
 	return(1);
} 
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <main>:
#include "uart_busy.h"

int main()
{
	char c;
	uart_init();
 1fa:	0e 94 cc 00 	call	0x198	; 0x198 <uart_init>
	for (c ='A'; c <='Z'; c++)
 1fe:	c1 e4       	ldi	r28, 0x41	; 65
		uart_putchar(c);
 200:	8c 2f       	mov	r24, r28
 202:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <uart_putchar>

int main()
{
	char c;
	uart_init();
	for (c ='A'; c <='Z'; c++)
 206:	cf 5f       	subi	r28, 0xFF	; 255
 208:	cb 35       	cpi	r28, 0x5B	; 91
 20a:	d1 f7       	brne	.-12     	; 0x200 <main+0x6>
		uart_putchar(c);
 	uart_putchar('\n');
 20c:	8a e0       	ldi	r24, 0x0A	; 10
 20e:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <uart_putchar>

	uart_putstr("ABCD\n");
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	92 e0       	ldi	r25, 0x02	; 2
 216:	0e 94 ef 00 	call	0x1de	; 0x1de <uart_putstr>
 21a:	ff cf       	rjmp	.-2      	; 0x21a <main+0x20>

0000021c <_exit>:
 21c:	f8 94       	cli

0000021e <__stop_program>:
 21e:	ff cf       	rjmp	.-2      	; 0x21e <__stop_program>
