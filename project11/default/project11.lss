
project11.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d0  00800200  000017a4  00001838  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000017a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002c0  008002d0  008002d0  00001908  2**0
                  ALLOC
  3 .stab         0000117c  00000000  00000000  00001908  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000039d  00000000  00000000  00002a84  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000002e8  00000000  00000000  00002e28  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a89  00000000  00000000  00003110  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000156b  00000000  00000000  00005b99  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016cb  00000000  00000000  00007104  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000800  00000000  00000000  000087d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000855  00000000  00000000  00008fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c40  00000000  00000000  00009825  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  0000b465  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      3c:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__vector_15>
      40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      64:	0c 94 e2 05 	jmp	0xbc4	; 0xbc4 <__vector_25>
      68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      6c:	0c 94 b3 05 	jmp	0xb66	; 0xb66 <__vector_27>
      70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      74:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e4 ea       	ldi	r30, 0xA4	; 164
      fc:	f7 e1       	ldi	r31, 0x17	; 23
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a0 3d       	cpi	r26, 0xD0	; 208
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
     10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
     110:	15 e0       	ldi	r17, 0x05	; 5
     112:	a0 ed       	ldi	r26, 0xD0	; 208
     114:	b2 e0       	ldi	r27, 0x02	; 2
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	a0 39       	cpi	r26, 0x90	; 144
     11c:	b1 07       	cpc	r27, r17
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
     120:	0e 94 35 06 	call	0xc6a	; 0xc6a <main>
     124:	0c 94 d0 0b 	jmp	0x17a0	; 0x17a0 <_exit>

00000128 <__bad_interrupt>:
     128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <is_prime>:
#include "task.h"
#include "timer.h"
extern volatile int exe_time;

int is_prime(int n)
{
     12c:	cf 93       	push	r28
     12e:	df 93       	push	r29
     130:	fc 01       	movw	r30, r24
 int i;
 for (i = 2; i <= n/2; i++)
     132:	62 e0       	ldi	r22, 0x02	; 2
     134:	70 e0       	ldi	r23, 0x00	; 0
     136:	0e 94 61 06 	call	0xcc2	; 0xcc2 <__divmodhi4>
     13a:	eb 01       	movw	r28, r22
     13c:	22 e0       	ldi	r18, 0x02	; 2
     13e:	30 e0       	ldi	r19, 0x00	; 0
     140:	08 c0       	rjmp	.+16     	; 0x152 <is_prime+0x26>
	 if ((n % i) == 0)
     142:	cf 01       	movw	r24, r30
     144:	b9 01       	movw	r22, r18
     146:	0e 94 61 06 	call	0xcc2	; 0xcc2 <__divmodhi4>
     14a:	00 97       	sbiw	r24, 0x00	; 0
     14c:	41 f0       	breq	.+16     	; 0x15e <is_prime+0x32>
extern volatile int exe_time;

int is_prime(int n)
{
 int i;
 for (i = 2; i <= n/2; i++)
     14e:	2f 5f       	subi	r18, 0xFF	; 255
     150:	3f 4f       	sbci	r19, 0xFF	; 255
     152:	c2 17       	cp	r28, r18
     154:	d3 07       	cpc	r29, r19
     156:	ac f7       	brge	.-22     	; 0x142 <is_prime+0x16>
	 if ((n % i) == 0)
	 	return(0);
 return(1);
     158:	81 e0       	ldi	r24, 0x01	; 1
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	02 c0       	rjmp	.+4      	; 0x162 <is_prime+0x36>
int is_prime(int n)
{
 int i;
 for (i = 2; i <= n/2; i++)
	 if ((n % i) == 0)
	 	return(0);
     15e:	80 e0       	ldi	r24, 0x00	; 0
     160:	90 e0       	ldi	r25, 0x00	; 0
 return(1);
}
     162:	df 91       	pop	r29
     164:	cf 91       	pop	r28
     166:	08 95       	ret

00000168 <app_prime>:
void app_prime(char *ap)
{
     168:	cf 92       	push	r12
     16a:	df 92       	push	r13
     16c:	ef 92       	push	r14
     16e:	ff 92       	push	r15
     170:	0f 93       	push	r16
     172:	1f 93       	push	r17
     174:	cf 93       	push	r28
     176:	df 93       	push	r29
 int n = 2000, count = 0, t;
 if (ap) t = atoi(ap);
     178:	00 97       	sbiw	r24, 0x00	; 0
     17a:	19 f0       	breq	.+6      	; 0x182 <app_prime+0x1a>
     17c:	0e 94 b7 07 	call	0xf6e	; 0xf6e <atoi>
     180:	6c 01       	movw	r12, r24
	 	return(0);
 return(1);
}
void app_prime(char *ap)
{
 int n = 2000, count = 0, t;
     182:	00 e0       	ldi	r16, 0x00	; 0
     184:	10 e0       	ldi	r17, 0x00	; 0
 if (ap) t = atoi(ap);

 for (n = 2; n <= t; n++) {
     186:	c2 e0       	ldi	r28, 0x02	; 2
     188:	d0 e0       	ldi	r29, 0x00	; 0
 	if (is_prime(n)) {
	 	count++;
	 	printf("%d is a prime number !!!\n", n);
     18a:	80 e0       	ldi	r24, 0x00	; 0
     18c:	e8 2e       	mov	r14, r24
     18e:	82 e0       	ldi	r24, 0x02	; 2
     190:	f8 2e       	mov	r15, r24
void app_prime(char *ap)
{
 int n = 2000, count = 0, t;
 if (ap) t = atoi(ap);

 for (n = 2; n <= t; n++) {
     192:	16 c0       	rjmp	.+44     	; 0x1c0 <app_prime+0x58>
 	if (is_prime(n)) {
     194:	ce 01       	movw	r24, r28
     196:	0e 94 96 00 	call	0x12c	; 0x12c <is_prime>
     19a:	00 97       	sbiw	r24, 0x00	; 0
     19c:	81 f0       	breq	.+32     	; 0x1be <app_prime+0x56>
	 	count++;
     19e:	0f 5f       	subi	r16, 0xFF	; 255
     1a0:	1f 4f       	sbci	r17, 0xFF	; 255
	 	printf("%d is a prime number !!!\n", n);
     1a2:	00 d0       	rcall	.+0      	; 0x1a4 <app_prime+0x3c>
     1a4:	0f 92       	push	r0
     1a6:	ed b7       	in	r30, 0x3d	; 61
     1a8:	fe b7       	in	r31, 0x3e	; 62
     1aa:	f2 82       	std	Z+2, r15	; 0x02
     1ac:	e1 82       	std	Z+1, r14	; 0x01
     1ae:	d4 83       	std	Z+4, r29	; 0x04
     1b0:	c3 83       	std	Z+3, r28	; 0x03
     1b2:	0e 94 73 08 	call	0x10e6	; 0x10e6 <printf>
     1b6:	0f 90       	pop	r0
     1b8:	0f 90       	pop	r0
     1ba:	0f 90       	pop	r0
     1bc:	0f 90       	pop	r0
void app_prime(char *ap)
{
 int n = 2000, count = 0, t;
 if (ap) t = atoi(ap);

 for (n = 2; n <= t; n++) {
     1be:	21 96       	adiw	r28, 0x01	; 1
     1c0:	cc 16       	cp	r12, r28
     1c2:	dd 06       	cpc	r13, r29
     1c4:	3c f7       	brge	.-50     	; 0x194 <app_prime+0x2c>
 	if (is_prime(n)) {
	 	count++;
	 	printf("%d is a prime number !!!\n", n);
	 }
 }
 printf("count=%d\n", count);
     1c6:	00 d0       	rcall	.+0      	; 0x1c8 <app_prime+0x60>
     1c8:	0f 92       	push	r0
     1ca:	8a e1       	ldi	r24, 0x1A	; 26
     1cc:	92 e0       	ldi	r25, 0x02	; 2
     1ce:	ed b7       	in	r30, 0x3d	; 61
     1d0:	fe b7       	in	r31, 0x3e	; 62
     1d2:	92 83       	std	Z+2, r25	; 0x02
     1d4:	81 83       	std	Z+1, r24	; 0x01
     1d6:	14 83       	std	Z+4, r17	; 0x04
     1d8:	03 83       	std	Z+3, r16	; 0x03
     1da:	0e 94 73 08 	call	0x10e6	; 0x10e6 <printf>
     1de:	0f 90       	pop	r0
     1e0:	0f 90       	pop	r0
     1e2:	0f 90       	pop	r0
     1e4:	0f 90       	pop	r0
}
     1e6:	df 91       	pop	r29
     1e8:	cf 91       	pop	r28
     1ea:	1f 91       	pop	r17
     1ec:	0f 91       	pop	r16
     1ee:	ff 90       	pop	r15
     1f0:	ef 90       	pop	r14
     1f2:	df 90       	pop	r13
     1f4:	cf 90       	pop	r12
     1f6:	08 95       	ret

000001f8 <app_list>:
void app_list(char *ap)
{

}
     1f8:	08 95       	ret

000001fa <app_timer>:
 void  app_timer(char *ap)  {
     1fa:	0f 93       	push	r16
     1fc:	1f 93       	push	r17
     1fe:	cf 93       	push	r28
     200:	df 93       	push	r29
     202:	cd b7       	in	r28, 0x3d	; 61
     204:	de b7       	in	r29, 0x3e	; 62
     206:	62 97       	sbiw	r28, 0x12	; 18
     208:	0f b6       	in	r0, 0x3f	; 63
     20a:	f8 94       	cli
     20c:	de bf       	out	0x3e, r29	; 62
     20e:	0f be       	out	0x3f, r0	; 63
     210:	cd bf       	out	0x3d, r28	; 61
 	char buf[8];
	int ms;
	struct task  tsk;
	while(1) {
		printf(">> ");
     212:	04 e2       	ldi	r16, 0x24	; 36
     214:	12 e0       	ldi	r17, 0x02	; 2
     216:	0f 92       	push	r0
     218:	0f 92       	push	r0
     21a:	ed b7       	in	r30, 0x3d	; 61
     21c:	fe b7       	in	r31, 0x3e	; 62
     21e:	12 83       	std	Z+2, r17	; 0x02
     220:	01 83       	std	Z+1, r16	; 0x01
     222:	0e 94 73 08 	call	0x10e6	; 0x10e6 <printf>
		if (fgets(buf, 8, stdin) == NULL || (ms = atoi(buf)) == 0)
     226:	0f 90       	pop	r0
     228:	0f 90       	pop	r0
     22a:	40 91 8a 05 	lds	r20, 0x058A
     22e:	50 91 8b 05 	lds	r21, 0x058B
     232:	ce 01       	movw	r24, r28
     234:	01 96       	adiw	r24, 0x01	; 1
     236:	68 e0       	ldi	r22, 0x08	; 8
     238:	70 e0       	ldi	r23, 0x00	; 0
     23a:	0e 94 19 08 	call	0x1032	; 0x1032 <fgets>
     23e:	00 97       	sbiw	r24, 0x00	; 0
     240:	61 f0       	breq	.+24     	; 0x25a <app_timer+0x60>
     242:	ce 01       	movw	r24, r28
     244:	01 96       	adiw	r24, 0x01	; 1
     246:	0e 94 b7 07 	call	0xf6e	; 0xf6e <atoi>
     24a:	bc 01       	movw	r22, r24
     24c:	00 97       	sbiw	r24, 0x00	; 0
     24e:	29 f0       	breq	.+10     	; 0x25a <app_timer+0x60>
			break;
        insert_timer(&tsk, ms);
     250:	ce 01       	movw	r24, r28
     252:	09 96       	adiw	r24, 0x09	; 9
     254:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <insert_timer>
	}
     258:	de cf       	rjmp	.-68     	; 0x216 <app_timer+0x1c>
	tour_timer();
     25a:	0e 94 13 04 	call	0x826	; 0x826 <tour_timer>
	free_timer();
     25e:	0e 94 55 04 	call	0x8aa	; 0x8aa <free_timer>
}
     262:	62 96       	adiw	r28, 0x12	; 18
     264:	0f b6       	in	r0, 0x3f	; 63
     266:	f8 94       	cli
     268:	de bf       	out	0x3e, r29	; 62
     26a:	0f be       	out	0x3f, r0	; 63
     26c:	cd bf       	out	0x3d, r28	; 61
     26e:	df 91       	pop	r29
     270:	cf 91       	pop	r28
     272:	1f 91       	pop	r17
     274:	0f 91       	pop	r16
     276:	08 95       	ret

00000278 <app_time>:
void app_time(){
     278:	cf 93       	push	r28
     27a:	df 93       	push	r29
	printf("MIN : SEC\n");
     27c:	88 e2       	ldi	r24, 0x28	; 40
     27e:	92 e0       	ldi	r25, 0x02	; 2
     280:	0e 94 8c 08 	call	0x1118	; 0x1118 <puts>
	printf("%.2d : %.2d\n", exe_time/60, exe_time%60);
     284:	80 91 db 02 	lds	r24, 0x02DB
     288:	90 91 dc 02 	lds	r25, 0x02DC
     28c:	e0 91 db 02 	lds	r30, 0x02DB
     290:	f0 91 dc 02 	lds	r31, 0x02DC
     294:	00 d0       	rcall	.+0      	; 0x296 <app_time+0x1e>
     296:	00 d0       	rcall	.+0      	; 0x298 <app_time+0x20>
     298:	cd b7       	in	r28, 0x3d	; 61
     29a:	de b7       	in	r29, 0x3e	; 62
     29c:	21 96       	adiw	r28, 0x01	; 1
     29e:	22 e3       	ldi	r18, 0x32	; 50
     2a0:	32 e0       	ldi	r19, 0x02	; 2
     2a2:	ad b7       	in	r26, 0x3d	; 61
     2a4:	be b7       	in	r27, 0x3e	; 62
     2a6:	12 96       	adiw	r26, 0x02	; 2
     2a8:	3c 93       	st	X, r19
     2aa:	2e 93       	st	-X, r18
     2ac:	11 97       	sbiw	r26, 0x01	; 1
     2ae:	2c e3       	ldi	r18, 0x3C	; 60
     2b0:	30 e0       	ldi	r19, 0x00	; 0
     2b2:	b9 01       	movw	r22, r18
     2b4:	0e 94 61 06 	call	0xcc2	; 0xcc2 <__divmodhi4>
     2b8:	7b 83       	std	Y+3, r23	; 0x03
     2ba:	6a 83       	std	Y+2, r22	; 0x02
     2bc:	cf 01       	movw	r24, r30
     2be:	b9 01       	movw	r22, r18
     2c0:	0e 94 61 06 	call	0xcc2	; 0xcc2 <__divmodhi4>
     2c4:	9d 83       	std	Y+5, r25	; 0x05
     2c6:	8c 83       	std	Y+4, r24	; 0x04
     2c8:	0e 94 73 08 	call	0x10e6	; 0x10e6 <printf>
     2cc:	8d b7       	in	r24, 0x3d	; 61
     2ce:	9e b7       	in	r25, 0x3e	; 62
     2d0:	06 96       	adiw	r24, 0x06	; 6
     2d2:	0f b6       	in	r0, 0x3f	; 63
     2d4:	f8 94       	cli
     2d6:	9e bf       	out	0x3e, r25	; 62
     2d8:	0f be       	out	0x3f, r0	; 63
     2da:	8d bf       	out	0x3d, r24	; 61
}
     2dc:	df 91       	pop	r29
     2de:	cf 91       	pop	r28
     2e0:	08 95       	ret

000002e2 <led_init>:
#include "timer.h"

static uint8_t Leds;

void led_init() {
	DDRL = PORTL = 0xff;
     2e2:	8f ef       	ldi	r24, 0xFF	; 255
     2e4:	80 93 0b 01 	sts	0x010B, r24
     2e8:	80 93 0a 01 	sts	0x010A, r24
}
     2ec:	08 95       	ret

000002ee <led_on_all>:
void led_on_all(void) {
	Leds = PORTL = 0x00;
     2ee:	10 92 0b 01 	sts	0x010B, r1
     2f2:	10 92 d0 02 	sts	0x02D0, r1
}
     2f6:	08 95       	ret

000002f8 <led_off_all>:
void led_off_all(void) {
	 Leds = PORTL = 0xff;
     2f8:	8f ef       	ldi	r24, 0xFF	; 255
     2fa:	80 93 0b 01 	sts	0x010B, r24
     2fe:	80 93 d0 02 	sts	0x02D0, r24
}
     302:	08 95       	ret

00000304 <task_led>:
	else{
		led_off_all();
		flag = 0;
	}
}*/
void task_led(char *ap){
     304:	0f 93       	push	r16
     306:	1f 93       	push	r17
     308:	cf 93       	push	r28
     30a:	df 93       	push	r29
     30c:	cd b7       	in	r28, 0x3d	; 61
     30e:	de b7       	in	r29, 0x3e	; 62
     310:	2a 97       	sbiw	r28, 0x0a	; 10
     312:	0f b6       	in	r0, 0x3f	; 63
     314:	f8 94       	cli
     316:	de bf       	out	0x3e, r29	; 62
     318:	0f be       	out	0x3f, r0	; 63
     31a:	cd bf       	out	0x3d, r28	; 61
	struct task task;
	static int tag;
	int ms = 1024*5;
	if(ap&&*ap)
     31c:	00 97       	sbiw	r24, 0x00	; 0
     31e:	41 f0       	breq	.+16     	; 0x330 <task_led+0x2c>
     320:	dc 01       	movw	r26, r24
     322:	2c 91       	ld	r18, X
     324:	22 23       	and	r18, r18
     326:	21 f0       	breq	.+8      	; 0x330 <task_led+0x2c>
		ms = atoi(ap);
     328:	0e 94 b7 07 	call	0xf6e	; 0xf6e <atoi>
     32c:	8c 01       	movw	r16, r24
     32e:	02 c0       	rjmp	.+4      	; 0x334 <task_led+0x30>
	}
}*/
void task_led(char *ap){
	struct task task;
	static int tag;
	int ms = 1024*5;
     330:	00 e0       	ldi	r16, 0x00	; 0
     332:	14 e1       	ldi	r17, 0x14	; 20
	if(ap&&*ap)
		ms = atoi(ap);
	
	if(tag){
     334:	80 91 d1 02 	lds	r24, 0x02D1
     338:	90 91 d2 02 	lds	r25, 0x02D2
     33c:	00 97       	sbiw	r24, 0x00	; 0
     33e:	39 f0       	breq	.+14     	; 0x34e <task_led+0x4a>
		led_on_all();
     340:	0e 94 77 01 	call	0x2ee	; 0x2ee <led_on_all>
		tag = 0;
     344:	10 92 d2 02 	sts	0x02D2, r1
     348:	10 92 d1 02 	sts	0x02D1, r1
     34c:	08 c0       	rjmp	.+16     	; 0x35e <task_led+0x5a>
	}
	else{
		led_off_all();
     34e:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <led_off_all>
		tag = 1;
     352:	81 e0       	ldi	r24, 0x01	; 1
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	90 93 d2 02 	sts	0x02D2, r25
     35a:	80 93 d1 02 	sts	0x02D1, r24
	}
	task.fun=task_led;
     35e:	82 e8       	ldi	r24, 0x82	; 130
     360:	91 e0       	ldi	r25, 0x01	; 1
     362:	9a 83       	std	Y+2, r25	; 0x02
     364:	89 83       	std	Y+1, r24	; 0x01
	sprintf(task.arg,"%d",ms);
     366:	00 d0       	rcall	.+0      	; 0x368 <task_led+0x64>
     368:	00 d0       	rcall	.+0      	; 0x36a <task_led+0x66>
     36a:	ed b7       	in	r30, 0x3d	; 61
     36c:	fe b7       	in	r31, 0x3e	; 62
     36e:	31 96       	adiw	r30, 0x01	; 1
     370:	ce 01       	movw	r24, r28
     372:	03 96       	adiw	r24, 0x03	; 3
     374:	ad b7       	in	r26, 0x3d	; 61
     376:	be b7       	in	r27, 0x3e	; 62
     378:	12 96       	adiw	r26, 0x02	; 2
     37a:	9c 93       	st	X, r25
     37c:	8e 93       	st	-X, r24
     37e:	11 97       	sbiw	r26, 0x01	; 1
     380:	8f e3       	ldi	r24, 0x3F	; 63
     382:	92 e0       	ldi	r25, 0x02	; 2
     384:	93 83       	std	Z+3, r25	; 0x03
     386:	82 83       	std	Z+2, r24	; 0x02
     388:	15 83       	std	Z+5, r17	; 0x05
     38a:	04 83       	std	Z+4, r16	; 0x04
     38c:	0e 94 ba 08 	call	0x1174	; 0x1174 <sprintf>
	insert_timer(&task, ms/256);
     390:	ed b7       	in	r30, 0x3d	; 61
     392:	fe b7       	in	r31, 0x3e	; 62
     394:	36 96       	adiw	r30, 0x06	; 6
     396:	0f b6       	in	r0, 0x3f	; 63
     398:	f8 94       	cli
     39a:	fe bf       	out	0x3e, r31	; 62
     39c:	0f be       	out	0x3f, r0	; 63
     39e:	ed bf       	out	0x3d, r30	; 61
     3a0:	c8 01       	movw	r24, r16
     3a2:	60 e0       	ldi	r22, 0x00	; 0
     3a4:	71 e0       	ldi	r23, 0x01	; 1
     3a6:	0e 94 61 06 	call	0xcc2	; 0xcc2 <__divmodhi4>
     3aa:	ce 01       	movw	r24, r28
     3ac:	01 96       	adiw	r24, 0x01	; 1
     3ae:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <insert_timer>
}
     3b2:	2a 96       	adiw	r28, 0x0a	; 10
     3b4:	0f b6       	in	r0, 0x3f	; 63
     3b6:	f8 94       	cli
     3b8:	de bf       	out	0x3e, r29	; 62
     3ba:	0f be       	out	0x3f, r0	; 63
     3bc:	cd bf       	out	0x3d, r28	; 61
     3be:	df 91       	pop	r29
     3c0:	cf 91       	pop	r28
     3c2:	1f 91       	pop	r17
     3c4:	0f 91       	pop	r16
     3c6:	08 95       	ret

000003c8 <led_on>:
}
void led_off_all(void) {
	 Leds = PORTL = 0xff;
}
void led_on(uint8_t led_no) {
	Leds &= ~(1 << led_no);
     3c8:	21 e0       	ldi	r18, 0x01	; 1
     3ca:	30 e0       	ldi	r19, 0x00	; 0
     3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <led_on+0xa>
     3ce:	22 0f       	add	r18, r18
     3d0:	33 1f       	adc	r19, r19
     3d2:	8a 95       	dec	r24
     3d4:	e2 f7       	brpl	.-8      	; 0x3ce <led_on+0x6>
     3d6:	20 95       	com	r18
     3d8:	80 91 d0 02 	lds	r24, 0x02D0
     3dc:	28 23       	and	r18, r24
     3de:	20 93 d0 02 	sts	0x02D0, r18
	PORTL = Leds;
     3e2:	20 93 0b 01 	sts	0x010B, r18
}
     3e6:	08 95       	ret

000003e8 <led_off>:
void led_off(uint8_t led_no) {
	Leds |= (1 << led_no);
     3e8:	21 e0       	ldi	r18, 0x01	; 1
     3ea:	30 e0       	ldi	r19, 0x00	; 0
     3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <led_off+0xa>
     3ee:	22 0f       	add	r18, r18
     3f0:	33 1f       	adc	r19, r19
     3f2:	8a 95       	dec	r24
     3f4:	e2 f7       	brpl	.-8      	; 0x3ee <led_off+0x6>
     3f6:	80 91 d0 02 	lds	r24, 0x02D0
     3fa:	82 2b       	or	r24, r18
     3fc:	80 93 d0 02 	sts	0x02D0, r24
	PORTL = Leds;
     400:	80 93 0b 01 	sts	0x010B, r24
}
     404:	08 95       	ret

00000406 <led_set>:
void led_set(uint8_t led_mask) {
	Leds = ~led_mask;
     406:	80 95       	com	r24
     408:	80 93 d0 02 	sts	0x02D0, r24
	PORTL = Leds;
     40c:	80 93 0b 01 	sts	0x010B, r24
} 
     410:	08 95       	ret

00000412 <q_init>:
char qo[QO_SIZE];
int fi, ri;
int fo, ro;
void q_init()
{
	fi = ri = fo = ro = 0;
     412:	10 92 e2 03 	sts	0x03E2, r1
     416:	10 92 e1 03 	sts	0x03E1, r1
     41a:	10 92 e0 03 	sts	0x03E0, r1
     41e:	10 92 df 03 	sts	0x03DF, r1
     422:	10 92 e4 03 	sts	0x03E4, r1
     426:	10 92 e3 03 	sts	0x03E3, r1
     42a:	10 92 de 02 	sts	0x02DE, r1
     42e:	10 92 dd 02 	sts	0x02DD, r1
}
     432:	08 95       	ret

00000434 <qi_insert>:
int qi_insert(char ch)
{
     434:	48 2f       	mov	r20, r24
 	if ((ri + 1) % QI_SIZE == fi)
     436:	20 91 e3 03 	lds	r18, 0x03E3
     43a:	30 91 e4 03 	lds	r19, 0x03E4
     43e:	2f 5f       	subi	r18, 0xFF	; 255
     440:	3f 4f       	sbci	r19, 0xFF	; 255
     442:	c9 01       	movw	r24, r18
     444:	60 e0       	ldi	r22, 0x00	; 0
     446:	71 e0       	ldi	r23, 0x01	; 1
     448:	0e 94 61 06 	call	0xcc2	; 0xcc2 <__divmodhi4>
     44c:	9c 01       	movw	r18, r24
     44e:	80 91 dd 02 	lds	r24, 0x02DD
     452:	90 91 de 02 	lds	r25, 0x02DE
     456:	28 17       	cp	r18, r24
     458:	39 07       	cpc	r19, r25
     45a:	59 f0       	breq	.+22     	; 0x472 <qi_insert+0x3e>
 		return(0); // full
	ri = (ri + 1) % QI_SIZE;
     45c:	30 93 e4 03 	sts	0x03E4, r19
     460:	20 93 e3 03 	sts	0x03E3, r18
	qi[ri] = ch;
     464:	2b 51       	subi	r18, 0x1B	; 27
     466:	3c 4f       	sbci	r19, 0xFC	; 252
     468:	f9 01       	movw	r30, r18
     46a:	40 83       	st	Z, r20
	return(1);
     46c:	81 e0       	ldi	r24, 0x01	; 1
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	08 95       	ret
	fi = ri = fo = ro = 0;
}
int qi_insert(char ch)
{
 	if ((ri + 1) % QI_SIZE == fi)
 		return(0); // full
     472:	80 e0       	ldi	r24, 0x00	; 0
     474:	90 e0       	ldi	r25, 0x00	; 0
	ri = (ri + 1) % QI_SIZE;
	qi[ri] = ch;
	return(1);
}
     476:	08 95       	ret

00000478 <qi_delete>:
int qi_delete()
{
 if (ri == fi)
     478:	80 91 dd 02 	lds	r24, 0x02DD
     47c:	90 91 de 02 	lds	r25, 0x02DE
     480:	20 91 e3 03 	lds	r18, 0x03E3
     484:	30 91 e4 03 	lds	r19, 0x03E4
     488:	28 17       	cp	r18, r24
     48a:	39 07       	cpc	r19, r25
     48c:	79 f0       	breq	.+30     	; 0x4ac <qi_delete+0x34>
 	return(0); // empty
 fi = (fi + 1) % QI_SIZE;
     48e:	01 96       	adiw	r24, 0x01	; 1
     490:	60 e0       	ldi	r22, 0x00	; 0
     492:	71 e0       	ldi	r23, 0x01	; 1
     494:	0e 94 61 06 	call	0xcc2	; 0xcc2 <__divmodhi4>
     498:	90 93 de 02 	sts	0x02DE, r25
     49c:	80 93 dd 02 	sts	0x02DD, r24
 	return(qi[fi]);
     4a0:	8b 51       	subi	r24, 0x1B	; 27
     4a2:	9c 4f       	sbci	r25, 0xFC	; 252
     4a4:	fc 01       	movw	r30, r24
     4a6:	80 81       	ld	r24, Z
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	08 95       	ret
	return(1);
}
int qi_delete()
{
 if (ri == fi)
 	return(0); // empty
     4ac:	80 e0       	ldi	r24, 0x00	; 0
     4ae:	90 e0       	ldi	r25, 0x00	; 0
 fi = (fi + 1) % QI_SIZE;
 	return(qi[fi]);
}
     4b0:	08 95       	ret

000004b2 <qo_insert>:

int qo_insert(char ch)
{
     4b2:	48 2f       	mov	r20, r24
 	if ((ro + 1) % QO_SIZE == fo)
     4b4:	20 91 e1 03 	lds	r18, 0x03E1
     4b8:	30 91 e2 03 	lds	r19, 0x03E2
     4bc:	2f 5f       	subi	r18, 0xFF	; 255
     4be:	3f 4f       	sbci	r19, 0xFF	; 255
     4c0:	c9 01       	movw	r24, r18
     4c2:	60 e0       	ldi	r22, 0x00	; 0
     4c4:	71 e0       	ldi	r23, 0x01	; 1
     4c6:	0e 94 61 06 	call	0xcc2	; 0xcc2 <__divmodhi4>
     4ca:	9c 01       	movw	r18, r24
     4cc:	80 91 df 03 	lds	r24, 0x03DF
     4d0:	90 91 e0 03 	lds	r25, 0x03E0
     4d4:	28 17       	cp	r18, r24
     4d6:	39 07       	cpc	r19, r25
     4d8:	59 f0       	breq	.+22     	; 0x4f0 <qo_insert+0x3e>
 		return(0); // full
	ro = (ro + 1) % QO_SIZE;
     4da:	30 93 e2 03 	sts	0x03E2, r19
     4de:	20 93 e1 03 	sts	0x03E1, r18
	qo[ro] = ch;
     4e2:	21 52       	subi	r18, 0x21	; 33
     4e4:	3d 4f       	sbci	r19, 0xFD	; 253
     4e6:	f9 01       	movw	r30, r18
     4e8:	40 83       	st	Z, r20
	return(1);
     4ea:	81 e0       	ldi	r24, 0x01	; 1
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	08 95       	ret
}

int qo_insert(char ch)
{
 	if ((ro + 1) % QO_SIZE == fo)
 		return(0); // full
     4f0:	80 e0       	ldi	r24, 0x00	; 0
     4f2:	90 e0       	ldi	r25, 0x00	; 0
	ro = (ro + 1) % QO_SIZE;
	qo[ro] = ch;
	return(1);
}
     4f4:	08 95       	ret

000004f6 <qo_delete>:
int qo_delete()
{
 if (ro == fo)
     4f6:	80 91 df 03 	lds	r24, 0x03DF
     4fa:	90 91 e0 03 	lds	r25, 0x03E0
     4fe:	20 91 e1 03 	lds	r18, 0x03E1
     502:	30 91 e2 03 	lds	r19, 0x03E2
     506:	28 17       	cp	r18, r24
     508:	39 07       	cpc	r19, r25
     50a:	79 f0       	breq	.+30     	; 0x52a <qo_delete+0x34>
 	return(0); // empty
 fo = (fo + 1) % QO_SIZE;
     50c:	01 96       	adiw	r24, 0x01	; 1
     50e:	60 e0       	ldi	r22, 0x00	; 0
     510:	71 e0       	ldi	r23, 0x01	; 1
     512:	0e 94 61 06 	call	0xcc2	; 0xcc2 <__divmodhi4>
     516:	90 93 e0 03 	sts	0x03E0, r25
     51a:	80 93 df 03 	sts	0x03DF, r24
 	return(qo[fo]);
     51e:	81 52       	subi	r24, 0x21	; 33
     520:	9d 4f       	sbci	r25, 0xFD	; 253
     522:	fc 01       	movw	r30, r24
     524:	80 81       	ld	r24, Z
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	08 95       	ret
	return(1);
}
int qo_delete()
{
 if (ro == fo)
 	return(0); // empty
     52a:	80 e0       	ldi	r24, 0x00	; 0
     52c:	90 e0       	ldi	r25, 0x00	; 0
 fo = (fo + 1) % QO_SIZE;
 	return(qo[fo]);
}
     52e:	08 95       	ret

00000530 <task_prime>:
			printf("!!!-444\n");
		}
		printf("$ ");

}
void task_prime(char *ap){
     530:	cf 92       	push	r12
     532:	df 92       	push	r13
     534:	ef 92       	push	r14
     536:	ff 92       	push	r15
     538:	0f 93       	push	r16
     53a:	1f 93       	push	r17
     53c:	cf 93       	push	r28
     53e:	df 93       	push	r29

	int t=2000, count = 0, n;
	if(ap &&*ap) t = atoi(ap);
     540:	00 97       	sbiw	r24, 0x00	; 0
     542:	41 f0       	breq	.+16     	; 0x554 <task_prime+0x24>
     544:	fc 01       	movw	r30, r24
     546:	20 81       	ld	r18, Z
     548:	22 23       	and	r18, r18
     54a:	21 f0       	breq	.+8      	; 0x554 <task_prime+0x24>
     54c:	0e 94 b7 07 	call	0xf6e	; 0xf6e <atoi>
     550:	8c 01       	movw	r16, r24
     552:	02 c0       	rjmp	.+4      	; 0x558 <task_prime+0x28>
		printf("$ ");

}
void task_prime(char *ap){

	int t=2000, count = 0, n;
     554:	00 ed       	ldi	r16, 0xD0	; 208
     556:	17 e0       	ldi	r17, 0x07	; 7
	if(ap &&*ap) t = atoi(ap);
	for(n = 2; n <= t; n++){
     558:	c2 e0       	ldi	r28, 0x02	; 2
     55a:	d0 e0       	ldi	r29, 0x00	; 0
		printf("$ ");

}
void task_prime(char *ap){

	int t=2000, count = 0, n;
     55c:	ee 24       	eor	r14, r14
     55e:	ff 24       	eor	r15, r15
	if(ap &&*ap) t = atoi(ap);
	for(n = 2; n <= t; n++){
		if(is_prime(n)){
			count++;
			printf("%d is a prime number!!!\n",n);
     560:	85 e4       	ldi	r24, 0x45	; 69
     562:	c8 2e       	mov	r12, r24
     564:	82 e0       	ldi	r24, 0x02	; 2
     566:	d8 2e       	mov	r13, r24
}
void task_prime(char *ap){

	int t=2000, count = 0, n;
	if(ap &&*ap) t = atoi(ap);
	for(n = 2; n <= t; n++){
     568:	17 c0       	rjmp	.+46     	; 0x598 <task_prime+0x68>
		if(is_prime(n)){
     56a:	ce 01       	movw	r24, r28
     56c:	0e 94 96 00 	call	0x12c	; 0x12c <is_prime>
     570:	00 97       	sbiw	r24, 0x00	; 0
     572:	89 f0       	breq	.+34     	; 0x596 <task_prime+0x66>
			count++;
     574:	08 94       	sec
     576:	e1 1c       	adc	r14, r1
     578:	f1 1c       	adc	r15, r1
			printf("%d is a prime number!!!\n",n);
     57a:	00 d0       	rcall	.+0      	; 0x57c <task_prime+0x4c>
     57c:	0f 92       	push	r0
     57e:	ed b7       	in	r30, 0x3d	; 61
     580:	fe b7       	in	r31, 0x3e	; 62
     582:	d2 82       	std	Z+2, r13	; 0x02
     584:	c1 82       	std	Z+1, r12	; 0x01
     586:	d4 83       	std	Z+4, r29	; 0x04
     588:	c3 83       	std	Z+3, r28	; 0x03
     58a:	0e 94 73 08 	call	0x10e6	; 0x10e6 <printf>
     58e:	0f 90       	pop	r0
     590:	0f 90       	pop	r0
     592:	0f 90       	pop	r0
     594:	0f 90       	pop	r0
}
void task_prime(char *ap){

	int t=2000, count = 0, n;
	if(ap &&*ap) t = atoi(ap);
	for(n = 2; n <= t; n++){
     596:	21 96       	adiw	r28, 0x01	; 1
     598:	0c 17       	cp	r16, r28
     59a:	1d 07       	cpc	r17, r29
     59c:	34 f7       	brge	.-52     	; 0x56a <task_prime+0x3a>
		if(is_prime(n)){
			count++;
			printf("%d is a prime number!!!\n",n);
		}
 	}
	printf("count=%d\n",count);
     59e:	00 d0       	rcall	.+0      	; 0x5a0 <task_prime+0x70>
     5a0:	0f 92       	push	r0
     5a2:	8e e5       	ldi	r24, 0x5E	; 94
     5a4:	92 e0       	ldi	r25, 0x02	; 2
     5a6:	ed b7       	in	r30, 0x3d	; 61
     5a8:	fe b7       	in	r31, 0x3e	; 62
     5aa:	92 83       	std	Z+2, r25	; 0x02
     5ac:	81 83       	std	Z+1, r24	; 0x01
     5ae:	f4 82       	std	Z+4, r15	; 0x04
     5b0:	e3 82       	std	Z+3, r14	; 0x03
     5b2:	0e 94 73 08 	call	0x10e6	; 0x10e6 <printf>
     5b6:	0f 90       	pop	r0
     5b8:	0f 90       	pop	r0
     5ba:	0f 90       	pop	r0
     5bc:	0f 90       	pop	r0
}
     5be:	df 91       	pop	r29
     5c0:	cf 91       	pop	r28
     5c2:	1f 91       	pop	r17
     5c4:	0f 91       	pop	r16
     5c6:	ff 90       	pop	r15
     5c8:	ef 90       	pop	r14
     5ca:	df 90       	pop	r13
     5cc:	cf 90       	pop	r12
     5ce:	08 95       	ret

000005d0 <task_init>:
#define MAX_TASK 16
struct task Task_q[MAX_TASK];
volatile int Task_f, Task_r;

void task_init(){
	Task_f = Task_r = 0;
     5d0:	10 92 d8 02 	sts	0x02D8, r1
     5d4:	10 92 d7 02 	sts	0x02D7, r1
     5d8:	10 92 da 02 	sts	0x02DA, r1
     5dc:	10 92 d9 02 	sts	0x02D9, r1
}
     5e0:	08 95       	ret

000005e2 <task_insert>:

int task_insert(struct task *tskp){
     5e2:	cf 93       	push	r28
     5e4:	df 93       	push	r29
     5e6:	48 2f       	mov	r20, r24
     5e8:	e9 2f       	mov	r30, r25
	if((Task_r + 1) % MAX_TASK == Task_f)
     5ea:	80 91 d7 02 	lds	r24, 0x02D7
     5ee:	90 91 d8 02 	lds	r25, 0x02D8
     5f2:	c0 91 d9 02 	lds	r28, 0x02D9
     5f6:	d0 91 da 02 	lds	r29, 0x02DA
     5fa:	01 96       	adiw	r24, 0x01	; 1
     5fc:	20 e1       	ldi	r18, 0x10	; 16
     5fe:	30 e0       	ldi	r19, 0x00	; 0
     600:	b9 01       	movw	r22, r18
     602:	0e 94 61 06 	call	0xcc2	; 0xcc2 <__divmodhi4>
     606:	8c 17       	cp	r24, r28
     608:	9d 07       	cpc	r25, r29
     60a:	31 f1       	breq	.+76     	; 0x658 <task_insert+0x76>
		return(0);
	Task_r = (Task_r + 1) % MAX_TASK;
     60c:	80 91 d7 02 	lds	r24, 0x02D7
     610:	90 91 d8 02 	lds	r25, 0x02D8
     614:	01 96       	adiw	r24, 0x01	; 1
     616:	b9 01       	movw	r22, r18
     618:	0e 94 61 06 	call	0xcc2	; 0xcc2 <__divmodhi4>
     61c:	90 93 d8 02 	sts	0x02D8, r25
     620:	80 93 d7 02 	sts	0x02D7, r24
	Task_q[Task_r] = *tskp;
     624:	80 91 d7 02 	lds	r24, 0x02D7
     628:	90 91 d8 02 	lds	r25, 0x02D8
     62c:	dc 01       	movw	r26, r24
     62e:	aa 0f       	add	r26, r26
     630:	bb 1f       	adc	r27, r27
     632:	63 e0       	ldi	r22, 0x03	; 3
     634:	88 0f       	add	r24, r24
     636:	99 1f       	adc	r25, r25
     638:	6a 95       	dec	r22
     63a:	e1 f7       	brne	.-8      	; 0x634 <task_insert+0x52>
     63c:	a8 0f       	add	r26, r24
     63e:	b9 1f       	adc	r27, r25
     640:	ab 51       	subi	r26, 0x1B	; 27
     642:	bb 4f       	sbci	r27, 0xFB	; 251
     644:	c4 2f       	mov	r28, r20
     646:	de 2f       	mov	r29, r30
     648:	8a e0       	ldi	r24, 0x0A	; 10
     64a:	09 90       	ld	r0, Y+
     64c:	0d 92       	st	X+, r0
     64e:	81 50       	subi	r24, 0x01	; 1
     650:	e1 f7       	brne	.-8      	; 0x64a <task_insert+0x68>
	return(1);
     652:	81 e0       	ldi	r24, 0x01	; 1
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	02 c0       	rjmp	.+4      	; 0x65c <task_insert+0x7a>
	Task_f = Task_r = 0;
}

int task_insert(struct task *tskp){
	if((Task_r + 1) % MAX_TASK == Task_f)
		return(0);
     658:	80 e0       	ldi	r24, 0x00	; 0
     65a:	90 e0       	ldi	r25, 0x00	; 0
	Task_r = (Task_r + 1) % MAX_TASK;
	Task_q[Task_r] = *tskp;
	return(1);
}
     65c:	df 91       	pop	r29
     65e:	cf 91       	pop	r28
     660:	08 95       	ret

00000662 <task_delete>:
int task_delete(struct task *tskp)
{
     662:	9c 01       	movw	r18, r24
	if(Task_r == Task_f)
     664:	40 91 d7 02 	lds	r20, 0x02D7
     668:	50 91 d8 02 	lds	r21, 0x02D8
     66c:	80 91 d9 02 	lds	r24, 0x02D9
     670:	90 91 da 02 	lds	r25, 0x02DA
     674:	48 17       	cp	r20, r24
     676:	59 07       	cpc	r21, r25
     678:	31 f1       	breq	.+76     	; 0x6c6 <task_delete+0x64>
		return(0);
	Task_f = (Task_f + 1) % MAX_TASK;
     67a:	80 91 d9 02 	lds	r24, 0x02D9
     67e:	90 91 da 02 	lds	r25, 0x02DA
     682:	01 96       	adiw	r24, 0x01	; 1
     684:	60 e1       	ldi	r22, 0x10	; 16
     686:	70 e0       	ldi	r23, 0x00	; 0
     688:	0e 94 61 06 	call	0xcc2	; 0xcc2 <__divmodhi4>
     68c:	90 93 da 02 	sts	0x02DA, r25
     690:	80 93 d9 02 	sts	0x02D9, r24
	*tskp = Task_q[Task_f];
     694:	80 91 d9 02 	lds	r24, 0x02D9
     698:	90 91 da 02 	lds	r25, 0x02DA
     69c:	fc 01       	movw	r30, r24
     69e:	ee 0f       	add	r30, r30
     6a0:	ff 1f       	adc	r31, r31
     6a2:	a3 e0       	ldi	r26, 0x03	; 3
     6a4:	88 0f       	add	r24, r24
     6a6:	99 1f       	adc	r25, r25
     6a8:	aa 95       	dec	r26
     6aa:	e1 f7       	brne	.-8      	; 0x6a4 <task_delete+0x42>
     6ac:	e8 0f       	add	r30, r24
     6ae:	f9 1f       	adc	r31, r25
     6b0:	d9 01       	movw	r26, r18
     6b2:	eb 51       	subi	r30, 0x1B	; 27
     6b4:	fb 4f       	sbci	r31, 0xFB	; 251
     6b6:	8a e0       	ldi	r24, 0x0A	; 10
     6b8:	01 90       	ld	r0, Z+
     6ba:	0d 92       	st	X+, r0
     6bc:	81 50       	subi	r24, 0x01	; 1
     6be:	e1 f7       	brne	.-8      	; 0x6b8 <task_delete+0x56>
	return(1);
     6c0:	81 e0       	ldi	r24, 0x01	; 1
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	08 95       	ret
	return(1);
}
int task_delete(struct task *tskp)
{
	if(Task_r == Task_f)
		return(0);
     6c6:	80 e0       	ldi	r24, 0x00	; 0
     6c8:	90 e0       	ldi	r25, 0x00	; 0
	Task_f = (Task_f + 1) % MAX_TASK;
	*tskp = Task_q[Task_f];
	return(1);
}
     6ca:	08 95       	ret

000006cc <task_cmd>:
void task_cmd(void *arg){
     6cc:	af 92       	push	r10
     6ce:	bf 92       	push	r11
     6d0:	cf 92       	push	r12
     6d2:	df 92       	push	r13
     6d4:	ef 92       	push	r14
     6d6:	ff 92       	push	r15
     6d8:	0f 93       	push	r16
     6da:	1f 93       	push	r17
     6dc:	cf 93       	push	r28
     6de:	df 93       	push	r29
     6e0:	cd b7       	in	r28, 0x3d	; 61
     6e2:	de b7       	in	r29, 0x3e	; 62
     6e4:	ca 54       	subi	r28, 0x4A	; 74
     6e6:	d0 40       	sbci	r29, 0x00	; 0
     6e8:	0f b6       	in	r0, 0x3f	; 63
     6ea:	f8 94       	cli
     6ec:	de bf       	out	0x3e, r29	; 62
     6ee:	0f be       	out	0x3f, r0	; 63
     6f0:	cd bf       	out	0x3d, r28	; 61
	char buf[64], *cp0, *cp1, *cp2, *cp3;
	struct task task;
	int ms;
	if(gets(buf) == NULL){
     6f2:	ce 01       	movw	r24, r28
     6f4:	0b 96       	adiw	r24, 0x0b	; 11
     6f6:	0e 94 4d 08 	call	0x109a	; 0x109a <gets>
     6fa:	00 97       	sbiw	r24, 0x00	; 0
     6fc:	09 f4       	brne	.+2      	; 0x700 <task_cmd+0x34>
     6fe:	75 c0       	rjmp	.+234    	; 0x7ea <task_cmd+0x11e>
		printf("$ "); return;
	}
	cp0 = strtok(buf, " \t\n\r");
     700:	ce 01       	movw	r24, r28
     702:	0b 96       	adiw	r24, 0x0b	; 11
     704:	6b e6       	ldi	r22, 0x6B	; 107
     706:	72 e0       	ldi	r23, 0x02	; 2
     708:	0e 94 d5 07 	call	0xfaa	; 0xfaa <strtok>
     70c:	8c 01       	movw	r16, r24
	cp1 = strtok(NULL, " \t\n\r");
     70e:	80 e0       	ldi	r24, 0x00	; 0
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	6b e6       	ldi	r22, 0x6B	; 107
     714:	72 e0       	ldi	r23, 0x02	; 2
     716:	0e 94 d5 07 	call	0xfaa	; 0xfaa <strtok>
     71a:	7c 01       	movw	r14, r24
	cp2 = strtok(NULL, " \t\n\r");
     71c:	80 e0       	ldi	r24, 0x00	; 0
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	6b e6       	ldi	r22, 0x6B	; 107
     722:	72 e0       	ldi	r23, 0x02	; 2
     724:	0e 94 d5 07 	call	0xfaa	; 0xfaa <strtok>
     728:	5c 01       	movw	r10, r24
	cp3 = strtok(NULL, " \t\n\r");
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	6b e6       	ldi	r22, 0x6B	; 107
     730:	72 e0       	ldi	r23, 0x02	; 2
     732:	0e 94 d5 07 	call	0xfaa	; 0xfaa <strtok>
     736:	6c 01       	movw	r12, r24

	if (cp0 == NULL){
     738:	01 15       	cp	r16, r1
     73a:	11 05       	cpc	r17, r1
     73c:	39 f4       	brne	.+14     	; 0x74c <task_cmd+0x80>
		printf("!!!-111\n");
     73e:	80 e7       	ldi	r24, 0x70	; 112
     740:	92 e0       	ldi	r25, 0x02	; 2
     742:	0e 94 8c 08 	call	0x1118	; 0x1118 <puts>
		tour_timer();
     746:	0e 94 13 04 	call	0x826	; 0x826 <tour_timer>
     74a:	4f c0       	rjmp	.+158    	; 0x7ea <task_cmd+0x11e>
		printf("$ "); 
		return;
	}
	if(!strcmp(cp0, "prime")){
     74c:	c8 01       	movw	r24, r16
     74e:	68 e7       	ldi	r22, 0x78	; 120
     750:	72 e0       	ldi	r23, 0x02	; 2
     752:	0e 94 da 07 	call	0xfb4	; 0xfb4 <strcmp>
     756:	00 97       	sbiw	r24, 0x00	; 0
     758:	21 f4       	brne	.+8      	; 0x762 <task_cmd+0x96>
		task_prime(cp1);
     75a:	c7 01       	movw	r24, r14
     75c:	0e 94 98 02 	call	0x530	; 0x530 <task_prime>
     760:	44 c0       	rjmp	.+136    	; 0x7ea <task_cmd+0x11e>
	}
	else if(!strcmp(cp0, "timer")){
     762:	c8 01       	movw	r24, r16
     764:	6e e7       	ldi	r22, 0x7E	; 126
     766:	72 e0       	ldi	r23, 0x02	; 2
     768:	0e 94 da 07 	call	0xfb4	; 0xfb4 <strcmp>
     76c:	00 97       	sbiw	r24, 0x00	; 0
     76e:	c9 f5       	brne	.+114    	; 0x7e2 <task_cmd+0x116>
		if(cp1 == NULL){
     770:	e1 14       	cp	r14, r1
     772:	f1 04       	cpc	r15, r1
     774:	19 f4       	brne	.+6      	; 0x77c <task_cmd+0xb0>
			printf("!!!-222\n");
     776:	84 e8       	ldi	r24, 0x84	; 132
     778:	92 e0       	ldi	r25, 0x02	; 2
     77a:	35 c0       	rjmp	.+106    	; 0x7e6 <task_cmd+0x11a>
			printf("$ "); 
			return;
		}
		ms = atoi(cp1)/256;
     77c:	c7 01       	movw	r24, r14
     77e:	0e 94 b7 07 	call	0xf6e	; 0xf6e <atoi>
     782:	60 e0       	ldi	r22, 0x00	; 0
     784:	71 e0       	ldi	r23, 0x01	; 1
     786:	0e 94 61 06 	call	0xcc2	; 0xcc2 <__divmodhi4>
     78a:	8b 01       	movw	r16, r22
		if(!strcmp(cp2, "prime")){
     78c:	c5 01       	movw	r24, r10
     78e:	68 e7       	ldi	r22, 0x78	; 120
     790:	72 e0       	ldi	r23, 0x02	; 2
     792:	0e 94 da 07 	call	0xfb4	; 0xfb4 <strcmp>
     796:	00 97       	sbiw	r24, 0x00	; 0
     798:	19 f4       	brne	.+6      	; 0x7a0 <task_cmd+0xd4>
			task.fun = task_prime;
     79a:	88 e9       	ldi	r24, 0x98	; 152
     79c:	92 e0       	ldi	r25, 0x02	; 2
     79e:	09 c0       	rjmp	.+18     	; 0x7b2 <task_cmd+0xe6>
			cli();
			insert_timer(&task, ms);
			sei();

		}
		else if(!strcmp(cp2, "led")){
     7a0:	c5 01       	movw	r24, r10
     7a2:	6d e8       	ldi	r22, 0x8D	; 141
     7a4:	72 e0       	ldi	r23, 0x02	; 2
     7a6:	0e 94 da 07 	call	0xfb4	; 0xfb4 <strcmp>
     7aa:	00 97       	sbiw	r24, 0x00	; 0
     7ac:	b9 f4       	brne	.+46     	; 0x7dc <task_cmd+0x110>
			task.fun = task_led;
     7ae:	82 e8       	ldi	r24, 0x82	; 130
     7b0:	91 e0       	ldi	r25, 0x01	; 1
     7b2:	9a 83       	std	Y+2, r25	; 0x02
     7b4:	89 83       	std	Y+1, r24	; 0x01
			if(cp3){
				strcpy(task.arg, cp3);
     7b6:	ce 01       	movw	r24, r28
     7b8:	03 96       	adiw	r24, 0x03	; 3
			sei();

		}
		else if(!strcmp(cp2, "led")){
			task.fun = task_led;
			if(cp3){
     7ba:	c1 14       	cp	r12, r1
     7bc:	d1 04       	cpc	r13, r1
     7be:	11 f0       	breq	.+4      	; 0x7c4 <task_cmd+0xf8>
				strcpy(task.arg, cp3);
     7c0:	b6 01       	movw	r22, r12
     7c2:	02 c0       	rjmp	.+4      	; 0x7c8 <task_cmd+0xfc>
			}
			else{
				strcpy(task.arg,"");
     7c4:	6c e8       	ldi	r22, 0x8C	; 140
     7c6:	72 e0       	ldi	r23, 0x02	; 2
     7c8:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <strcpy>
			}
			cli();
     7cc:	f8 94       	cli
			insert_timer(&task, ms);
     7ce:	ce 01       	movw	r24, r28
     7d0:	01 96       	adiw	r24, 0x01	; 1
     7d2:	b8 01       	movw	r22, r16
     7d4:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <insert_timer>
			sei();
     7d8:	78 94       	sei
     7da:	07 c0       	rjmp	.+14     	; 0x7ea <task_cmd+0x11e>
		}
		else{
			printf("!!!-333\n");
     7dc:	81 e9       	ldi	r24, 0x91	; 145
     7de:	92 e0       	ldi	r25, 0x02	; 2
     7e0:	02 c0       	rjmp	.+4      	; 0x7e6 <task_cmd+0x11a>
		}
	
	}else{
			printf("!!!-444\n");
     7e2:	89 e9       	ldi	r24, 0x99	; 153
     7e4:	92 e0       	ldi	r25, 0x02	; 2
     7e6:	0e 94 8c 08 	call	0x1118	; 0x1118 <puts>
		}
		printf("$ ");
     7ea:	0f 92       	push	r0
     7ec:	0f 92       	push	r0
     7ee:	88 e6       	ldi	r24, 0x68	; 104
     7f0:	92 e0       	ldi	r25, 0x02	; 2
     7f2:	ed b7       	in	r30, 0x3d	; 61
     7f4:	fe b7       	in	r31, 0x3e	; 62
     7f6:	92 83       	std	Z+2, r25	; 0x02
     7f8:	81 83       	std	Z+1, r24	; 0x01
     7fa:	0e 94 73 08 	call	0x10e6	; 0x10e6 <printf>
     7fe:	0f 90       	pop	r0
     800:	0f 90       	pop	r0

}
     802:	c6 5b       	subi	r28, 0xB6	; 182
     804:	df 4f       	sbci	r29, 0xFF	; 255
     806:	0f b6       	in	r0, 0x3f	; 63
     808:	f8 94       	cli
     80a:	de bf       	out	0x3e, r29	; 62
     80c:	0f be       	out	0x3f, r0	; 63
     80e:	cd bf       	out	0x3d, r28	; 61
     810:	df 91       	pop	r29
     812:	cf 91       	pop	r28
     814:	1f 91       	pop	r17
     816:	0f 91       	pop	r16
     818:	ff 90       	pop	r15
     81a:	ef 90       	pop	r14
     81c:	df 90       	pop	r13
     81e:	cf 90       	pop	r12
     820:	bf 90       	pop	r11
     822:	af 90       	pop	r10
     824:	08 95       	ret

00000826 <tour_timer>:
		cp->time -= tp->time;
		pp->link = tp;
		tp->link = cp;
	}
} 
 void tour_timer(){
     826:	ef 92       	push	r14
     828:	ff 92       	push	r15
     82a:	0f 93       	push	r16
     82c:	1f 93       	push	r17
     82e:	cf 93       	push	r28
     830:	df 93       	push	r29
 	struct timer *cp;
	int    total = 0; 
 
    printf("\n");
     832:	8a e0       	ldi	r24, 0x0A	; 10
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	0e 94 85 08 	call	0x110a	; 0x110a <putchar>
	for (cp = Thead; cp != NULL; cp = cp->link) {
     83a:	c0 91 d3 02 	lds	r28, 0x02D3
     83e:	d0 91 d4 02 	lds	r29, 0x02D4
		tp->link = cp;
	}
} 
 void tour_timer(){
 	struct timer *cp;
	int    total = 0; 
     842:	00 e0       	ldi	r16, 0x00	; 0
     844:	10 e0       	ldi	r17, 0x00	; 0
 
    printf("\n");
	for (cp = Thead; cp != NULL; cp = cp->link) {
		total += cp->time;
		printf("-->%d(%d) ", cp->time, total);
     846:	81 ea       	ldi	r24, 0xA1	; 161
     848:	e8 2e       	mov	r14, r24
     84a:	82 e0       	ldi	r24, 0x02	; 2
     84c:	f8 2e       	mov	r15, r24
 void tour_timer(){
 	struct timer *cp;
	int    total = 0; 
 
    printf("\n");
	for (cp = Thead; cp != NULL; cp = cp->link) {
     84e:	20 c0       	rjmp	.+64     	; 0x890 <tour_timer+0x6a>
		total += cp->time;
     850:	88 81       	ld	r24, Y
     852:	99 81       	ldd	r25, Y+1	; 0x01
     854:	08 0f       	add	r16, r24
     856:	19 1f       	adc	r17, r25
		printf("-->%d(%d) ", cp->time, total);
     858:	00 d0       	rcall	.+0      	; 0x85a <tour_timer+0x34>
     85a:	00 d0       	rcall	.+0      	; 0x85c <tour_timer+0x36>
     85c:	ed b7       	in	r30, 0x3d	; 61
     85e:	fe b7       	in	r31, 0x3e	; 62
     860:	31 96       	adiw	r30, 0x01	; 1
     862:	ad b7       	in	r26, 0x3d	; 61
     864:	be b7       	in	r27, 0x3e	; 62
     866:	12 96       	adiw	r26, 0x02	; 2
     868:	fc 92       	st	X, r15
     86a:	ee 92       	st	-X, r14
     86c:	11 97       	sbiw	r26, 0x01	; 1
     86e:	93 83       	std	Z+3, r25	; 0x03
     870:	82 83       	std	Z+2, r24	; 0x02
     872:	15 83       	std	Z+5, r17	; 0x05
     874:	04 83       	std	Z+4, r16	; 0x04
     876:	0e 94 73 08 	call	0x10e6	; 0x10e6 <printf>
 void tour_timer(){
 	struct timer *cp;
	int    total = 0; 
 
    printf("\n");
	for (cp = Thead; cp != NULL; cp = cp->link) {
     87a:	0c 84       	ldd	r0, Y+12	; 0x0c
     87c:	dd 85       	ldd	r29, Y+13	; 0x0d
     87e:	c0 2d       	mov	r28, r0
     880:	8d b7       	in	r24, 0x3d	; 61
     882:	9e b7       	in	r25, 0x3e	; 62
     884:	06 96       	adiw	r24, 0x06	; 6
     886:	0f b6       	in	r0, 0x3f	; 63
     888:	f8 94       	cli
     88a:	9e bf       	out	0x3e, r25	; 62
     88c:	0f be       	out	0x3f, r0	; 63
     88e:	8d bf       	out	0x3d, r24	; 61
     890:	20 97       	sbiw	r28, 0x00	; 0
     892:	f1 f6       	brne	.-68     	; 0x850 <tour_timer+0x2a>
		total += cp->time;
		printf("-->%d(%d) ", cp->time, total);
	}
	printf("\n");
     894:	8a e0       	ldi	r24, 0x0A	; 10
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	0e 94 85 08 	call	0x110a	; 0x110a <putchar>
} 
     89c:	df 91       	pop	r29
     89e:	cf 91       	pop	r28
     8a0:	1f 91       	pop	r17
     8a2:	0f 91       	pop	r16
     8a4:	ff 90       	pop	r15
     8a6:	ef 90       	pop	r14
     8a8:	08 95       	ret

000008aa <free_timer>:
 
 void free_timer(){
 	struct timer *cp; 
 	for (  ; Thead != NULL; ){
     8aa:	09 c0       	rjmp	.+18     	; 0x8be <free_timer+0x14>
		cp = Thead;
		Thead = cp->link;
     8ac:	fc 01       	movw	r30, r24
     8ae:	24 85       	ldd	r18, Z+12	; 0x0c
     8b0:	35 85       	ldd	r19, Z+13	; 0x0d
     8b2:	30 93 d4 02 	sts	0x02D4, r19
     8b6:	20 93 d3 02 	sts	0x02D3, r18
		free(cp);
     8ba:	0e 94 1e 07 	call	0xe3c	; 0xe3c <free>
	printf("\n");
} 
 
 void free_timer(){
 	struct timer *cp; 
 	for (  ; Thead != NULL; ){
     8be:	80 91 d3 02 	lds	r24, 0x02D3
     8c2:	90 91 d4 02 	lds	r25, 0x02D4
     8c6:	00 97       	sbiw	r24, 0x00	; 0
     8c8:	89 f7       	brne	.-30     	; 0x8ac <free_timer+0x2>
		cp = Thead;
		Thead = cp->link;
		free(cp);
	}
} 
     8ca:	08 95       	ret

000008cc <get_timer>:

struct timer *get_timer()
{
	struct timer *tp; 
    tp = (struct timer *)malloc(sizeof(*tp));
     8cc:	8e e0       	ldi	r24, 0x0E	; 14
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	0e 94 88 06 	call	0xd10	; 0xd10 <malloc>
	return(tp);
}
     8d4:	08 95       	ret

000008d6 <insert_timer>:

#include "task.h"
#include "timer.h"
struct timer *Thead = NULL;

void insert_timer(struct task *tskp, int ms){
     8d6:	ef 92       	push	r14
     8d8:	ff 92       	push	r15
     8da:	0f 93       	push	r16
     8dc:	1f 93       	push	r17
     8de:	cf 93       	push	r28
     8e0:	df 93       	push	r29
     8e2:	f8 2e       	mov	r15, r24
     8e4:	e9 2e       	mov	r14, r25
     8e6:	8b 01       	movw	r16, r22
	int total;
	struct timer *tp, *cp, *pp;
	tp = get_timer();
     8e8:	0e 94 66 04 	call	0x8cc	; 0x8cc <get_timer>
     8ec:	ec 01       	movw	r28, r24
	tp->task = *tskp;
     8ee:	dc 01       	movw	r26, r24
     8f0:	12 96       	adiw	r26, 0x02	; 2
     8f2:	ef 2d       	mov	r30, r15
     8f4:	fe 2d       	mov	r31, r14
     8f6:	8a e0       	ldi	r24, 0x0A	; 10
     8f8:	01 90       	ld	r0, Z+
     8fa:	0d 92       	st	X+, r0
     8fc:	81 50       	subi	r24, 0x01	; 1
     8fe:	e1 f7       	brne	.-8      	; 0x8f8 <insert_timer+0x22>
	tp->time = ms; 
     900:	19 83       	std	Y+1, r17	; 0x01
     902:	08 83       	st	Y, r16
 
    if (Thead == NULL) {
     904:	e0 91 d3 02 	lds	r30, 0x02D3
     908:	f0 91 d4 02 	lds	r31, 0x02D4
     90c:	30 97       	sbiw	r30, 0x00	; 0
     90e:	29 f4       	brne	.+10     	; 0x91a <insert_timer+0x44>
		Thead = tp, tp->link = NULL;
     910:	d0 93 d4 02 	sts	0x02D4, r29
     914:	c0 93 d3 02 	sts	0x02D3, r28
     918:	2f c0       	rjmp	.+94     	; 0x978 <insert_timer+0xa2>
	struct timer *tp, *cp, *pp;
	tp = get_timer();
	tp->task = *tskp;
	tp->time = ms; 
 
    if (Thead == NULL) {
     91a:	40 e0       	ldi	r20, 0x00	; 0
     91c:	50 e0       	ldi	r21, 0x00	; 0
     91e:	20 e0       	ldi	r18, 0x00	; 0
     920:	30 e0       	ldi	r19, 0x00	; 0
     922:	01 c0       	rjmp	.+2      	; 0x926 <insert_timer+0x50>
		Thead = tp, tp->link = NULL;
		return;
	}
	pp = NULL, total = 0;
	for (cp = Thead; cp; cp = cp->link) {
     924:	fd 01       	movw	r30, r26
		total += cp->time;
     926:	80 81       	ld	r24, Z
     928:	91 81       	ldd	r25, Z+1	; 0x01
     92a:	28 0f       	add	r18, r24
     92c:	39 1f       	adc	r19, r25
		if (total >= ms)
     92e:	20 17       	cp	r18, r16
     930:	31 07       	cpc	r19, r17
     932:	34 f4       	brge	.+12     	; 0x940 <insert_timer+0x6a>
    if (Thead == NULL) {
		Thead = tp, tp->link = NULL;
		return;
	}
	pp = NULL, total = 0;
	for (cp = Thead; cp; cp = cp->link) {
     934:	a4 85       	ldd	r26, Z+12	; 0x0c
     936:	b5 85       	ldd	r27, Z+13	; 0x0d
     938:	af 01       	movw	r20, r30
     93a:	10 97       	sbiw	r26, 0x00	; 0
     93c:	99 f7       	brne	.-26     	; 0x924 <insert_timer+0x4e>
     93e:	01 c0       	rjmp	.+2      	; 0x942 <insert_timer+0x6c>
		total += cp->time;
		if (total >= ms)
     940:	df 01       	movw	r26, r30
			break;
        pp = cp;
    }      
    if (pp == NULL) {
     942:	41 15       	cp	r20, r1
     944:	51 05       	cpc	r21, r1
     946:	79 f4       	brne	.+30     	; 0x966 <insert_timer+0x90>
		cp->time -= tp->time;
     948:	8d 91       	ld	r24, X+
     94a:	9c 91       	ld	r25, X
     94c:	11 97       	sbiw	r26, 0x01	; 1
     94e:	80 1b       	sub	r24, r16
     950:	91 0b       	sbc	r25, r17
     952:	11 96       	adiw	r26, 0x01	; 1
     954:	9c 93       	st	X, r25
     956:	8e 93       	st	-X, r24
		tp->link = cp, Thead = tp;
     958:	bd 87       	std	Y+13, r27	; 0x0d
     95a:	ac 87       	std	Y+12, r26	; 0x0c
     95c:	d0 93 d4 02 	sts	0x02D4, r29
     960:	c0 93 d3 02 	sts	0x02D3, r28
     964:	24 c0       	rjmp	.+72     	; 0x9ae <insert_timer+0xd8>
	}
	else if (cp == NULL) {
     966:	10 97       	sbiw	r26, 0x00	; 0
     968:	51 f4       	brne	.+20     	; 0x97e <insert_timer+0xa8>
		tp->time -= total; // pp->time
     96a:	02 1b       	sub	r16, r18
     96c:	13 0b       	sbc	r17, r19
     96e:	19 83       	std	Y+1, r17	; 0x01
     970:	08 83       	st	Y, r16
		pp->link = tp;
     972:	fa 01       	movw	r30, r20
     974:	d5 87       	std	Z+13, r29	; 0x0d
     976:	c4 87       	std	Z+12, r28	; 0x0c
		tp->link = NULL;
     978:	1d 86       	std	Y+13, r1	; 0x0d
     97a:	1c 86       	std	Y+12, r1	; 0x0c
     97c:	18 c0       	rjmp	.+48     	; 0x9ae <insert_timer+0xd8>
	}
	else {
		total -= cp->time; // just before
     97e:	8d 91       	ld	r24, X+
     980:	9c 91       	ld	r25, X
     982:	11 97       	sbiw	r26, 0x01	; 1
     984:	b9 01       	movw	r22, r18
     986:	68 1b       	sub	r22, r24
     988:	79 0b       	sbc	r23, r25
		tp->time -= total;
     98a:	98 01       	movw	r18, r16
     98c:	26 1b       	sub	r18, r22
     98e:	37 0b       	sbc	r19, r23
     990:	39 83       	std	Y+1, r19	; 0x01
     992:	28 83       	st	Y, r18
		cp->time -= tp->time;
     994:	8d 91       	ld	r24, X+
     996:	9c 91       	ld	r25, X
     998:	11 97       	sbiw	r26, 0x01	; 1
     99a:	82 1b       	sub	r24, r18
     99c:	93 0b       	sbc	r25, r19
     99e:	11 96       	adiw	r26, 0x01	; 1
     9a0:	9c 93       	st	X, r25
     9a2:	8e 93       	st	-X, r24
		pp->link = tp;
     9a4:	fa 01       	movw	r30, r20
     9a6:	d5 87       	std	Z+13, r29	; 0x0d
     9a8:	c4 87       	std	Z+12, r28	; 0x0c
		tp->link = cp;
     9aa:	bd 87       	std	Y+13, r27	; 0x0d
     9ac:	ac 87       	std	Y+12, r26	; 0x0c
	}
} 
     9ae:	df 91       	pop	r29
     9b0:	cf 91       	pop	r28
     9b2:	1f 91       	pop	r17
     9b4:	0f 91       	pop	r16
     9b6:	ff 90       	pop	r15
     9b8:	ef 90       	pop	r14
     9ba:	08 95       	ret

000009bc <timer_init>:
	struct timer   *link;
};*/ 
 
 
void timer_init() {
	TCNT2 = 0; // Initialize   Timer/Counter2
     9bc:	10 92 b2 00 	sts	0x00B2, r1
	sbi(ASSR, AS2);// Asynchronous Timer/Counter2
     9c0:	e6 eb       	ldi	r30, 0xB6	; 182
     9c2:	f0 e0       	ldi	r31, 0x00	; 0
     9c4:	80 81       	ld	r24, Z
     9c6:	80 62       	ori	r24, 0x20	; 32
     9c8:	80 83       	st	Z, r24
	sbi(TIMSK2, TOIE2);  // Timer2 Overflow Int. Enable 
     9ca:	e0 e7       	ldi	r30, 0x70	; 112
     9cc:	f0 e0       	ldi	r31, 0x00	; 0
     9ce:	80 81       	ld	r24, Z
     9d0:	81 60       	ori	r24, 0x01	; 1
     9d2:	80 83       	st	Z, r24
	sbi(TCCR2B, CS20); sbi(TCCR2B, CS21); // 32KHz/32 prescaling, Start
     9d4:	e1 eb       	ldi	r30, 0xB1	; 177
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	80 81       	ld	r24, Z
     9da:	81 60       	ori	r24, 0x01	; 1
     9dc:	80 83       	st	Z, r24
     9de:	80 81       	ld	r24, Z
     9e0:	82 60       	ori	r24, 0x02	; 2
     9e2:	80 83       	st	Z, r24
}
     9e4:	08 95       	ret

000009e6 <timer_expire>:
void timer_expire(void){
     9e6:	cf 93       	push	r28
     9e8:	df 93       	push	r29
	struct timer *tp;

	for(; Thead != NULL && Thead->time==0;){
     9ea:	0d c0       	rjmp	.+26     	; 0xa06 <timer_expire+0x20>

		tp = Thead, Thead = tp->link;
     9ec:	8c 85       	ldd	r24, Y+12	; 0x0c
     9ee:	9d 85       	ldd	r25, Y+13	; 0x0d
     9f0:	90 93 d4 02 	sts	0x02D4, r25
     9f4:	80 93 d3 02 	sts	0x02D3, r24
		
		task_insert(&tp->task);
     9f8:	ce 01       	movw	r24, r28
     9fa:	02 96       	adiw	r24, 0x02	; 2
     9fc:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <task_insert>

		free(tp);
     a00:	ce 01       	movw	r24, r28
     a02:	0e 94 1e 07 	call	0xe3c	; 0xe3c <free>
	sbi(TCCR2B, CS20); sbi(TCCR2B, CS21); // 32KHz/32 prescaling, Start
}
void timer_expire(void){
	struct timer *tp;

	for(; Thead != NULL && Thead->time==0;){
     a06:	c0 91 d3 02 	lds	r28, 0x02D3
     a0a:	d0 91 d4 02 	lds	r29, 0x02D4
     a0e:	20 97       	sbiw	r28, 0x00	; 0
     a10:	21 f0       	breq	.+8      	; 0xa1a <timer_expire+0x34>
     a12:	88 81       	ld	r24, Y
     a14:	99 81       	ldd	r25, Y+1	; 0x01
     a16:	00 97       	sbiw	r24, 0x00	; 0
     a18:	49 f3       	breq	.-46     	; 0x9ec <timer_expire+0x6>
		
		task_insert(&tp->task);

		free(tp);
	}
}
     a1a:	df 91       	pop	r29
     a1c:	cf 91       	pop	r28
     a1e:	08 95       	ret

00000a20 <__vector_15>:
ISR(TIMER2_OVF_vect){
     a20:	1f 92       	push	r1
     a22:	0f 92       	push	r0
     a24:	0f b6       	in	r0, 0x3f	; 63
     a26:	0f 92       	push	r0
     a28:	0b b6       	in	r0, 0x3b	; 59
     a2a:	0f 92       	push	r0
     a2c:	11 24       	eor	r1, r1
     a2e:	2f 93       	push	r18
     a30:	3f 93       	push	r19
     a32:	4f 93       	push	r20
     a34:	5f 93       	push	r21
     a36:	6f 93       	push	r22
     a38:	7f 93       	push	r23
     a3a:	8f 93       	push	r24
     a3c:	9f 93       	push	r25
     a3e:	af 93       	push	r26
     a40:	bf 93       	push	r27
     a42:	ef 93       	push	r30
     a44:	ff 93       	push	r31
			led_off_all();
			led = 0;
			onesec = 0;
		}
	}*/
	if(!Thead)
     a46:	e0 91 d3 02 	lds	r30, 0x02D3
     a4a:	f0 91 d4 02 	lds	r31, 0x02D4
     a4e:	30 97       	sbiw	r30, 0x00	; 0
     a50:	49 f0       	breq	.+18     	; 0xa64 <__vector_15+0x44>
		return;
	if(--Thead->time == 0)
     a52:	80 81       	ld	r24, Z
     a54:	91 81       	ldd	r25, Z+1	; 0x01
     a56:	01 97       	sbiw	r24, 0x01	; 1
     a58:	91 83       	std	Z+1, r25	; 0x01
     a5a:	80 83       	st	Z, r24
     a5c:	00 97       	sbiw	r24, 0x00	; 0
     a5e:	11 f4       	brne	.+4      	; 0xa64 <__vector_15+0x44>
		timer_expire();
     a60:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <timer_expire>
}
     a64:	ff 91       	pop	r31
     a66:	ef 91       	pop	r30
     a68:	bf 91       	pop	r27
     a6a:	af 91       	pop	r26
     a6c:	9f 91       	pop	r25
     a6e:	8f 91       	pop	r24
     a70:	7f 91       	pop	r23
     a72:	6f 91       	pop	r22
     a74:	5f 91       	pop	r21
     a76:	4f 91       	pop	r20
     a78:	3f 91       	pop	r19
     a7a:	2f 91       	pop	r18
     a7c:	0f 90       	pop	r0
     a7e:	0b be       	out	0x3b, r0	; 59
     a80:	0f 90       	pop	r0
     a82:	0f be       	out	0x3f, r0	; 63
     a84:	0f 90       	pop	r0
     a86:	1f 90       	pop	r1
     a88:	18 95       	reti

00000a8a <uart_getchar>:
}
int uart_getchar(FILE *stream)
{
	char ch;
 	do {
 		cli();
     a8a:	f8 94       	cli
 		ch = qi_delete();
     a8c:	0e 94 3c 02 	call	0x478	; 0x478 <qi_delete>
 		sei();
     a90:	78 94       	sei
 	} while (ch == 0);
     a92:	88 23       	and	r24, r24
     a94:	d1 f3       	breq	.-12     	; 0xa8a <uart_getchar>
 	if (ch == ETX) return(-1);
     a96:	84 30       	cpi	r24, 0x04	; 4
     a98:	11 f0       	breq	.+4      	; 0xa9e <uart_getchar+0x14>
 	else return(ch);
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	08 95       	ret
 	do {
 		cli();
 		ch = qi_delete();
 		sei();
 	} while (ch == 0);
 	if (ch == ETX) return(-1);
     a9e:	8f ef       	ldi	r24, 0xFF	; 255
     aa0:	9f ef       	ldi	r25, 0xFF	; 255
 	else return(ch);
 }
     aa2:	08 95       	ret

00000aa4 <uart_putchar>:
	 sbi(UCSR0B, RXEN0); // RX enable
 	 sbi(UCSR0B, RXCIE0); // RX complete interrupt enable 
 }

int uart_putchar(char ch, FILE *stream)
{
     aa4:	cf 93       	push	r28
     aa6:	c8 2f       	mov	r28, r24

	 if (ch == '\n')
     aa8:	8a 30       	cpi	r24, 0x0A	; 10
     aaa:	19 f4       	brne	.+6      	; 0xab2 <uart_putchar+0xe>
	 	uart_putchar('\r', stream);
     aac:	8d e0       	ldi	r24, 0x0D	; 13
     aae:	0e 94 52 05 	call	0xaa4	; 0xaa4 <uart_putchar>
	 cli(); /* clear interrupt flag */
     ab2:	f8 94       	cli
	 if (!uart_busy) {
     ab4:	80 91 85 05 	lds	r24, 0x0585
     ab8:	88 23       	and	r24, r24
     aba:	61 f4       	brne	.+24     	; 0xad4 <uart_putchar+0x30>
	 	UDR0 = ch;
     abc:	c0 93 c6 00 	sts	0x00C6, r28
	 	uart_busy = 1;
     ac0:	81 e0       	ldi	r24, 0x01	; 1
     ac2:	80 93 85 05 	sts	0x0585, r24
     ac6:	0b c0       	rjmp	.+22     	; 0xade <uart_putchar+0x3a>
	 }
	 else {
	 	while(qo_insert(ch) == 0) {
	 		sei();
     ac8:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     aca:	81 e2       	ldi	r24, 0x21	; 33
     acc:	8a 95       	dec	r24
     ace:	f1 f7       	brne	.-4      	; 0xacc <uart_putchar+0x28>
     ad0:	00 00       	nop
	 		_delay_us(100);
	 		cli();
     ad2:	f8 94       	cli
	 if (!uart_busy) {
	 	UDR0 = ch;
	 	uart_busy = 1;
	 }
	 else {
	 	while(qo_insert(ch) == 0) {
     ad4:	8c 2f       	mov	r24, r28
     ad6:	0e 94 59 02 	call	0x4b2	; 0x4b2 <qo_insert>
     ada:	00 97       	sbiw	r24, 0x00	; 0
     adc:	a9 f3       	breq	.-22     	; 0xac8 <uart_putchar+0x24>
	 		sei();
	 		_delay_us(100);
	 		cli();
	 	}
	 }
	 sei(); /* set interrupt flag */
     ade:	78 94       	sei
	 return(1);
}
     ae0:	81 e0       	ldi	r24, 0x01	; 1
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	cf 91       	pop	r28
     ae6:	08 95       	ret

00000ae8 <uart_init>:
 FILE Mystdin = FDEV_SETUP_STREAM (NULL, uart_getchar,_FDEV_SETUP_READ);
 unsigned char uart_busy;

 void uart_init()
 {
 	 stdin = &Mystdin;
     ae8:	8d ea       	ldi	r24, 0xAD	; 173
     aea:	92 e0       	ldi	r25, 0x02	; 2
     aec:	90 93 8b 05 	sts	0x058B, r25
     af0:	80 93 8a 05 	sts	0x058A, r24
	 stdout = &Mystdout;
     af4:	8b eb       	ldi	r24, 0xBB	; 187
     af6:	92 e0       	ldi	r25, 0x02	; 2
     af8:	90 93 8d 05 	sts	0x058D, r25
     afc:	80 93 8c 05 	sts	0x058C, r24
	 q_init();
     b00:	0e 94 09 02 	call	0x412	; 0x412 <q_init>
	 uart_busy = 0; // false
     b04:	10 92 85 05 	sts	0x0585, r1
	 UBRR0H = 0x00; UBRR0L = 0x07;
     b08:	10 92 c5 00 	sts	0x00C5, r1
     b0c:	87 e0       	ldi	r24, 0x07	; 7
     b0e:	80 93 c4 00 	sts	0x00C4, r24
	 sbi(UCSR0A, U2X0); // UCSR)A |= (1 << U2X0);
     b12:	e0 ec       	ldi	r30, 0xC0	; 192
     b14:	f0 e0       	ldi	r31, 0x00	; 0
     b16:	80 81       	ld	r24, Z
     b18:	82 60       	ori	r24, 0x02	; 2
     b1a:	80 83       	st	Z, r24
	 sbi(UCSR0B, TXEN0);
     b1c:	e1 ec       	ldi	r30, 0xC1	; 193
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	80 81       	ld	r24, Z
     b22:	88 60       	ori	r24, 0x08	; 8
     b24:	80 83       	st	Z, r24
	 sbi(UCSR0B, TXCIE0);
     b26:	80 81       	ld	r24, Z
     b28:	80 64       	ori	r24, 0x40	; 64
     b2a:	80 83       	st	Z, r24
	 sbi(UCSR0B, RXEN0); // RX enable
     b2c:	80 81       	ld	r24, Z
     b2e:	80 61       	ori	r24, 0x10	; 16
     b30:	80 83       	st	Z, r24
 	 sbi(UCSR0B, RXCIE0); // RX complete interrupt enable 
     b32:	80 81       	ld	r24, Z
     b34:	80 68       	ori	r24, 0x80	; 128
     b36:	80 83       	st	Z, r24
 }
     b38:	08 95       	ret

00000b3a <uart_echo>:
 	} while (ch == 0);
 	if (ch == ETX) return(-1);
 	else return(ch);
 }
 void uart_echo(char ch)
 {
     b3a:	cf 93       	push	r28
     b3c:	c8 2f       	mov	r28, r24
 	if (ch == '\n') uart_echo('\r');
     b3e:	8a 30       	cpi	r24, 0x0A	; 10
     b40:	19 f4       	brne	.+6      	; 0xb48 <uart_echo+0xe>
     b42:	8d e0       	ldi	r24, 0x0D	; 13
     b44:	0e 94 9d 05 	call	0xb3a	; 0xb3a <uart_echo>
 	if (!uart_busy) {
     b48:	80 91 85 05 	lds	r24, 0x0585
     b4c:	88 23       	and	r24, r24
     b4e:	31 f4       	brne	.+12     	; 0xb5c <uart_echo+0x22>
 		UDR0 = ch;
     b50:	c0 93 c6 00 	sts	0x00C6, r28
 		uart_busy = 1;
     b54:	81 e0       	ldi	r24, 0x01	; 1
     b56:	80 93 85 05 	sts	0x0585, r24
     b5a:	03 c0       	rjmp	.+6      	; 0xb62 <uart_echo+0x28>
 	}
 	else
 	qo_insert(ch);
     b5c:	8c 2f       	mov	r24, r28
     b5e:	0e 94 59 02 	call	0x4b2	; 0x4b2 <qo_insert>
 }
     b62:	cf 91       	pop	r28
     b64:	08 95       	ret

00000b66 <__vector_27>:

ISR(USART0_TX_vect)
{
     b66:	1f 92       	push	r1
     b68:	0f 92       	push	r0
     b6a:	0f b6       	in	r0, 0x3f	; 63
     b6c:	0f 92       	push	r0
     b6e:	0b b6       	in	r0, 0x3b	; 59
     b70:	0f 92       	push	r0
     b72:	11 24       	eor	r1, r1
     b74:	2f 93       	push	r18
     b76:	3f 93       	push	r19
     b78:	4f 93       	push	r20
     b7a:	5f 93       	push	r21
     b7c:	6f 93       	push	r22
     b7e:	7f 93       	push	r23
     b80:	8f 93       	push	r24
     b82:	9f 93       	push	r25
     b84:	af 93       	push	r26
     b86:	bf 93       	push	r27
     b88:	ef 93       	push	r30
     b8a:	ff 93       	push	r31
	 char ch;
	 if ((ch = qo_delete()) == 0)
     b8c:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <qo_delete>
     b90:	88 23       	and	r24, r24
     b92:	19 f4       	brne	.+6      	; 0xb9a <__vector_27+0x34>
	 	uart_busy = 0;
     b94:	10 92 85 05 	sts	0x0585, r1
     b98:	02 c0       	rjmp	.+4      	; 0xb9e <__vector_27+0x38>
	 else
		UDR0 = ch;
     b9a:	80 93 c6 00 	sts	0x00C6, r24
} 
     b9e:	ff 91       	pop	r31
     ba0:	ef 91       	pop	r30
     ba2:	bf 91       	pop	r27
     ba4:	af 91       	pop	r26
     ba6:	9f 91       	pop	r25
     ba8:	8f 91       	pop	r24
     baa:	7f 91       	pop	r23
     bac:	6f 91       	pop	r22
     bae:	5f 91       	pop	r21
     bb0:	4f 91       	pop	r20
     bb2:	3f 91       	pop	r19
     bb4:	2f 91       	pop	r18
     bb6:	0f 90       	pop	r0
     bb8:	0b be       	out	0x3b, r0	; 59
     bba:	0f 90       	pop	r0
     bbc:	0f be       	out	0x3f, r0	; 63
     bbe:	0f 90       	pop	r0
     bc0:	1f 90       	pop	r1
     bc2:	18 95       	reti

00000bc4 <__vector_25>:
ISR(USART0_RX_vect)
{
     bc4:	1f 92       	push	r1
     bc6:	0f 92       	push	r0
     bc8:	0f b6       	in	r0, 0x3f	; 63
     bca:	0f 92       	push	r0
     bcc:	0b b6       	in	r0, 0x3b	; 59
     bce:	0f 92       	push	r0
     bd0:	11 24       	eor	r1, r1
     bd2:	1f 93       	push	r17
     bd4:	2f 93       	push	r18
     bd6:	3f 93       	push	r19
     bd8:	4f 93       	push	r20
     bda:	5f 93       	push	r21
     bdc:	6f 93       	push	r22
     bde:	7f 93       	push	r23
     be0:	8f 93       	push	r24
     be2:	9f 93       	push	r25
     be4:	af 93       	push	r26
     be6:	bf 93       	push	r27
     be8:	ef 93       	push	r30
     bea:	ff 93       	push	r31
     bec:	cf 93       	push	r28
     bee:	df 93       	push	r29
     bf0:	cd b7       	in	r28, 0x3d	; 61
     bf2:	de b7       	in	r29, 0x3e	; 62
     bf4:	2a 97       	sbiw	r28, 0x0a	; 10
     bf6:	de bf       	out	0x3e, r29	; 62
     bf8:	cd bf       	out	0x3d, r28	; 61
	struct task task;
 	char ch;
 	ch = UDR0;
     bfa:	10 91 c6 00 	lds	r17, 0x00C6
	if (ch != ETX) {
     bfe:	14 30       	cpi	r17, 0x04	; 4
     c00:	31 f0       	breq	.+12     	; 0xc0e <__vector_25+0x4a>
 		if (ch == '\r')
     c02:	1d 30       	cpi	r17, 0x0D	; 13
     c04:	09 f4       	brne	.+2      	; 0xc08 <__vector_25+0x44>
 		ch = '\n';
     c06:	1a e0       	ldi	r17, 0x0A	; 10
 		uart_echo(ch);
     c08:	81 2f       	mov	r24, r17
     c0a:	0e 94 9d 05 	call	0xb3a	; 0xb3a <uart_echo>
 	}

 	qi_insert(ch);
     c0e:	81 2f       	mov	r24, r17
     c10:	0e 94 1a 02 	call	0x434	; 0x434 <qi_insert>
	if(ch == ETX || ch == '\n'){
     c14:	14 30       	cpi	r17, 0x04	; 4
     c16:	11 f0       	breq	.+4      	; 0xc1c <__vector_25+0x58>
     c18:	1a 30       	cpi	r17, 0x0A	; 10
     c1a:	71 f4       	brne	.+28     	; 0xc38 <__vector_25+0x74>
		task.fun = task_cmd;
     c1c:	86 e6       	ldi	r24, 0x66	; 102
     c1e:	93 e0       	ldi	r25, 0x03	; 3
     c20:	9a 83       	std	Y+2, r25	; 0x02
     c22:	89 83       	std	Y+1, r24	; 0x01
		strcpy(task.arg, "");
     c24:	ce 01       	movw	r24, r28
     c26:	03 96       	adiw	r24, 0x03	; 3
     c28:	6c ea       	ldi	r22, 0xAC	; 172
     c2a:	72 e0       	ldi	r23, 0x02	; 2
     c2c:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <strcpy>
		task_insert(&task);
     c30:	ce 01       	movw	r24, r28
     c32:	01 96       	adiw	r24, 0x01	; 1
     c34:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <task_insert>
	}
}
     c38:	2a 96       	adiw	r28, 0x0a	; 10
     c3a:	de bf       	out	0x3e, r29	; 62
     c3c:	cd bf       	out	0x3d, r28	; 61
     c3e:	df 91       	pop	r29
     c40:	cf 91       	pop	r28
     c42:	ff 91       	pop	r31
     c44:	ef 91       	pop	r30
     c46:	bf 91       	pop	r27
     c48:	af 91       	pop	r26
     c4a:	9f 91       	pop	r25
     c4c:	8f 91       	pop	r24
     c4e:	7f 91       	pop	r23
     c50:	6f 91       	pop	r22
     c52:	5f 91       	pop	r21
     c54:	4f 91       	pop	r20
     c56:	3f 91       	pop	r19
     c58:	2f 91       	pop	r18
     c5a:	1f 91       	pop	r17
     c5c:	0f 90       	pop	r0
     c5e:	0b be       	out	0x3b, r0	; 59
     c60:	0f 90       	pop	r0
     c62:	0f be       	out	0x3f, r0	; 63
     c64:	0f 90       	pop	r0
     c66:	1f 90       	pop	r1
     c68:	18 95       	reti

00000c6a <main>:

#include "timer.h"
#include "led.h"

int main()
{
     c6a:	cf 93       	push	r28
     c6c:	df 93       	push	r29
     c6e:	cd b7       	in	r28, 0x3d	; 61
     c70:	de b7       	in	r29, 0x3e	; 62
     c72:	2a 97       	sbiw	r28, 0x0a	; 10
     c74:	0f b6       	in	r0, 0x3f	; 63
     c76:	f8 94       	cli
     c78:	de bf       	out	0x3e, r29	; 62
     c7a:	0f be       	out	0x3f, r0	; 63
     c7c:	cd bf       	out	0x3d, r28	; 61
	int tag;
	struct task task;
	led_init();
     c7e:	0e 94 71 01 	call	0x2e2	; 0x2e2 <led_init>
	uart_init();
     c82:	0e 94 74 05 	call	0xae8	; 0xae8 <uart_init>
	task_init();
     c86:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <task_init>
	timer_init();
     c8a:	0e 94 de 04 	call	0x9bc	; 0x9bc <timer_init>

	printf("$ ");
     c8e:	0f 92       	push	r0
     c90:	0f 92       	push	r0
     c92:	82 e4       	ldi	r24, 0x42	; 66
     c94:	92 e0       	ldi	r25, 0x02	; 2
     c96:	ed b7       	in	r30, 0x3d	; 61
     c98:	fe b7       	in	r31, 0x3e	; 62
     c9a:	92 83       	std	Z+2, r25	; 0x02
     c9c:	81 83       	std	Z+1, r24	; 0x01
     c9e:	0e 94 73 08 	call	0x10e6	; 0x10e6 <printf>
     ca2:	0f 90       	pop	r0
     ca4:	0f 90       	pop	r0
	while(1){
		cli();
     ca6:	f8 94       	cli
		tag = task_delete(&task);
     ca8:	ce 01       	movw	r24, r28
     caa:	01 96       	adiw	r24, 0x01	; 1
     cac:	0e 94 31 03 	call	0x662	; 0x662 <task_delete>
		sei();
     cb0:	78 94       	sei
		if(tag)
     cb2:	00 97       	sbiw	r24, 0x00	; 0
     cb4:	c1 f3       	breq	.-16     	; 0xca6 <main+0x3c>
			((*task.fun))(task.arg);
     cb6:	e9 81       	ldd	r30, Y+1	; 0x01
     cb8:	fa 81       	ldd	r31, Y+2	; 0x02
     cba:	ce 01       	movw	r24, r28
     cbc:	03 96       	adiw	r24, 0x03	; 3
     cbe:	19 95       	eicall
     cc0:	f2 cf       	rjmp	.-28     	; 0xca6 <main+0x3c>

00000cc2 <__divmodhi4>:
     cc2:	97 fb       	bst	r25, 7
     cc4:	09 2e       	mov	r0, r25
     cc6:	07 26       	eor	r0, r23
     cc8:	0a d0       	rcall	.+20     	; 0xcde <__divmodhi4_neg1>
     cca:	77 fd       	sbrc	r23, 7
     ccc:	04 d0       	rcall	.+8      	; 0xcd6 <__divmodhi4_neg2>
     cce:	0c d0       	rcall	.+24     	; 0xce8 <__udivmodhi4>
     cd0:	06 d0       	rcall	.+12     	; 0xcde <__divmodhi4_neg1>
     cd2:	00 20       	and	r0, r0
     cd4:	1a f4       	brpl	.+6      	; 0xcdc <__divmodhi4_exit>

00000cd6 <__divmodhi4_neg2>:
     cd6:	70 95       	com	r23
     cd8:	61 95       	neg	r22
     cda:	7f 4f       	sbci	r23, 0xFF	; 255

00000cdc <__divmodhi4_exit>:
     cdc:	08 95       	ret

00000cde <__divmodhi4_neg1>:
     cde:	f6 f7       	brtc	.-4      	; 0xcdc <__divmodhi4_exit>
     ce0:	90 95       	com	r25
     ce2:	81 95       	neg	r24
     ce4:	9f 4f       	sbci	r25, 0xFF	; 255
     ce6:	08 95       	ret

00000ce8 <__udivmodhi4>:
     ce8:	aa 1b       	sub	r26, r26
     cea:	bb 1b       	sub	r27, r27
     cec:	51 e1       	ldi	r21, 0x11	; 17
     cee:	07 c0       	rjmp	.+14     	; 0xcfe <__udivmodhi4_ep>

00000cf0 <__udivmodhi4_loop>:
     cf0:	aa 1f       	adc	r26, r26
     cf2:	bb 1f       	adc	r27, r27
     cf4:	a6 17       	cp	r26, r22
     cf6:	b7 07       	cpc	r27, r23
     cf8:	10 f0       	brcs	.+4      	; 0xcfe <__udivmodhi4_ep>
     cfa:	a6 1b       	sub	r26, r22
     cfc:	b7 0b       	sbc	r27, r23

00000cfe <__udivmodhi4_ep>:
     cfe:	88 1f       	adc	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	5a 95       	dec	r21
     d04:	a9 f7       	brne	.-22     	; 0xcf0 <__udivmodhi4_loop>
     d06:	80 95       	com	r24
     d08:	90 95       	com	r25
     d0a:	bc 01       	movw	r22, r24
     d0c:	cd 01       	movw	r24, r26
     d0e:	08 95       	ret

00000d10 <malloc>:
     d10:	cf 93       	push	r28
     d12:	df 93       	push	r29
     d14:	ac 01       	movw	r20, r24
     d16:	82 30       	cpi	r24, 0x02	; 2
     d18:	91 05       	cpc	r25, r1
     d1a:	10 f4       	brcc	.+4      	; 0xd20 <malloc+0x10>
     d1c:	42 e0       	ldi	r20, 0x02	; 2
     d1e:	50 e0       	ldi	r21, 0x00	; 0
     d20:	e0 91 88 05 	lds	r30, 0x0588
     d24:	f0 91 89 05 	lds	r31, 0x0589
     d28:	20 e0       	ldi	r18, 0x00	; 0
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	a0 e0       	ldi	r26, 0x00	; 0
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	24 c0       	rjmp	.+72     	; 0xd7a <malloc+0x6a>
     d32:	80 81       	ld	r24, Z
     d34:	91 81       	ldd	r25, Z+1	; 0x01
     d36:	84 17       	cp	r24, r20
     d38:	95 07       	cpc	r25, r21
     d3a:	d0 f0       	brcs	.+52     	; 0xd70 <malloc+0x60>
     d3c:	84 17       	cp	r24, r20
     d3e:	95 07       	cpc	r25, r21
     d40:	71 f4       	brne	.+28     	; 0xd5e <malloc+0x4e>
     d42:	82 81       	ldd	r24, Z+2	; 0x02
     d44:	93 81       	ldd	r25, Z+3	; 0x03
     d46:	10 97       	sbiw	r26, 0x00	; 0
     d48:	29 f0       	breq	.+10     	; 0xd54 <malloc+0x44>
     d4a:	13 96       	adiw	r26, 0x03	; 3
     d4c:	9c 93       	st	X, r25
     d4e:	8e 93       	st	-X, r24
     d50:	12 97       	sbiw	r26, 0x02	; 2
     d52:	2c c0       	rjmp	.+88     	; 0xdac <malloc+0x9c>
     d54:	90 93 89 05 	sts	0x0589, r25
     d58:	80 93 88 05 	sts	0x0588, r24
     d5c:	27 c0       	rjmp	.+78     	; 0xdac <malloc+0x9c>
     d5e:	21 15       	cp	r18, r1
     d60:	31 05       	cpc	r19, r1
     d62:	19 f0       	breq	.+6      	; 0xd6a <malloc+0x5a>
     d64:	82 17       	cp	r24, r18
     d66:	93 07       	cpc	r25, r19
     d68:	18 f4       	brcc	.+6      	; 0xd70 <malloc+0x60>
     d6a:	9c 01       	movw	r18, r24
     d6c:	bd 01       	movw	r22, r26
     d6e:	ef 01       	movw	r28, r30
     d70:	92 81       	ldd	r25, Z+2	; 0x02
     d72:	83 81       	ldd	r24, Z+3	; 0x03
     d74:	df 01       	movw	r26, r30
     d76:	e9 2f       	mov	r30, r25
     d78:	f8 2f       	mov	r31, r24
     d7a:	30 97       	sbiw	r30, 0x00	; 0
     d7c:	d1 f6       	brne	.-76     	; 0xd32 <malloc+0x22>
     d7e:	21 15       	cp	r18, r1
     d80:	31 05       	cpc	r19, r1
     d82:	f9 f0       	breq	.+62     	; 0xdc2 <malloc+0xb2>
     d84:	c9 01       	movw	r24, r18
     d86:	84 1b       	sub	r24, r20
     d88:	95 0b       	sbc	r25, r21
     d8a:	84 30       	cpi	r24, 0x04	; 4
     d8c:	91 05       	cpc	r25, r1
     d8e:	80 f4       	brcc	.+32     	; 0xdb0 <malloc+0xa0>
     d90:	8a 81       	ldd	r24, Y+2	; 0x02
     d92:	9b 81       	ldd	r25, Y+3	; 0x03
     d94:	61 15       	cp	r22, r1
     d96:	71 05       	cpc	r23, r1
     d98:	21 f0       	breq	.+8      	; 0xda2 <malloc+0x92>
     d9a:	fb 01       	movw	r30, r22
     d9c:	93 83       	std	Z+3, r25	; 0x03
     d9e:	82 83       	std	Z+2, r24	; 0x02
     da0:	04 c0       	rjmp	.+8      	; 0xdaa <malloc+0x9a>
     da2:	90 93 89 05 	sts	0x0589, r25
     da6:	80 93 88 05 	sts	0x0588, r24
     daa:	fe 01       	movw	r30, r28
     dac:	32 96       	adiw	r30, 0x02	; 2
     dae:	42 c0       	rjmp	.+132    	; 0xe34 <malloc+0x124>
     db0:	fe 01       	movw	r30, r28
     db2:	e8 0f       	add	r30, r24
     db4:	f9 1f       	adc	r31, r25
     db6:	41 93       	st	Z+, r20
     db8:	51 93       	st	Z+, r21
     dba:	02 97       	sbiw	r24, 0x02	; 2
     dbc:	99 83       	std	Y+1, r25	; 0x01
     dbe:	88 83       	st	Y, r24
     dc0:	39 c0       	rjmp	.+114    	; 0xe34 <malloc+0x124>
     dc2:	80 91 86 05 	lds	r24, 0x0586
     dc6:	90 91 87 05 	lds	r25, 0x0587
     dca:	00 97       	sbiw	r24, 0x00	; 0
     dcc:	41 f4       	brne	.+16     	; 0xdde <malloc+0xce>
     dce:	80 91 cb 02 	lds	r24, 0x02CB
     dd2:	90 91 cc 02 	lds	r25, 0x02CC
     dd6:	90 93 87 05 	sts	0x0587, r25
     dda:	80 93 86 05 	sts	0x0586, r24
     dde:	20 91 c9 02 	lds	r18, 0x02C9
     de2:	30 91 ca 02 	lds	r19, 0x02CA
     de6:	21 15       	cp	r18, r1
     de8:	31 05       	cpc	r19, r1
     dea:	41 f4       	brne	.+16     	; 0xdfc <malloc+0xec>
     dec:	2d b7       	in	r18, 0x3d	; 61
     dee:	3e b7       	in	r19, 0x3e	; 62
     df0:	80 91 cd 02 	lds	r24, 0x02CD
     df4:	90 91 ce 02 	lds	r25, 0x02CE
     df8:	28 1b       	sub	r18, r24
     dfa:	39 0b       	sbc	r19, r25
     dfc:	e0 91 86 05 	lds	r30, 0x0586
     e00:	f0 91 87 05 	lds	r31, 0x0587
     e04:	e2 17       	cp	r30, r18
     e06:	f3 07       	cpc	r31, r19
     e08:	98 f4       	brcc	.+38     	; 0xe30 <malloc+0x120>
     e0a:	2e 1b       	sub	r18, r30
     e0c:	3f 0b       	sbc	r19, r31
     e0e:	24 17       	cp	r18, r20
     e10:	35 07       	cpc	r19, r21
     e12:	70 f0       	brcs	.+28     	; 0xe30 <malloc+0x120>
     e14:	ca 01       	movw	r24, r20
     e16:	02 96       	adiw	r24, 0x02	; 2
     e18:	28 17       	cp	r18, r24
     e1a:	39 07       	cpc	r19, r25
     e1c:	48 f0       	brcs	.+18     	; 0xe30 <malloc+0x120>
     e1e:	8e 0f       	add	r24, r30
     e20:	9f 1f       	adc	r25, r31
     e22:	90 93 87 05 	sts	0x0587, r25
     e26:	80 93 86 05 	sts	0x0586, r24
     e2a:	41 93       	st	Z+, r20
     e2c:	51 93       	st	Z+, r21
     e2e:	02 c0       	rjmp	.+4      	; 0xe34 <malloc+0x124>
     e30:	e0 e0       	ldi	r30, 0x00	; 0
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	cf 01       	movw	r24, r30
     e36:	df 91       	pop	r29
     e38:	cf 91       	pop	r28
     e3a:	08 95       	ret

00000e3c <free>:
     e3c:	0f 93       	push	r16
     e3e:	1f 93       	push	r17
     e40:	cf 93       	push	r28
     e42:	df 93       	push	r29
     e44:	9c 01       	movw	r18, r24
     e46:	00 97       	sbiw	r24, 0x00	; 0
     e48:	09 f4       	brne	.+2      	; 0xe4c <free+0x10>
     e4a:	8c c0       	rjmp	.+280    	; 0xf64 <free+0x128>
     e4c:	dc 01       	movw	r26, r24
     e4e:	12 97       	sbiw	r26, 0x02	; 2
     e50:	13 96       	adiw	r26, 0x03	; 3
     e52:	1c 92       	st	X, r1
     e54:	1e 92       	st	-X, r1
     e56:	12 97       	sbiw	r26, 0x02	; 2
     e58:	60 91 88 05 	lds	r22, 0x0588
     e5c:	70 91 89 05 	lds	r23, 0x0589
     e60:	61 15       	cp	r22, r1
     e62:	71 05       	cpc	r23, r1
     e64:	89 f4       	brne	.+34     	; 0xe88 <free+0x4c>
     e66:	8d 91       	ld	r24, X+
     e68:	9c 91       	ld	r25, X
     e6a:	11 97       	sbiw	r26, 0x01	; 1
     e6c:	82 0f       	add	r24, r18
     e6e:	93 1f       	adc	r25, r19
     e70:	20 91 86 05 	lds	r18, 0x0586
     e74:	30 91 87 05 	lds	r19, 0x0587
     e78:	28 17       	cp	r18, r24
     e7a:	39 07       	cpc	r19, r25
     e7c:	69 f5       	brne	.+90     	; 0xed8 <free+0x9c>
     e7e:	b0 93 87 05 	sts	0x0587, r27
     e82:	a0 93 86 05 	sts	0x0586, r26
     e86:	6e c0       	rjmp	.+220    	; 0xf64 <free+0x128>
     e88:	fb 01       	movw	r30, r22
     e8a:	40 e0       	ldi	r20, 0x00	; 0
     e8c:	50 e0       	ldi	r21, 0x00	; 0
     e8e:	01 c0       	rjmp	.+2      	; 0xe92 <free+0x56>
     e90:	fc 01       	movw	r30, r24
     e92:	ea 17       	cp	r30, r26
     e94:	fb 07       	cpc	r31, r27
     e96:	30 f4       	brcc	.+12     	; 0xea4 <free+0x68>
     e98:	82 81       	ldd	r24, Z+2	; 0x02
     e9a:	93 81       	ldd	r25, Z+3	; 0x03
     e9c:	af 01       	movw	r20, r30
     e9e:	00 97       	sbiw	r24, 0x00	; 0
     ea0:	b9 f7       	brne	.-18     	; 0xe90 <free+0x54>
     ea2:	1f c0       	rjmp	.+62     	; 0xee2 <free+0xa6>
     ea4:	e9 01       	movw	r28, r18
     ea6:	22 97       	sbiw	r28, 0x02	; 2
     ea8:	fb 83       	std	Y+3, r31	; 0x03
     eaa:	ea 83       	std	Y+2, r30	; 0x02
     eac:	08 81       	ld	r16, Y
     eae:	19 81       	ldd	r17, Y+1	; 0x01
     eb0:	c9 01       	movw	r24, r18
     eb2:	80 0f       	add	r24, r16
     eb4:	91 1f       	adc	r25, r17
     eb6:	8e 17       	cp	r24, r30
     eb8:	9f 07       	cpc	r25, r31
     eba:	59 f4       	brne	.+22     	; 0xed2 <free+0x96>
     ebc:	80 81       	ld	r24, Z
     ebe:	91 81       	ldd	r25, Z+1	; 0x01
     ec0:	80 0f       	add	r24, r16
     ec2:	91 1f       	adc	r25, r17
     ec4:	02 96       	adiw	r24, 0x02	; 2
     ec6:	99 83       	std	Y+1, r25	; 0x01
     ec8:	88 83       	st	Y, r24
     eca:	82 81       	ldd	r24, Z+2	; 0x02
     ecc:	93 81       	ldd	r25, Z+3	; 0x03
     ece:	9b 83       	std	Y+3, r25	; 0x03
     ed0:	8a 83       	std	Y+2, r24	; 0x02
     ed2:	41 15       	cp	r20, r1
     ed4:	51 05       	cpc	r21, r1
     ed6:	29 f4       	brne	.+10     	; 0xee2 <free+0xa6>
     ed8:	b0 93 89 05 	sts	0x0589, r27
     edc:	a0 93 88 05 	sts	0x0588, r26
     ee0:	41 c0       	rjmp	.+130    	; 0xf64 <free+0x128>
     ee2:	fa 01       	movw	r30, r20
     ee4:	b3 83       	std	Z+3, r27	; 0x03
     ee6:	a2 83       	std	Z+2, r26	; 0x02
     ee8:	c1 91       	ld	r28, Z+
     eea:	d1 91       	ld	r29, Z+
     eec:	ec 0f       	add	r30, r28
     eee:	fd 1f       	adc	r31, r29
     ef0:	ae 17       	cp	r26, r30
     ef2:	bf 07       	cpc	r27, r31
     ef4:	81 f4       	brne	.+32     	; 0xf16 <free+0xda>
     ef6:	f9 01       	movw	r30, r18
     ef8:	92 91       	ld	r25, -Z
     efa:	82 91       	ld	r24, -Z
     efc:	8c 0f       	add	r24, r28
     efe:	9d 1f       	adc	r25, r29
     f00:	02 96       	adiw	r24, 0x02	; 2
     f02:	da 01       	movw	r26, r20
     f04:	11 96       	adiw	r26, 0x01	; 1
     f06:	9c 93       	st	X, r25
     f08:	8e 93       	st	-X, r24
     f0a:	82 81       	ldd	r24, Z+2	; 0x02
     f0c:	93 81       	ldd	r25, Z+3	; 0x03
     f0e:	13 96       	adiw	r26, 0x03	; 3
     f10:	9c 93       	st	X, r25
     f12:	8e 93       	st	-X, r24
     f14:	12 97       	sbiw	r26, 0x02	; 2
     f16:	e0 e0       	ldi	r30, 0x00	; 0
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	02 c0       	rjmp	.+4      	; 0xf20 <free+0xe4>
     f1c:	fb 01       	movw	r30, r22
     f1e:	bc 01       	movw	r22, r24
     f20:	db 01       	movw	r26, r22
     f22:	12 96       	adiw	r26, 0x02	; 2
     f24:	8d 91       	ld	r24, X+
     f26:	9c 91       	ld	r25, X
     f28:	13 97       	sbiw	r26, 0x03	; 3
     f2a:	00 97       	sbiw	r24, 0x00	; 0
     f2c:	b9 f7       	brne	.-18     	; 0xf1c <free+0xe0>
     f2e:	cb 01       	movw	r24, r22
     f30:	02 96       	adiw	r24, 0x02	; 2
     f32:	2d 91       	ld	r18, X+
     f34:	3c 91       	ld	r19, X
     f36:	11 97       	sbiw	r26, 0x01	; 1
     f38:	82 0f       	add	r24, r18
     f3a:	93 1f       	adc	r25, r19
     f3c:	20 91 86 05 	lds	r18, 0x0586
     f40:	30 91 87 05 	lds	r19, 0x0587
     f44:	28 17       	cp	r18, r24
     f46:	39 07       	cpc	r19, r25
     f48:	69 f4       	brne	.+26     	; 0xf64 <free+0x128>
     f4a:	30 97       	sbiw	r30, 0x00	; 0
     f4c:	29 f4       	brne	.+10     	; 0xf58 <free+0x11c>
     f4e:	10 92 89 05 	sts	0x0589, r1
     f52:	10 92 88 05 	sts	0x0588, r1
     f56:	02 c0       	rjmp	.+4      	; 0xf5c <free+0x120>
     f58:	13 82       	std	Z+3, r1	; 0x03
     f5a:	12 82       	std	Z+2, r1	; 0x02
     f5c:	70 93 87 05 	sts	0x0587, r23
     f60:	60 93 86 05 	sts	0x0586, r22
     f64:	df 91       	pop	r29
     f66:	cf 91       	pop	r28
     f68:	1f 91       	pop	r17
     f6a:	0f 91       	pop	r16
     f6c:	08 95       	ret

00000f6e <atoi>:
     f6e:	fc 01       	movw	r30, r24
     f70:	88 27       	eor	r24, r24
     f72:	99 27       	eor	r25, r25
     f74:	e8 94       	clt
     f76:	21 91       	ld	r18, Z+
     f78:	20 32       	cpi	r18, 0x20	; 32
     f7a:	e9 f3       	breq	.-6      	; 0xf76 <atoi+0x8>
     f7c:	29 30       	cpi	r18, 0x09	; 9
     f7e:	10 f0       	brcs	.+4      	; 0xf84 <atoi+0x16>
     f80:	2e 30       	cpi	r18, 0x0E	; 14
     f82:	c8 f3       	brcs	.-14     	; 0xf76 <atoi+0x8>
     f84:	2b 32       	cpi	r18, 0x2B	; 43
     f86:	41 f0       	breq	.+16     	; 0xf98 <atoi+0x2a>
     f88:	2d 32       	cpi	r18, 0x2D	; 45
     f8a:	39 f4       	brne	.+14     	; 0xf9a <atoi+0x2c>
     f8c:	68 94       	set
     f8e:	04 c0       	rjmp	.+8      	; 0xf98 <atoi+0x2a>
     f90:	0e 94 11 08 	call	0x1022	; 0x1022 <__mulhi_const_10>
     f94:	82 0f       	add	r24, r18
     f96:	91 1d       	adc	r25, r1
     f98:	21 91       	ld	r18, Z+
     f9a:	20 53       	subi	r18, 0x30	; 48
     f9c:	2a 30       	cpi	r18, 0x0A	; 10
     f9e:	c0 f3       	brcs	.-16     	; 0xf90 <atoi+0x22>
     fa0:	1e f4       	brtc	.+6      	; 0xfa8 <atoi+0x3a>
     fa2:	90 95       	com	r25
     fa4:	81 95       	neg	r24
     fa6:	9f 4f       	sbci	r25, 0xFF	; 255
     fa8:	08 95       	ret

00000faa <strtok>:
     faa:	45 ed       	ldi	r20, 0xD5	; 213
     fac:	52 e0       	ldi	r21, 0x02	; 2
     fae:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <strtok_r>
     fb2:	08 95       	ret

00000fb4 <strcmp>:
     fb4:	fb 01       	movw	r30, r22
     fb6:	dc 01       	movw	r26, r24
     fb8:	8d 91       	ld	r24, X+
     fba:	01 90       	ld	r0, Z+
     fbc:	80 19       	sub	r24, r0
     fbe:	01 10       	cpse	r0, r1
     fc0:	d9 f3       	breq	.-10     	; 0xfb8 <strcmp+0x4>
     fc2:	99 0b       	sbc	r25, r25
     fc4:	08 95       	ret

00000fc6 <strcpy>:
     fc6:	fb 01       	movw	r30, r22
     fc8:	dc 01       	movw	r26, r24
     fca:	01 90       	ld	r0, Z+
     fcc:	0d 92       	st	X+, r0
     fce:	00 20       	and	r0, r0
     fd0:	e1 f7       	brne	.-8      	; 0xfca <strcpy+0x4>
     fd2:	08 95       	ret

00000fd4 <strtok_r>:
     fd4:	fa 01       	movw	r30, r20
     fd6:	a1 91       	ld	r26, Z+
     fd8:	b0 81       	ld	r27, Z
     fda:	00 97       	sbiw	r24, 0x00	; 0
     fdc:	19 f4       	brne	.+6      	; 0xfe4 <strtok_r+0x10>
     fde:	10 97       	sbiw	r26, 0x00	; 0
     fe0:	e1 f0       	breq	.+56     	; 0x101a <strtok_r+0x46>
     fe2:	cd 01       	movw	r24, r26
     fe4:	dc 01       	movw	r26, r24
     fe6:	cd 01       	movw	r24, r26
     fe8:	0d 90       	ld	r0, X+
     fea:	00 20       	and	r0, r0
     fec:	11 f4       	brne	.+4      	; 0xff2 <strtok_r+0x1e>
     fee:	c0 01       	movw	r24, r0
     ff0:	13 c0       	rjmp	.+38     	; 0x1018 <strtok_r+0x44>
     ff2:	fb 01       	movw	r30, r22
     ff4:	21 91       	ld	r18, Z+
     ff6:	22 23       	and	r18, r18
     ff8:	19 f0       	breq	.+6      	; 0x1000 <strtok_r+0x2c>
     ffa:	20 15       	cp	r18, r0
     ffc:	d9 f7       	brne	.-10     	; 0xff4 <strtok_r+0x20>
     ffe:	f3 cf       	rjmp	.-26     	; 0xfe6 <strtok_r+0x12>
    1000:	fb 01       	movw	r30, r22
    1002:	21 91       	ld	r18, Z+
    1004:	20 15       	cp	r18, r0
    1006:	19 f4       	brne	.+6      	; 0x100e <strtok_r+0x3a>
    1008:	1e 92       	st	-X, r1
    100a:	11 96       	adiw	r26, 0x01	; 1
    100c:	06 c0       	rjmp	.+12     	; 0x101a <strtok_r+0x46>
    100e:	22 23       	and	r18, r18
    1010:	c1 f7       	brne	.-16     	; 0x1002 <strtok_r+0x2e>
    1012:	0d 90       	ld	r0, X+
    1014:	00 20       	and	r0, r0
    1016:	a1 f7       	brne	.-24     	; 0x1000 <strtok_r+0x2c>
    1018:	d0 01       	movw	r26, r0
    101a:	fa 01       	movw	r30, r20
    101c:	a1 93       	st	Z+, r26
    101e:	b0 83       	st	Z, r27
    1020:	08 95       	ret

00001022 <__mulhi_const_10>:
    1022:	7a e0       	ldi	r23, 0x0A	; 10
    1024:	97 9f       	mul	r25, r23
    1026:	90 2d       	mov	r25, r0
    1028:	87 9f       	mul	r24, r23
    102a:	80 2d       	mov	r24, r0
    102c:	91 0d       	add	r25, r1
    102e:	11 24       	eor	r1, r1
    1030:	08 95       	ret

00001032 <fgets>:
    1032:	cf 92       	push	r12
    1034:	df 92       	push	r13
    1036:	ef 92       	push	r14
    1038:	ff 92       	push	r15
    103a:	0f 93       	push	r16
    103c:	1f 93       	push	r17
    103e:	cf 93       	push	r28
    1040:	df 93       	push	r29
    1042:	8c 01       	movw	r16, r24
    1044:	6a 01       	movw	r12, r20
    1046:	fa 01       	movw	r30, r20
    1048:	83 81       	ldd	r24, Z+3	; 0x03
    104a:	80 ff       	sbrs	r24, 0
    104c:	1a c0       	rjmp	.+52     	; 0x1082 <fgets+0x50>
    104e:	16 16       	cp	r1, r22
    1050:	17 06       	cpc	r1, r23
    1052:	bc f4       	brge	.+46     	; 0x1082 <fgets+0x50>
    1054:	7b 01       	movw	r14, r22
    1056:	e8 01       	movw	r28, r16
    1058:	0e c0       	rjmp	.+28     	; 0x1076 <fgets+0x44>
    105a:	c6 01       	movw	r24, r12
    105c:	0e 94 06 0b 	call	0x160c	; 0x160c <fgetc>
    1060:	ff ef       	ldi	r31, 0xFF	; 255
    1062:	8f 3f       	cpi	r24, 0xFF	; 255
    1064:	9f 07       	cpc	r25, r31
    1066:	69 f0       	breq	.+26     	; 0x1082 <fgets+0x50>
    1068:	89 93       	st	Y+, r24
    106a:	08 94       	sec
    106c:	e1 08       	sbc	r14, r1
    106e:	f1 08       	sbc	r15, r1
    1070:	8a 30       	cpi	r24, 0x0A	; 10
    1072:	91 05       	cpc	r25, r1
    1074:	21 f0       	breq	.+8      	; 0x107e <fgets+0x4c>
    1076:	21 e0       	ldi	r18, 0x01	; 1
    1078:	e2 16       	cp	r14, r18
    107a:	f1 04       	cpc	r15, r1
    107c:	71 f7       	brne	.-36     	; 0x105a <fgets+0x28>
    107e:	18 82       	st	Y, r1
    1080:	02 c0       	rjmp	.+4      	; 0x1086 <fgets+0x54>
    1082:	00 e0       	ldi	r16, 0x00	; 0
    1084:	10 e0       	ldi	r17, 0x00	; 0
    1086:	c8 01       	movw	r24, r16
    1088:	df 91       	pop	r29
    108a:	cf 91       	pop	r28
    108c:	1f 91       	pop	r17
    108e:	0f 91       	pop	r16
    1090:	ff 90       	pop	r15
    1092:	ef 90       	pop	r14
    1094:	df 90       	pop	r13
    1096:	cf 90       	pop	r12
    1098:	08 95       	ret

0000109a <gets>:
    109a:	0f 93       	push	r16
    109c:	1f 93       	push	r17
    109e:	cf 93       	push	r28
    10a0:	df 93       	push	r29
    10a2:	8c 01       	movw	r16, r24
    10a4:	e0 91 8a 05 	lds	r30, 0x058A
    10a8:	f0 91 8b 05 	lds	r31, 0x058B
    10ac:	83 81       	ldd	r24, Z+3	; 0x03
    10ae:	80 ff       	sbrs	r24, 0
    10b0:	12 c0       	rjmp	.+36     	; 0x10d6 <gets+0x3c>
    10b2:	e8 01       	movw	r28, r16
    10b4:	80 91 8a 05 	lds	r24, 0x058A
    10b8:	90 91 8b 05 	lds	r25, 0x058B
    10bc:	0e 94 06 0b 	call	0x160c	; 0x160c <fgetc>
    10c0:	2f ef       	ldi	r18, 0xFF	; 255
    10c2:	8f 3f       	cpi	r24, 0xFF	; 255
    10c4:	92 07       	cpc	r25, r18
    10c6:	39 f0       	breq	.+14     	; 0x10d6 <gets+0x3c>
    10c8:	89 93       	st	Y+, r24
    10ca:	8a 30       	cpi	r24, 0x0A	; 10
    10cc:	91 05       	cpc	r25, r1
    10ce:	91 f7       	brne	.-28     	; 0x10b4 <gets+0x1a>
    10d0:	21 97       	sbiw	r28, 0x01	; 1
    10d2:	18 82       	st	Y, r1
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <gets+0x40>
    10d6:	00 e0       	ldi	r16, 0x00	; 0
    10d8:	10 e0       	ldi	r17, 0x00	; 0
    10da:	c8 01       	movw	r24, r16
    10dc:	df 91       	pop	r29
    10de:	cf 91       	pop	r28
    10e0:	1f 91       	pop	r17
    10e2:	0f 91       	pop	r16
    10e4:	08 95       	ret

000010e6 <printf>:
    10e6:	cf 93       	push	r28
    10e8:	df 93       	push	r29
    10ea:	cd b7       	in	r28, 0x3d	; 61
    10ec:	de b7       	in	r29, 0x3e	; 62
    10ee:	fe 01       	movw	r30, r28
    10f0:	36 96       	adiw	r30, 0x06	; 6
    10f2:	61 91       	ld	r22, Z+
    10f4:	71 91       	ld	r23, Z+
    10f6:	80 91 8c 05 	lds	r24, 0x058C
    10fa:	90 91 8d 05 	lds	r25, 0x058D
    10fe:	af 01       	movw	r20, r30
    1100:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <vfprintf>
    1104:	df 91       	pop	r29
    1106:	cf 91       	pop	r28
    1108:	08 95       	ret

0000110a <putchar>:
    110a:	60 91 8c 05 	lds	r22, 0x058C
    110e:	70 91 8d 05 	lds	r23, 0x058D
    1112:	0e 94 46 0b 	call	0x168c	; 0x168c <fputc>
    1116:	08 95       	ret

00001118 <puts>:
    1118:	0f 93       	push	r16
    111a:	1f 93       	push	r17
    111c:	cf 93       	push	r28
    111e:	df 93       	push	r29
    1120:	8c 01       	movw	r16, r24
    1122:	e0 91 8c 05 	lds	r30, 0x058C
    1126:	f0 91 8d 05 	lds	r31, 0x058D
    112a:	83 81       	ldd	r24, Z+3	; 0x03
    112c:	81 ff       	sbrs	r24, 1
    112e:	1a c0       	rjmp	.+52     	; 0x1164 <puts+0x4c>
    1130:	c0 e0       	ldi	r28, 0x00	; 0
    1132:	d0 e0       	ldi	r29, 0x00	; 0
    1134:	05 c0       	rjmp	.+10     	; 0x1140 <puts+0x28>
    1136:	19 95       	eicall
    1138:	00 97       	sbiw	r24, 0x00	; 0
    113a:	11 f0       	breq	.+4      	; 0x1140 <puts+0x28>
    113c:	cf ef       	ldi	r28, 0xFF	; 255
    113e:	df ef       	ldi	r29, 0xFF	; 255
    1140:	f8 01       	movw	r30, r16
    1142:	81 91       	ld	r24, Z+
    1144:	8f 01       	movw	r16, r30
    1146:	60 91 8c 05 	lds	r22, 0x058C
    114a:	70 91 8d 05 	lds	r23, 0x058D
    114e:	db 01       	movw	r26, r22
    1150:	18 96       	adiw	r26, 0x08	; 8
    1152:	ed 91       	ld	r30, X+
    1154:	fc 91       	ld	r31, X
    1156:	19 97       	sbiw	r26, 0x09	; 9
    1158:	88 23       	and	r24, r24
    115a:	69 f7       	brne	.-38     	; 0x1136 <puts+0x1e>
    115c:	8a e0       	ldi	r24, 0x0A	; 10
    115e:	19 95       	eicall
    1160:	00 97       	sbiw	r24, 0x00	; 0
    1162:	11 f0       	breq	.+4      	; 0x1168 <puts+0x50>
    1164:	cf ef       	ldi	r28, 0xFF	; 255
    1166:	df ef       	ldi	r29, 0xFF	; 255
    1168:	ce 01       	movw	r24, r28
    116a:	df 91       	pop	r29
    116c:	cf 91       	pop	r28
    116e:	1f 91       	pop	r17
    1170:	0f 91       	pop	r16
    1172:	08 95       	ret

00001174 <sprintf>:
    1174:	0f 93       	push	r16
    1176:	1f 93       	push	r17
    1178:	cf 93       	push	r28
    117a:	df 93       	push	r29
    117c:	cd b7       	in	r28, 0x3d	; 61
    117e:	de b7       	in	r29, 0x3e	; 62
    1180:	2e 97       	sbiw	r28, 0x0e	; 14
    1182:	0f b6       	in	r0, 0x3f	; 63
    1184:	f8 94       	cli
    1186:	de bf       	out	0x3e, r29	; 62
    1188:	0f be       	out	0x3f, r0	; 63
    118a:	cd bf       	out	0x3d, r28	; 61
    118c:	0e 89       	ldd	r16, Y+22	; 0x16
    118e:	1f 89       	ldd	r17, Y+23	; 0x17
    1190:	86 e0       	ldi	r24, 0x06	; 6
    1192:	8c 83       	std	Y+4, r24	; 0x04
    1194:	1a 83       	std	Y+2, r17	; 0x02
    1196:	09 83       	std	Y+1, r16	; 0x01
    1198:	8f ef       	ldi	r24, 0xFF	; 255
    119a:	9f e7       	ldi	r25, 0x7F	; 127
    119c:	9e 83       	std	Y+6, r25	; 0x06
    119e:	8d 83       	std	Y+5, r24	; 0x05
    11a0:	ae 01       	movw	r20, r28
    11a2:	46 5e       	subi	r20, 0xE6	; 230
    11a4:	5f 4f       	sbci	r21, 0xFF	; 255
    11a6:	ce 01       	movw	r24, r28
    11a8:	01 96       	adiw	r24, 0x01	; 1
    11aa:	68 8d       	ldd	r22, Y+24	; 0x18
    11ac:	79 8d       	ldd	r23, Y+25	; 0x19
    11ae:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <vfprintf>
    11b2:	ef 81       	ldd	r30, Y+7	; 0x07
    11b4:	f8 85       	ldd	r31, Y+8	; 0x08
    11b6:	e0 0f       	add	r30, r16
    11b8:	f1 1f       	adc	r31, r17
    11ba:	10 82       	st	Z, r1
    11bc:	2e 96       	adiw	r28, 0x0e	; 14
    11be:	0f b6       	in	r0, 0x3f	; 63
    11c0:	f8 94       	cli
    11c2:	de bf       	out	0x3e, r29	; 62
    11c4:	0f be       	out	0x3f, r0	; 63
    11c6:	cd bf       	out	0x3d, r28	; 61
    11c8:	df 91       	pop	r29
    11ca:	cf 91       	pop	r28
    11cc:	1f 91       	pop	r17
    11ce:	0f 91       	pop	r16
    11d0:	08 95       	ret

000011d2 <vfprintf>:
    11d2:	2f 92       	push	r2
    11d4:	3f 92       	push	r3
    11d6:	4f 92       	push	r4
    11d8:	5f 92       	push	r5
    11da:	6f 92       	push	r6
    11dc:	7f 92       	push	r7
    11de:	8f 92       	push	r8
    11e0:	9f 92       	push	r9
    11e2:	af 92       	push	r10
    11e4:	bf 92       	push	r11
    11e6:	cf 92       	push	r12
    11e8:	df 92       	push	r13
    11ea:	ef 92       	push	r14
    11ec:	ff 92       	push	r15
    11ee:	0f 93       	push	r16
    11f0:	1f 93       	push	r17
    11f2:	cf 93       	push	r28
    11f4:	df 93       	push	r29
    11f6:	cd b7       	in	r28, 0x3d	; 61
    11f8:	de b7       	in	r29, 0x3e	; 62
    11fa:	2d 97       	sbiw	r28, 0x0d	; 13
    11fc:	0f b6       	in	r0, 0x3f	; 63
    11fe:	f8 94       	cli
    1200:	de bf       	out	0x3e, r29	; 62
    1202:	0f be       	out	0x3f, r0	; 63
    1204:	cd bf       	out	0x3d, r28	; 61
    1206:	3c 01       	movw	r6, r24
    1208:	7d 87       	std	Y+13, r23	; 0x0d
    120a:	6c 87       	std	Y+12, r22	; 0x0c
    120c:	5a 01       	movw	r10, r20
    120e:	fc 01       	movw	r30, r24
    1210:	17 82       	std	Z+7, r1	; 0x07
    1212:	16 82       	std	Z+6, r1	; 0x06
    1214:	83 81       	ldd	r24, Z+3	; 0x03
    1216:	81 ff       	sbrs	r24, 1
    1218:	c8 c1       	rjmp	.+912    	; 0x15aa <vfprintf+0x3d8>
    121a:	2e 01       	movw	r4, r28
    121c:	08 94       	sec
    121e:	41 1c       	adc	r4, r1
    1220:	51 1c       	adc	r5, r1
    1222:	f3 01       	movw	r30, r6
    1224:	93 81       	ldd	r25, Z+3	; 0x03
    1226:	ec 85       	ldd	r30, Y+12	; 0x0c
    1228:	fd 85       	ldd	r31, Y+13	; 0x0d
    122a:	93 fd       	sbrc	r25, 3
    122c:	85 91       	lpm	r24, Z+
    122e:	93 ff       	sbrs	r25, 3
    1230:	81 91       	ld	r24, Z+
    1232:	fd 87       	std	Y+13, r31	; 0x0d
    1234:	ec 87       	std	Y+12, r30	; 0x0c
    1236:	88 23       	and	r24, r24
    1238:	09 f4       	brne	.+2      	; 0x123c <vfprintf+0x6a>
    123a:	b3 c1       	rjmp	.+870    	; 0x15a2 <vfprintf+0x3d0>
    123c:	85 32       	cpi	r24, 0x25	; 37
    123e:	41 f4       	brne	.+16     	; 0x1250 <vfprintf+0x7e>
    1240:	93 fd       	sbrc	r25, 3
    1242:	85 91       	lpm	r24, Z+
    1244:	93 ff       	sbrs	r25, 3
    1246:	81 91       	ld	r24, Z+
    1248:	fd 87       	std	Y+13, r31	; 0x0d
    124a:	ec 87       	std	Y+12, r30	; 0x0c
    124c:	85 32       	cpi	r24, 0x25	; 37
    124e:	29 f4       	brne	.+10     	; 0x125a <vfprintf+0x88>
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	b3 01       	movw	r22, r6
    1254:	0e 94 46 0b 	call	0x168c	; 0x168c <fputc>
    1258:	e4 cf       	rjmp	.-56     	; 0x1222 <vfprintf+0x50>
    125a:	ff 24       	eor	r15, r15
    125c:	ee 24       	eor	r14, r14
    125e:	10 e0       	ldi	r17, 0x00	; 0
    1260:	10 32       	cpi	r17, 0x20	; 32
    1262:	b0 f4       	brcc	.+44     	; 0x1290 <vfprintf+0xbe>
    1264:	8b 32       	cpi	r24, 0x2B	; 43
    1266:	69 f0       	breq	.+26     	; 0x1282 <vfprintf+0xb0>
    1268:	8c 32       	cpi	r24, 0x2C	; 44
    126a:	28 f4       	brcc	.+10     	; 0x1276 <vfprintf+0xa4>
    126c:	80 32       	cpi	r24, 0x20	; 32
    126e:	51 f0       	breq	.+20     	; 0x1284 <vfprintf+0xb2>
    1270:	83 32       	cpi	r24, 0x23	; 35
    1272:	71 f4       	brne	.+28     	; 0x1290 <vfprintf+0xbe>
    1274:	0b c0       	rjmp	.+22     	; 0x128c <vfprintf+0xba>
    1276:	8d 32       	cpi	r24, 0x2D	; 45
    1278:	39 f0       	breq	.+14     	; 0x1288 <vfprintf+0xb6>
    127a:	80 33       	cpi	r24, 0x30	; 48
    127c:	49 f4       	brne	.+18     	; 0x1290 <vfprintf+0xbe>
    127e:	11 60       	ori	r17, 0x01	; 1
    1280:	2c c0       	rjmp	.+88     	; 0x12da <vfprintf+0x108>
    1282:	12 60       	ori	r17, 0x02	; 2
    1284:	14 60       	ori	r17, 0x04	; 4
    1286:	29 c0       	rjmp	.+82     	; 0x12da <vfprintf+0x108>
    1288:	18 60       	ori	r17, 0x08	; 8
    128a:	27 c0       	rjmp	.+78     	; 0x12da <vfprintf+0x108>
    128c:	10 61       	ori	r17, 0x10	; 16
    128e:	25 c0       	rjmp	.+74     	; 0x12da <vfprintf+0x108>
    1290:	17 fd       	sbrc	r17, 7
    1292:	2e c0       	rjmp	.+92     	; 0x12f0 <vfprintf+0x11e>
    1294:	28 2f       	mov	r18, r24
    1296:	20 53       	subi	r18, 0x30	; 48
    1298:	2a 30       	cpi	r18, 0x0A	; 10
    129a:	98 f4       	brcc	.+38     	; 0x12c2 <vfprintf+0xf0>
    129c:	16 ff       	sbrs	r17, 6
    129e:	08 c0       	rjmp	.+16     	; 0x12b0 <vfprintf+0xde>
    12a0:	8f 2d       	mov	r24, r15
    12a2:	88 0f       	add	r24, r24
    12a4:	f8 2e       	mov	r15, r24
    12a6:	ff 0c       	add	r15, r15
    12a8:	ff 0c       	add	r15, r15
    12aa:	f8 0e       	add	r15, r24
    12ac:	f2 0e       	add	r15, r18
    12ae:	15 c0       	rjmp	.+42     	; 0x12da <vfprintf+0x108>
    12b0:	8e 2d       	mov	r24, r14
    12b2:	88 0f       	add	r24, r24
    12b4:	e8 2e       	mov	r14, r24
    12b6:	ee 0c       	add	r14, r14
    12b8:	ee 0c       	add	r14, r14
    12ba:	e8 0e       	add	r14, r24
    12bc:	e2 0e       	add	r14, r18
    12be:	10 62       	ori	r17, 0x20	; 32
    12c0:	0c c0       	rjmp	.+24     	; 0x12da <vfprintf+0x108>
    12c2:	8e 32       	cpi	r24, 0x2E	; 46
    12c4:	21 f4       	brne	.+8      	; 0x12ce <vfprintf+0xfc>
    12c6:	16 fd       	sbrc	r17, 6
    12c8:	6c c1       	rjmp	.+728    	; 0x15a2 <vfprintf+0x3d0>
    12ca:	10 64       	ori	r17, 0x40	; 64
    12cc:	06 c0       	rjmp	.+12     	; 0x12da <vfprintf+0x108>
    12ce:	8c 36       	cpi	r24, 0x6C	; 108
    12d0:	11 f4       	brne	.+4      	; 0x12d6 <vfprintf+0x104>
    12d2:	10 68       	ori	r17, 0x80	; 128
    12d4:	02 c0       	rjmp	.+4      	; 0x12da <vfprintf+0x108>
    12d6:	88 36       	cpi	r24, 0x68	; 104
    12d8:	59 f4       	brne	.+22     	; 0x12f0 <vfprintf+0x11e>
    12da:	ec 85       	ldd	r30, Y+12	; 0x0c
    12dc:	fd 85       	ldd	r31, Y+13	; 0x0d
    12de:	93 fd       	sbrc	r25, 3
    12e0:	85 91       	lpm	r24, Z+
    12e2:	93 ff       	sbrs	r25, 3
    12e4:	81 91       	ld	r24, Z+
    12e6:	fd 87       	std	Y+13, r31	; 0x0d
    12e8:	ec 87       	std	Y+12, r30	; 0x0c
    12ea:	88 23       	and	r24, r24
    12ec:	09 f0       	breq	.+2      	; 0x12f0 <vfprintf+0x11e>
    12ee:	b8 cf       	rjmp	.-144    	; 0x1260 <vfprintf+0x8e>
    12f0:	98 2f       	mov	r25, r24
    12f2:	95 54       	subi	r25, 0x45	; 69
    12f4:	93 30       	cpi	r25, 0x03	; 3
    12f6:	18 f0       	brcs	.+6      	; 0x12fe <vfprintf+0x12c>
    12f8:	90 52       	subi	r25, 0x20	; 32
    12fa:	93 30       	cpi	r25, 0x03	; 3
    12fc:	38 f4       	brcc	.+14     	; 0x130c <vfprintf+0x13a>
    12fe:	24 e0       	ldi	r18, 0x04	; 4
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	a2 0e       	add	r10, r18
    1304:	b3 1e       	adc	r11, r19
    1306:	3f e3       	ldi	r19, 0x3F	; 63
    1308:	39 83       	std	Y+1, r19	; 0x01
    130a:	0f c0       	rjmp	.+30     	; 0x132a <vfprintf+0x158>
    130c:	83 36       	cpi	r24, 0x63	; 99
    130e:	31 f0       	breq	.+12     	; 0x131c <vfprintf+0x14a>
    1310:	83 37       	cpi	r24, 0x73	; 115
    1312:	81 f0       	breq	.+32     	; 0x1334 <vfprintf+0x162>
    1314:	83 35       	cpi	r24, 0x53	; 83
    1316:	09 f0       	breq	.+2      	; 0x131a <vfprintf+0x148>
    1318:	5a c0       	rjmp	.+180    	; 0x13ce <vfprintf+0x1fc>
    131a:	22 c0       	rjmp	.+68     	; 0x1360 <vfprintf+0x18e>
    131c:	f5 01       	movw	r30, r10
    131e:	80 81       	ld	r24, Z
    1320:	89 83       	std	Y+1, r24	; 0x01
    1322:	22 e0       	ldi	r18, 0x02	; 2
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	a2 0e       	add	r10, r18
    1328:	b3 1e       	adc	r11, r19
    132a:	21 e0       	ldi	r18, 0x01	; 1
    132c:	c2 2e       	mov	r12, r18
    132e:	d1 2c       	mov	r13, r1
    1330:	42 01       	movw	r8, r4
    1332:	14 c0       	rjmp	.+40     	; 0x135c <vfprintf+0x18a>
    1334:	92 e0       	ldi	r25, 0x02	; 2
    1336:	29 2e       	mov	r2, r25
    1338:	31 2c       	mov	r3, r1
    133a:	2a 0c       	add	r2, r10
    133c:	3b 1c       	adc	r3, r11
    133e:	f5 01       	movw	r30, r10
    1340:	80 80       	ld	r8, Z
    1342:	91 80       	ldd	r9, Z+1	; 0x01
    1344:	16 ff       	sbrs	r17, 6
    1346:	03 c0       	rjmp	.+6      	; 0x134e <vfprintf+0x17c>
    1348:	6f 2d       	mov	r22, r15
    134a:	70 e0       	ldi	r23, 0x00	; 0
    134c:	02 c0       	rjmp	.+4      	; 0x1352 <vfprintf+0x180>
    134e:	6f ef       	ldi	r22, 0xFF	; 255
    1350:	7f ef       	ldi	r23, 0xFF	; 255
    1352:	c4 01       	movw	r24, r8
    1354:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <strnlen>
    1358:	6c 01       	movw	r12, r24
    135a:	51 01       	movw	r10, r2
    135c:	1f 77       	andi	r17, 0x7F	; 127
    135e:	15 c0       	rjmp	.+42     	; 0x138a <vfprintf+0x1b8>
    1360:	82 e0       	ldi	r24, 0x02	; 2
    1362:	28 2e       	mov	r2, r24
    1364:	31 2c       	mov	r3, r1
    1366:	2a 0c       	add	r2, r10
    1368:	3b 1c       	adc	r3, r11
    136a:	f5 01       	movw	r30, r10
    136c:	80 80       	ld	r8, Z
    136e:	91 80       	ldd	r9, Z+1	; 0x01
    1370:	16 ff       	sbrs	r17, 6
    1372:	03 c0       	rjmp	.+6      	; 0x137a <vfprintf+0x1a8>
    1374:	6f 2d       	mov	r22, r15
    1376:	70 e0       	ldi	r23, 0x00	; 0
    1378:	02 c0       	rjmp	.+4      	; 0x137e <vfprintf+0x1ac>
    137a:	6f ef       	ldi	r22, 0xFF	; 255
    137c:	7f ef       	ldi	r23, 0xFF	; 255
    137e:	c4 01       	movw	r24, r8
    1380:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <strnlen_P>
    1384:	6c 01       	movw	r12, r24
    1386:	10 68       	ori	r17, 0x80	; 128
    1388:	51 01       	movw	r10, r2
    138a:	13 fd       	sbrc	r17, 3
    138c:	1c c0       	rjmp	.+56     	; 0x13c6 <vfprintf+0x1f4>
    138e:	06 c0       	rjmp	.+12     	; 0x139c <vfprintf+0x1ca>
    1390:	80 e2       	ldi	r24, 0x20	; 32
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	b3 01       	movw	r22, r6
    1396:	0e 94 46 0b 	call	0x168c	; 0x168c <fputc>
    139a:	ea 94       	dec	r14
    139c:	8e 2d       	mov	r24, r14
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	c8 16       	cp	r12, r24
    13a2:	d9 06       	cpc	r13, r25
    13a4:	a8 f3       	brcs	.-22     	; 0x1390 <vfprintf+0x1be>
    13a6:	0f c0       	rjmp	.+30     	; 0x13c6 <vfprintf+0x1f4>
    13a8:	f4 01       	movw	r30, r8
    13aa:	17 fd       	sbrc	r17, 7
    13ac:	85 91       	lpm	r24, Z+
    13ae:	17 ff       	sbrs	r17, 7
    13b0:	81 91       	ld	r24, Z+
    13b2:	4f 01       	movw	r8, r30
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	b3 01       	movw	r22, r6
    13b8:	0e 94 46 0b 	call	0x168c	; 0x168c <fputc>
    13bc:	e1 10       	cpse	r14, r1
    13be:	ea 94       	dec	r14
    13c0:	08 94       	sec
    13c2:	c1 08       	sbc	r12, r1
    13c4:	d1 08       	sbc	r13, r1
    13c6:	c1 14       	cp	r12, r1
    13c8:	d1 04       	cpc	r13, r1
    13ca:	71 f7       	brne	.-36     	; 0x13a8 <vfprintf+0x1d6>
    13cc:	e7 c0       	rjmp	.+462    	; 0x159c <vfprintf+0x3ca>
    13ce:	84 36       	cpi	r24, 0x64	; 100
    13d0:	11 f0       	breq	.+4      	; 0x13d6 <vfprintf+0x204>
    13d2:	89 36       	cpi	r24, 0x69	; 105
    13d4:	51 f5       	brne	.+84     	; 0x142a <vfprintf+0x258>
    13d6:	f5 01       	movw	r30, r10
    13d8:	17 ff       	sbrs	r17, 7
    13da:	07 c0       	rjmp	.+14     	; 0x13ea <vfprintf+0x218>
    13dc:	80 81       	ld	r24, Z
    13de:	91 81       	ldd	r25, Z+1	; 0x01
    13e0:	a2 81       	ldd	r26, Z+2	; 0x02
    13e2:	b3 81       	ldd	r27, Z+3	; 0x03
    13e4:	24 e0       	ldi	r18, 0x04	; 4
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	08 c0       	rjmp	.+16     	; 0x13fa <vfprintf+0x228>
    13ea:	80 81       	ld	r24, Z
    13ec:	91 81       	ldd	r25, Z+1	; 0x01
    13ee:	aa 27       	eor	r26, r26
    13f0:	97 fd       	sbrc	r25, 7
    13f2:	a0 95       	com	r26
    13f4:	ba 2f       	mov	r27, r26
    13f6:	22 e0       	ldi	r18, 0x02	; 2
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	a2 0e       	add	r10, r18
    13fc:	b3 1e       	adc	r11, r19
    13fe:	01 2f       	mov	r16, r17
    1400:	0f 76       	andi	r16, 0x6F	; 111
    1402:	b7 ff       	sbrs	r27, 7
    1404:	08 c0       	rjmp	.+16     	; 0x1416 <vfprintf+0x244>
    1406:	b0 95       	com	r27
    1408:	a0 95       	com	r26
    140a:	90 95       	com	r25
    140c:	81 95       	neg	r24
    140e:	9f 4f       	sbci	r25, 0xFF	; 255
    1410:	af 4f       	sbci	r26, 0xFF	; 255
    1412:	bf 4f       	sbci	r27, 0xFF	; 255
    1414:	00 68       	ori	r16, 0x80	; 128
    1416:	bc 01       	movw	r22, r24
    1418:	cd 01       	movw	r24, r26
    141a:	a2 01       	movw	r20, r4
    141c:	2a e0       	ldi	r18, 0x0A	; 10
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <__ultoa_invert>
    1424:	d8 2e       	mov	r13, r24
    1426:	d4 18       	sub	r13, r4
    1428:	3f c0       	rjmp	.+126    	; 0x14a8 <vfprintf+0x2d6>
    142a:	85 37       	cpi	r24, 0x75	; 117
    142c:	21 f4       	brne	.+8      	; 0x1436 <vfprintf+0x264>
    142e:	1f 7e       	andi	r17, 0xEF	; 239
    1430:	2a e0       	ldi	r18, 0x0A	; 10
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	20 c0       	rjmp	.+64     	; 0x1476 <vfprintf+0x2a4>
    1436:	19 7f       	andi	r17, 0xF9	; 249
    1438:	8f 36       	cpi	r24, 0x6F	; 111
    143a:	a9 f0       	breq	.+42     	; 0x1466 <vfprintf+0x294>
    143c:	80 37       	cpi	r24, 0x70	; 112
    143e:	20 f4       	brcc	.+8      	; 0x1448 <vfprintf+0x276>
    1440:	88 35       	cpi	r24, 0x58	; 88
    1442:	09 f0       	breq	.+2      	; 0x1446 <vfprintf+0x274>
    1444:	ae c0       	rjmp	.+348    	; 0x15a2 <vfprintf+0x3d0>
    1446:	0b c0       	rjmp	.+22     	; 0x145e <vfprintf+0x28c>
    1448:	80 37       	cpi	r24, 0x70	; 112
    144a:	21 f0       	breq	.+8      	; 0x1454 <vfprintf+0x282>
    144c:	88 37       	cpi	r24, 0x78	; 120
    144e:	09 f0       	breq	.+2      	; 0x1452 <vfprintf+0x280>
    1450:	a8 c0       	rjmp	.+336    	; 0x15a2 <vfprintf+0x3d0>
    1452:	01 c0       	rjmp	.+2      	; 0x1456 <vfprintf+0x284>
    1454:	10 61       	ori	r17, 0x10	; 16
    1456:	14 ff       	sbrs	r17, 4
    1458:	09 c0       	rjmp	.+18     	; 0x146c <vfprintf+0x29a>
    145a:	14 60       	ori	r17, 0x04	; 4
    145c:	07 c0       	rjmp	.+14     	; 0x146c <vfprintf+0x29a>
    145e:	14 ff       	sbrs	r17, 4
    1460:	08 c0       	rjmp	.+16     	; 0x1472 <vfprintf+0x2a0>
    1462:	16 60       	ori	r17, 0x06	; 6
    1464:	06 c0       	rjmp	.+12     	; 0x1472 <vfprintf+0x2a0>
    1466:	28 e0       	ldi	r18, 0x08	; 8
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	05 c0       	rjmp	.+10     	; 0x1476 <vfprintf+0x2a4>
    146c:	20 e1       	ldi	r18, 0x10	; 16
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	02 c0       	rjmp	.+4      	; 0x1476 <vfprintf+0x2a4>
    1472:	20 e1       	ldi	r18, 0x10	; 16
    1474:	32 e0       	ldi	r19, 0x02	; 2
    1476:	f5 01       	movw	r30, r10
    1478:	17 ff       	sbrs	r17, 7
    147a:	07 c0       	rjmp	.+14     	; 0x148a <vfprintf+0x2b8>
    147c:	60 81       	ld	r22, Z
    147e:	71 81       	ldd	r23, Z+1	; 0x01
    1480:	82 81       	ldd	r24, Z+2	; 0x02
    1482:	93 81       	ldd	r25, Z+3	; 0x03
    1484:	44 e0       	ldi	r20, 0x04	; 4
    1486:	50 e0       	ldi	r21, 0x00	; 0
    1488:	06 c0       	rjmp	.+12     	; 0x1496 <vfprintf+0x2c4>
    148a:	60 81       	ld	r22, Z
    148c:	71 81       	ldd	r23, Z+1	; 0x01
    148e:	80 e0       	ldi	r24, 0x00	; 0
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	42 e0       	ldi	r20, 0x02	; 2
    1494:	50 e0       	ldi	r21, 0x00	; 0
    1496:	a4 0e       	add	r10, r20
    1498:	b5 1e       	adc	r11, r21
    149a:	a2 01       	movw	r20, r4
    149c:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <__ultoa_invert>
    14a0:	d8 2e       	mov	r13, r24
    14a2:	d4 18       	sub	r13, r4
    14a4:	01 2f       	mov	r16, r17
    14a6:	0f 77       	andi	r16, 0x7F	; 127
    14a8:	06 ff       	sbrs	r16, 6
    14aa:	09 c0       	rjmp	.+18     	; 0x14be <vfprintf+0x2ec>
    14ac:	0e 7f       	andi	r16, 0xFE	; 254
    14ae:	df 14       	cp	r13, r15
    14b0:	30 f4       	brcc	.+12     	; 0x14be <vfprintf+0x2ec>
    14b2:	04 ff       	sbrs	r16, 4
    14b4:	06 c0       	rjmp	.+12     	; 0x14c2 <vfprintf+0x2f0>
    14b6:	02 fd       	sbrc	r16, 2
    14b8:	04 c0       	rjmp	.+8      	; 0x14c2 <vfprintf+0x2f0>
    14ba:	0f 7e       	andi	r16, 0xEF	; 239
    14bc:	02 c0       	rjmp	.+4      	; 0x14c2 <vfprintf+0x2f0>
    14be:	1d 2d       	mov	r17, r13
    14c0:	01 c0       	rjmp	.+2      	; 0x14c4 <vfprintf+0x2f2>
    14c2:	1f 2d       	mov	r17, r15
    14c4:	80 2f       	mov	r24, r16
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	04 ff       	sbrs	r16, 4
    14ca:	0c c0       	rjmp	.+24     	; 0x14e4 <vfprintf+0x312>
    14cc:	fe 01       	movw	r30, r28
    14ce:	ed 0d       	add	r30, r13
    14d0:	f1 1d       	adc	r31, r1
    14d2:	20 81       	ld	r18, Z
    14d4:	20 33       	cpi	r18, 0x30	; 48
    14d6:	11 f4       	brne	.+4      	; 0x14dc <vfprintf+0x30a>
    14d8:	09 7e       	andi	r16, 0xE9	; 233
    14da:	09 c0       	rjmp	.+18     	; 0x14ee <vfprintf+0x31c>
    14dc:	02 ff       	sbrs	r16, 2
    14de:	06 c0       	rjmp	.+12     	; 0x14ec <vfprintf+0x31a>
    14e0:	1e 5f       	subi	r17, 0xFE	; 254
    14e2:	05 c0       	rjmp	.+10     	; 0x14ee <vfprintf+0x31c>
    14e4:	86 78       	andi	r24, 0x86	; 134
    14e6:	90 70       	andi	r25, 0x00	; 0
    14e8:	00 97       	sbiw	r24, 0x00	; 0
    14ea:	09 f0       	breq	.+2      	; 0x14ee <vfprintf+0x31c>
    14ec:	1f 5f       	subi	r17, 0xFF	; 255
    14ee:	80 2e       	mov	r8, r16
    14f0:	99 24       	eor	r9, r9
    14f2:	03 fd       	sbrc	r16, 3
    14f4:	12 c0       	rjmp	.+36     	; 0x151a <vfprintf+0x348>
    14f6:	00 ff       	sbrs	r16, 0
    14f8:	0d c0       	rjmp	.+26     	; 0x1514 <vfprintf+0x342>
    14fa:	fd 2c       	mov	r15, r13
    14fc:	1e 15       	cp	r17, r14
    14fe:	50 f4       	brcc	.+20     	; 0x1514 <vfprintf+0x342>
    1500:	fe 0c       	add	r15, r14
    1502:	f1 1a       	sub	r15, r17
    1504:	1e 2d       	mov	r17, r14
    1506:	06 c0       	rjmp	.+12     	; 0x1514 <vfprintf+0x342>
    1508:	80 e2       	ldi	r24, 0x20	; 32
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	b3 01       	movw	r22, r6
    150e:	0e 94 46 0b 	call	0x168c	; 0x168c <fputc>
    1512:	1f 5f       	subi	r17, 0xFF	; 255
    1514:	1e 15       	cp	r17, r14
    1516:	c0 f3       	brcs	.-16     	; 0x1508 <vfprintf+0x336>
    1518:	04 c0       	rjmp	.+8      	; 0x1522 <vfprintf+0x350>
    151a:	1e 15       	cp	r17, r14
    151c:	10 f4       	brcc	.+4      	; 0x1522 <vfprintf+0x350>
    151e:	e1 1a       	sub	r14, r17
    1520:	01 c0       	rjmp	.+2      	; 0x1524 <vfprintf+0x352>
    1522:	ee 24       	eor	r14, r14
    1524:	84 fe       	sbrs	r8, 4
    1526:	0f c0       	rjmp	.+30     	; 0x1546 <vfprintf+0x374>
    1528:	80 e3       	ldi	r24, 0x30	; 48
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	b3 01       	movw	r22, r6
    152e:	0e 94 46 0b 	call	0x168c	; 0x168c <fputc>
    1532:	82 fe       	sbrs	r8, 2
    1534:	1f c0       	rjmp	.+62     	; 0x1574 <vfprintf+0x3a2>
    1536:	81 fe       	sbrs	r8, 1
    1538:	03 c0       	rjmp	.+6      	; 0x1540 <vfprintf+0x36e>
    153a:	88 e5       	ldi	r24, 0x58	; 88
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	10 c0       	rjmp	.+32     	; 0x1560 <vfprintf+0x38e>
    1540:	88 e7       	ldi	r24, 0x78	; 120
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	0d c0       	rjmp	.+26     	; 0x1560 <vfprintf+0x38e>
    1546:	c4 01       	movw	r24, r8
    1548:	86 78       	andi	r24, 0x86	; 134
    154a:	90 70       	andi	r25, 0x00	; 0
    154c:	00 97       	sbiw	r24, 0x00	; 0
    154e:	91 f0       	breq	.+36     	; 0x1574 <vfprintf+0x3a2>
    1550:	81 fc       	sbrc	r8, 1
    1552:	02 c0       	rjmp	.+4      	; 0x1558 <vfprintf+0x386>
    1554:	80 e2       	ldi	r24, 0x20	; 32
    1556:	01 c0       	rjmp	.+2      	; 0x155a <vfprintf+0x388>
    1558:	8b e2       	ldi	r24, 0x2B	; 43
    155a:	07 fd       	sbrc	r16, 7
    155c:	8d e2       	ldi	r24, 0x2D	; 45
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	b3 01       	movw	r22, r6
    1562:	0e 94 46 0b 	call	0x168c	; 0x168c <fputc>
    1566:	06 c0       	rjmp	.+12     	; 0x1574 <vfprintf+0x3a2>
    1568:	80 e3       	ldi	r24, 0x30	; 48
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	b3 01       	movw	r22, r6
    156e:	0e 94 46 0b 	call	0x168c	; 0x168c <fputc>
    1572:	fa 94       	dec	r15
    1574:	df 14       	cp	r13, r15
    1576:	c0 f3       	brcs	.-16     	; 0x1568 <vfprintf+0x396>
    1578:	da 94       	dec	r13
    157a:	f2 01       	movw	r30, r4
    157c:	ed 0d       	add	r30, r13
    157e:	f1 1d       	adc	r31, r1
    1580:	80 81       	ld	r24, Z
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	b3 01       	movw	r22, r6
    1586:	0e 94 46 0b 	call	0x168c	; 0x168c <fputc>
    158a:	dd 20       	and	r13, r13
    158c:	a9 f7       	brne	.-22     	; 0x1578 <vfprintf+0x3a6>
    158e:	06 c0       	rjmp	.+12     	; 0x159c <vfprintf+0x3ca>
    1590:	80 e2       	ldi	r24, 0x20	; 32
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	b3 01       	movw	r22, r6
    1596:	0e 94 46 0b 	call	0x168c	; 0x168c <fputc>
    159a:	ea 94       	dec	r14
    159c:	ee 20       	and	r14, r14
    159e:	c1 f7       	brne	.-16     	; 0x1590 <vfprintf+0x3be>
    15a0:	40 ce       	rjmp	.-896    	; 0x1222 <vfprintf+0x50>
    15a2:	f3 01       	movw	r30, r6
    15a4:	86 81       	ldd	r24, Z+6	; 0x06
    15a6:	97 81       	ldd	r25, Z+7	; 0x07
    15a8:	02 c0       	rjmp	.+4      	; 0x15ae <vfprintf+0x3dc>
    15aa:	8f ef       	ldi	r24, 0xFF	; 255
    15ac:	9f ef       	ldi	r25, 0xFF	; 255
    15ae:	2d 96       	adiw	r28, 0x0d	; 13
    15b0:	0f b6       	in	r0, 0x3f	; 63
    15b2:	f8 94       	cli
    15b4:	de bf       	out	0x3e, r29	; 62
    15b6:	0f be       	out	0x3f, r0	; 63
    15b8:	cd bf       	out	0x3d, r28	; 61
    15ba:	df 91       	pop	r29
    15bc:	cf 91       	pop	r28
    15be:	1f 91       	pop	r17
    15c0:	0f 91       	pop	r16
    15c2:	ff 90       	pop	r15
    15c4:	ef 90       	pop	r14
    15c6:	df 90       	pop	r13
    15c8:	cf 90       	pop	r12
    15ca:	bf 90       	pop	r11
    15cc:	af 90       	pop	r10
    15ce:	9f 90       	pop	r9
    15d0:	8f 90       	pop	r8
    15d2:	7f 90       	pop	r7
    15d4:	6f 90       	pop	r6
    15d6:	5f 90       	pop	r5
    15d8:	4f 90       	pop	r4
    15da:	3f 90       	pop	r3
    15dc:	2f 90       	pop	r2
    15de:	08 95       	ret

000015e0 <strnlen_P>:
    15e0:	fc 01       	movw	r30, r24
    15e2:	05 90       	lpm	r0, Z+
    15e4:	61 50       	subi	r22, 0x01	; 1
    15e6:	70 40       	sbci	r23, 0x00	; 0
    15e8:	01 10       	cpse	r0, r1
    15ea:	d8 f7       	brcc	.-10     	; 0x15e2 <strnlen_P+0x2>
    15ec:	80 95       	com	r24
    15ee:	90 95       	com	r25
    15f0:	8e 0f       	add	r24, r30
    15f2:	9f 1f       	adc	r25, r31
    15f4:	08 95       	ret

000015f6 <strnlen>:
    15f6:	fc 01       	movw	r30, r24
    15f8:	61 50       	subi	r22, 0x01	; 1
    15fa:	70 40       	sbci	r23, 0x00	; 0
    15fc:	01 90       	ld	r0, Z+
    15fe:	01 10       	cpse	r0, r1
    1600:	d8 f7       	brcc	.-10     	; 0x15f8 <strnlen+0x2>
    1602:	80 95       	com	r24
    1604:	90 95       	com	r25
    1606:	8e 0f       	add	r24, r30
    1608:	9f 1f       	adc	r25, r31
    160a:	08 95       	ret

0000160c <fgetc>:
    160c:	cf 93       	push	r28
    160e:	df 93       	push	r29
    1610:	ec 01       	movw	r28, r24
    1612:	2b 81       	ldd	r18, Y+3	; 0x03
    1614:	20 ff       	sbrs	r18, 0
    1616:	35 c0       	rjmp	.+106    	; 0x1682 <fgetc+0x76>
    1618:	26 ff       	sbrs	r18, 6
    161a:	09 c0       	rjmp	.+18     	; 0x162e <fgetc+0x22>
    161c:	2f 7b       	andi	r18, 0xBF	; 191
    161e:	2b 83       	std	Y+3, r18	; 0x03
    1620:	8e 81       	ldd	r24, Y+6	; 0x06
    1622:	9f 81       	ldd	r25, Y+7	; 0x07
    1624:	01 96       	adiw	r24, 0x01	; 1
    1626:	9f 83       	std	Y+7, r25	; 0x07
    1628:	8e 83       	std	Y+6, r24	; 0x06
    162a:	8a 81       	ldd	r24, Y+2	; 0x02
    162c:	28 c0       	rjmp	.+80     	; 0x167e <fgetc+0x72>
    162e:	22 ff       	sbrs	r18, 2
    1630:	0f c0       	rjmp	.+30     	; 0x1650 <fgetc+0x44>
    1632:	e8 81       	ld	r30, Y
    1634:	f9 81       	ldd	r31, Y+1	; 0x01
    1636:	80 81       	ld	r24, Z
    1638:	99 27       	eor	r25, r25
    163a:	87 fd       	sbrc	r24, 7
    163c:	90 95       	com	r25
    163e:	00 97       	sbiw	r24, 0x00	; 0
    1640:	19 f4       	brne	.+6      	; 0x1648 <fgetc+0x3c>
    1642:	20 62       	ori	r18, 0x20	; 32
    1644:	2b 83       	std	Y+3, r18	; 0x03
    1646:	1d c0       	rjmp	.+58     	; 0x1682 <fgetc+0x76>
    1648:	31 96       	adiw	r30, 0x01	; 1
    164a:	f9 83       	std	Y+1, r31	; 0x01
    164c:	e8 83       	st	Y, r30
    164e:	11 c0       	rjmp	.+34     	; 0x1672 <fgetc+0x66>
    1650:	ea 85       	ldd	r30, Y+10	; 0x0a
    1652:	fb 85       	ldd	r31, Y+11	; 0x0b
    1654:	ce 01       	movw	r24, r28
    1656:	19 95       	eicall
    1658:	97 ff       	sbrs	r25, 7
    165a:	0b c0       	rjmp	.+22     	; 0x1672 <fgetc+0x66>
    165c:	2b 81       	ldd	r18, Y+3	; 0x03
    165e:	3f ef       	ldi	r19, 0xFF	; 255
    1660:	8f 3f       	cpi	r24, 0xFF	; 255
    1662:	93 07       	cpc	r25, r19
    1664:	11 f4       	brne	.+4      	; 0x166a <fgetc+0x5e>
    1666:	80 e1       	ldi	r24, 0x10	; 16
    1668:	01 c0       	rjmp	.+2      	; 0x166c <fgetc+0x60>
    166a:	80 e2       	ldi	r24, 0x20	; 32
    166c:	82 2b       	or	r24, r18
    166e:	8b 83       	std	Y+3, r24	; 0x03
    1670:	08 c0       	rjmp	.+16     	; 0x1682 <fgetc+0x76>
    1672:	2e 81       	ldd	r18, Y+6	; 0x06
    1674:	3f 81       	ldd	r19, Y+7	; 0x07
    1676:	2f 5f       	subi	r18, 0xFF	; 255
    1678:	3f 4f       	sbci	r19, 0xFF	; 255
    167a:	3f 83       	std	Y+7, r19	; 0x07
    167c:	2e 83       	std	Y+6, r18	; 0x06
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	02 c0       	rjmp	.+4      	; 0x1686 <fgetc+0x7a>
    1682:	8f ef       	ldi	r24, 0xFF	; 255
    1684:	9f ef       	ldi	r25, 0xFF	; 255
    1686:	df 91       	pop	r29
    1688:	cf 91       	pop	r28
    168a:	08 95       	ret

0000168c <fputc>:
    168c:	0f 93       	push	r16
    168e:	1f 93       	push	r17
    1690:	cf 93       	push	r28
    1692:	df 93       	push	r29
    1694:	8c 01       	movw	r16, r24
    1696:	eb 01       	movw	r28, r22
    1698:	8b 81       	ldd	r24, Y+3	; 0x03
    169a:	81 ff       	sbrs	r24, 1
    169c:	1b c0       	rjmp	.+54     	; 0x16d4 <fputc+0x48>
    169e:	82 ff       	sbrs	r24, 2
    16a0:	0d c0       	rjmp	.+26     	; 0x16bc <fputc+0x30>
    16a2:	2e 81       	ldd	r18, Y+6	; 0x06
    16a4:	3f 81       	ldd	r19, Y+7	; 0x07
    16a6:	8c 81       	ldd	r24, Y+4	; 0x04
    16a8:	9d 81       	ldd	r25, Y+5	; 0x05
    16aa:	28 17       	cp	r18, r24
    16ac:	39 07       	cpc	r19, r25
    16ae:	64 f4       	brge	.+24     	; 0x16c8 <fputc+0x3c>
    16b0:	e8 81       	ld	r30, Y
    16b2:	f9 81       	ldd	r31, Y+1	; 0x01
    16b4:	01 93       	st	Z+, r16
    16b6:	f9 83       	std	Y+1, r31	; 0x01
    16b8:	e8 83       	st	Y, r30
    16ba:	06 c0       	rjmp	.+12     	; 0x16c8 <fputc+0x3c>
    16bc:	e8 85       	ldd	r30, Y+8	; 0x08
    16be:	f9 85       	ldd	r31, Y+9	; 0x09
    16c0:	80 2f       	mov	r24, r16
    16c2:	19 95       	eicall
    16c4:	00 97       	sbiw	r24, 0x00	; 0
    16c6:	31 f4       	brne	.+12     	; 0x16d4 <fputc+0x48>
    16c8:	8e 81       	ldd	r24, Y+6	; 0x06
    16ca:	9f 81       	ldd	r25, Y+7	; 0x07
    16cc:	01 96       	adiw	r24, 0x01	; 1
    16ce:	9f 83       	std	Y+7, r25	; 0x07
    16d0:	8e 83       	std	Y+6, r24	; 0x06
    16d2:	02 c0       	rjmp	.+4      	; 0x16d8 <fputc+0x4c>
    16d4:	0f ef       	ldi	r16, 0xFF	; 255
    16d6:	1f ef       	ldi	r17, 0xFF	; 255
    16d8:	c8 01       	movw	r24, r16
    16da:	df 91       	pop	r29
    16dc:	cf 91       	pop	r28
    16de:	1f 91       	pop	r17
    16e0:	0f 91       	pop	r16
    16e2:	08 95       	ret

000016e4 <__ultoa_invert>:
    16e4:	fa 01       	movw	r30, r20
    16e6:	aa 27       	eor	r26, r26
    16e8:	28 30       	cpi	r18, 0x08	; 8
    16ea:	51 f1       	breq	.+84     	; 0x1740 <__ultoa_invert+0x5c>
    16ec:	20 31       	cpi	r18, 0x10	; 16
    16ee:	81 f1       	breq	.+96     	; 0x1750 <__ultoa_invert+0x6c>
    16f0:	e8 94       	clt
    16f2:	6f 93       	push	r22
    16f4:	6e 7f       	andi	r22, 0xFE	; 254
    16f6:	6e 5f       	subi	r22, 0xFE	; 254
    16f8:	7f 4f       	sbci	r23, 0xFF	; 255
    16fa:	8f 4f       	sbci	r24, 0xFF	; 255
    16fc:	9f 4f       	sbci	r25, 0xFF	; 255
    16fe:	af 4f       	sbci	r26, 0xFF	; 255
    1700:	b1 e0       	ldi	r27, 0x01	; 1
    1702:	3e d0       	rcall	.+124    	; 0x1780 <__ultoa_invert+0x9c>
    1704:	b4 e0       	ldi	r27, 0x04	; 4
    1706:	3c d0       	rcall	.+120    	; 0x1780 <__ultoa_invert+0x9c>
    1708:	67 0f       	add	r22, r23
    170a:	78 1f       	adc	r23, r24
    170c:	89 1f       	adc	r24, r25
    170e:	9a 1f       	adc	r25, r26
    1710:	a1 1d       	adc	r26, r1
    1712:	68 0f       	add	r22, r24
    1714:	79 1f       	adc	r23, r25
    1716:	8a 1f       	adc	r24, r26
    1718:	91 1d       	adc	r25, r1
    171a:	a1 1d       	adc	r26, r1
    171c:	6a 0f       	add	r22, r26
    171e:	71 1d       	adc	r23, r1
    1720:	81 1d       	adc	r24, r1
    1722:	91 1d       	adc	r25, r1
    1724:	a1 1d       	adc	r26, r1
    1726:	20 d0       	rcall	.+64     	; 0x1768 <__ultoa_invert+0x84>
    1728:	09 f4       	brne	.+2      	; 0x172c <__ultoa_invert+0x48>
    172a:	68 94       	set
    172c:	3f 91       	pop	r19
    172e:	2a e0       	ldi	r18, 0x0A	; 10
    1730:	26 9f       	mul	r18, r22
    1732:	11 24       	eor	r1, r1
    1734:	30 19       	sub	r19, r0
    1736:	30 5d       	subi	r19, 0xD0	; 208
    1738:	31 93       	st	Z+, r19
    173a:	de f6       	brtc	.-74     	; 0x16f2 <__ultoa_invert+0xe>
    173c:	cf 01       	movw	r24, r30
    173e:	08 95       	ret
    1740:	46 2f       	mov	r20, r22
    1742:	47 70       	andi	r20, 0x07	; 7
    1744:	40 5d       	subi	r20, 0xD0	; 208
    1746:	41 93       	st	Z+, r20
    1748:	b3 e0       	ldi	r27, 0x03	; 3
    174a:	0f d0       	rcall	.+30     	; 0x176a <__ultoa_invert+0x86>
    174c:	c9 f7       	brne	.-14     	; 0x1740 <__ultoa_invert+0x5c>
    174e:	f6 cf       	rjmp	.-20     	; 0x173c <__ultoa_invert+0x58>
    1750:	46 2f       	mov	r20, r22
    1752:	4f 70       	andi	r20, 0x0F	; 15
    1754:	40 5d       	subi	r20, 0xD0	; 208
    1756:	4a 33       	cpi	r20, 0x3A	; 58
    1758:	18 f0       	brcs	.+6      	; 0x1760 <__ultoa_invert+0x7c>
    175a:	49 5d       	subi	r20, 0xD9	; 217
    175c:	31 fd       	sbrc	r19, 1
    175e:	40 52       	subi	r20, 0x20	; 32
    1760:	41 93       	st	Z+, r20
    1762:	02 d0       	rcall	.+4      	; 0x1768 <__ultoa_invert+0x84>
    1764:	a9 f7       	brne	.-22     	; 0x1750 <__ultoa_invert+0x6c>
    1766:	ea cf       	rjmp	.-44     	; 0x173c <__ultoa_invert+0x58>
    1768:	b4 e0       	ldi	r27, 0x04	; 4
    176a:	a6 95       	lsr	r26
    176c:	97 95       	ror	r25
    176e:	87 95       	ror	r24
    1770:	77 95       	ror	r23
    1772:	67 95       	ror	r22
    1774:	ba 95       	dec	r27
    1776:	c9 f7       	brne	.-14     	; 0x176a <__ultoa_invert+0x86>
    1778:	00 97       	sbiw	r24, 0x00	; 0
    177a:	61 05       	cpc	r22, r1
    177c:	71 05       	cpc	r23, r1
    177e:	08 95       	ret
    1780:	9b 01       	movw	r18, r22
    1782:	ac 01       	movw	r20, r24
    1784:	0a 2e       	mov	r0, r26
    1786:	06 94       	lsr	r0
    1788:	57 95       	ror	r21
    178a:	47 95       	ror	r20
    178c:	37 95       	ror	r19
    178e:	27 95       	ror	r18
    1790:	ba 95       	dec	r27
    1792:	c9 f7       	brne	.-14     	; 0x1786 <__ultoa_invert+0xa2>
    1794:	62 0f       	add	r22, r18
    1796:	73 1f       	adc	r23, r19
    1798:	84 1f       	adc	r24, r20
    179a:	95 1f       	adc	r25, r21
    179c:	a0 1d       	adc	r26, r0
    179e:	08 95       	ret

000017a0 <_exit>:
    17a0:	f8 94       	cli

000017a2 <__stop_program>:
    17a2:	ff cf       	rjmp	.-2      	; 0x17a2 <__stop_program>
