
project10.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009e  00800200  000013a6  0000143a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000219  0080029e  0080029e  000014d8  2**0
                  ALLOC
  3 .stab         00001110  00000000  00000000  000014d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000033b  00000000  00000000  000025e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000288  00000000  00000000  00002928  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002358  00000000  00000000  00002bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001134  00000000  00000000  00004f08  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001345  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000061c  00000000  00000000  00007384  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000716  00000000  00000000  000079a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000184c  00000000  00000000  000080b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00009902  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      3c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      64:	0c 94 65 03 	jmp	0x6ca	; 0x6ca <__vector_25>
      68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      6c:	0c 94 36 03 	jmp	0x66c	; 0x66c <__vector_27>
      70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      74:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e6 ea       	ldi	r30, 0xA6	; 166
      fc:	f3 e1       	ldi	r31, 0x13	; 19
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	ae 39       	cpi	r26, 0x9E	; 158
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
     10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
     110:	14 e0       	ldi	r17, 0x04	; 4
     112:	ae e9       	ldi	r26, 0x9E	; 158
     114:	b2 e0       	ldi	r27, 0x02	; 2
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	a7 3b       	cpi	r26, 0xB7	; 183
     11c:	b1 07       	cpc	r27, r17
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
     120:	0e 94 65 04 	call	0x8ca	; 0x8ca <main>
     124:	0c 94 d1 09 	jmp	0x13a2	; 0x13a2 <_exit>

00000128 <__bad_interrupt>:
     128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <is_prime>:
#include <stdlib.h>
#include "app.h"
#include "list.h"
#include "timer.h"
int is_prime(int n)
{
     12c:	cf 93       	push	r28
     12e:	df 93       	push	r29
     130:	fc 01       	movw	r30, r24
 int i;
 for (i = 2; i <= n/2; i++)
     132:	62 e0       	ldi	r22, 0x02	; 2
     134:	70 e0       	ldi	r23, 0x00	; 0
     136:	0e 94 be 04 	call	0x97c	; 0x97c <__divmodhi4>
     13a:	eb 01       	movw	r28, r22
     13c:	22 e0       	ldi	r18, 0x02	; 2
     13e:	30 e0       	ldi	r19, 0x00	; 0
     140:	08 c0       	rjmp	.+16     	; 0x152 <is_prime+0x26>
	 if ((n % i) == 0)
     142:	cf 01       	movw	r24, r30
     144:	b9 01       	movw	r22, r18
     146:	0e 94 be 04 	call	0x97c	; 0x97c <__divmodhi4>
     14a:	00 97       	sbiw	r24, 0x00	; 0
     14c:	41 f0       	breq	.+16     	; 0x15e <is_prime+0x32>
#include "list.h"
#include "timer.h"
int is_prime(int n)
{
 int i;
 for (i = 2; i <= n/2; i++)
     14e:	2f 5f       	subi	r18, 0xFF	; 255
     150:	3f 4f       	sbci	r19, 0xFF	; 255
     152:	c2 17       	cp	r28, r18
     154:	d3 07       	cpc	r29, r19
     156:	ac f7       	brge	.-22     	; 0x142 <is_prime+0x16>
	 if ((n % i) == 0)
	 	return(0);
 return(1);
     158:	81 e0       	ldi	r24, 0x01	; 1
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	02 c0       	rjmp	.+4      	; 0x162 <is_prime+0x36>
int is_prime(int n)
{
 int i;
 for (i = 2; i <= n/2; i++)
	 if ((n % i) == 0)
	 	return(0);
     15e:	80 e0       	ldi	r24, 0x00	; 0
     160:	90 e0       	ldi	r25, 0x00	; 0
 return(1);
}
     162:	df 91       	pop	r29
     164:	cf 91       	pop	r28
     166:	08 95       	ret

00000168 <app_prime>:
void app_prime(char *ap)
{
     168:	cf 92       	push	r12
     16a:	df 92       	push	r13
     16c:	ef 92       	push	r14
     16e:	ff 92       	push	r15
     170:	0f 93       	push	r16
     172:	1f 93       	push	r17
     174:	cf 93       	push	r28
     176:	df 93       	push	r29
 int t = 2000, count = 0, n;
 if (ap) t = atoi(ap);
     178:	00 97       	sbiw	r24, 0x00	; 0
     17a:	21 f0       	breq	.+8      	; 0x184 <app_prime+0x1c>
     17c:	0e 94 14 06 	call	0xc28	; 0xc28 <atoi>
     180:	7c 01       	movw	r14, r24
     182:	04 c0       	rjmp	.+8      	; 0x18c <app_prime+0x24>
	 	return(0);
 return(1);
}
void app_prime(char *ap)
{
 int t = 2000, count = 0, n;
     184:	90 ed       	ldi	r25, 0xD0	; 208
     186:	e9 2e       	mov	r14, r25
     188:	97 e0       	ldi	r25, 0x07	; 7
     18a:	f9 2e       	mov	r15, r25
 if (ap) t = atoi(ap);

 for (n = 2; n <= t; n++) {
     18c:	c2 e0       	ldi	r28, 0x02	; 2
     18e:	d0 e0       	ldi	r29, 0x00	; 0
	 	return(0);
 return(1);
}
void app_prime(char *ap)
{
 int t = 2000, count = 0, n;
     190:	00 e0       	ldi	r16, 0x00	; 0
     192:	10 e0       	ldi	r17, 0x00	; 0
 if (ap) t = atoi(ap);

 for (n = 2; n <= t; n++) {
 	if (is_prime(n)) {
	 	count++;
	 	printf("%d is a prime number !!!\n", n);
     194:	80 e0       	ldi	r24, 0x00	; 0
     196:	c8 2e       	mov	r12, r24
     198:	82 e0       	ldi	r24, 0x02	; 2
     19a:	d8 2e       	mov	r13, r24
void app_prime(char *ap)
{
 int t = 2000, count = 0, n;
 if (ap) t = atoi(ap);

 for (n = 2; n <= t; n++) {
     19c:	16 c0       	rjmp	.+44     	; 0x1ca <app_prime+0x62>
 	if (is_prime(n)) {
     19e:	ce 01       	movw	r24, r28
     1a0:	0e 94 96 00 	call	0x12c	; 0x12c <is_prime>
     1a4:	00 97       	sbiw	r24, 0x00	; 0
     1a6:	81 f0       	breq	.+32     	; 0x1c8 <app_prime+0x60>
	 	count++;
     1a8:	0f 5f       	subi	r16, 0xFF	; 255
     1aa:	1f 4f       	sbci	r17, 0xFF	; 255
	 	printf("%d is a prime number !!!\n", n);
     1ac:	00 d0       	rcall	.+0      	; 0x1ae <app_prime+0x46>
     1ae:	0f 92       	push	r0
     1b0:	ed b7       	in	r30, 0x3d	; 61
     1b2:	fe b7       	in	r31, 0x3e	; 62
     1b4:	d2 82       	std	Z+2, r13	; 0x02
     1b6:	c1 82       	std	Z+1, r12	; 0x01
     1b8:	d4 83       	std	Z+4, r29	; 0x04
     1ba:	c3 83       	std	Z+3, r28	; 0x03
     1bc:	0e 94 a3 06 	call	0xd46	; 0xd46 <printf>
     1c0:	0f 90       	pop	r0
     1c2:	0f 90       	pop	r0
     1c4:	0f 90       	pop	r0
     1c6:	0f 90       	pop	r0
void app_prime(char *ap)
{
 int t = 2000, count = 0, n;
 if (ap) t = atoi(ap);

 for (n = 2; n <= t; n++) {
     1c8:	21 96       	adiw	r28, 0x01	; 1
     1ca:	ec 16       	cp	r14, r28
     1cc:	fd 06       	cpc	r15, r29
     1ce:	3c f7       	brge	.-50     	; 0x19e <app_prime+0x36>
 	if (is_prime(n)) {
	 	count++;
	 	printf("%d is a prime number !!!\n", n);
	 }
 }
 printf("count=%d\n", count);
     1d0:	00 d0       	rcall	.+0      	; 0x1d2 <app_prime+0x6a>
     1d2:	0f 92       	push	r0
     1d4:	8a e1       	ldi	r24, 0x1A	; 26
     1d6:	92 e0       	ldi	r25, 0x02	; 2
     1d8:	ed b7       	in	r30, 0x3d	; 61
     1da:	fe b7       	in	r31, 0x3e	; 62
     1dc:	92 83       	std	Z+2, r25	; 0x02
     1de:	81 83       	std	Z+1, r24	; 0x01
     1e0:	14 83       	std	Z+4, r17	; 0x04
     1e2:	03 83       	std	Z+3, r16	; 0x03
     1e4:	0e 94 a3 06 	call	0xd46	; 0xd46 <printf>
     1e8:	0f 90       	pop	r0
     1ea:	0f 90       	pop	r0
     1ec:	0f 90       	pop	r0
     1ee:	0f 90       	pop	r0
}
     1f0:	df 91       	pop	r29
     1f2:	cf 91       	pop	r28
     1f4:	1f 91       	pop	r17
     1f6:	0f 91       	pop	r16
     1f8:	ff 90       	pop	r15
     1fa:	ef 90       	pop	r14
     1fc:	df 90       	pop	r13
     1fe:	cf 90       	pop	r12
     200:	08 95       	ret

00000202 <app_list>:
void app_list(char *ap)
{
     202:	ef 92       	push	r14
     204:	ff 92       	push	r15
     206:	1f 93       	push	r17
     208:	cf 93       	push	r28
     20a:	df 93       	push	r29
     20c:	cd b7       	in	r28, 0x3d	; 61
     20e:	de b7       	in	r29, 0x3e	; 62
     210:	28 97       	sbiw	r28, 0x08	; 8
     212:	0f b6       	in	r0, 0x3f	; 63
     214:	f8 94       	cli
     216:	de bf       	out	0x3e, r29	; 62
     218:	0f be       	out	0x3f, r0	; 63
     21a:	cd bf       	out	0x3d, r28	; 61
	char buf[8], how = 'a';
	struct node *np;

	if (ap){
     21c:	00 97       	sbiw	r24, 0x00	; 0
     21e:	19 f0       	breq	.+6      	; 0x226 <app_list+0x24>
    	// how = ap[0] insert head or tail or ascn
    	how = *ap;
     220:	fc 01       	movw	r30, r24
     222:	10 81       	ld	r17, Z
     224:	01 c0       	rjmp	.+2      	; 0x228 <app_list+0x26>
 }
 printf("count=%d\n", count);
}
void app_list(char *ap)
{
	char buf[8], how = 'a';
     226:	11 e6       	ldi	r17, 0x61	; 97
	if (ap){
    	// how = ap[0] insert head or tail or ascn
    	how = *ap;
	}
	while(1) {
		printf("> ");
     228:	24 e2       	ldi	r18, 0x24	; 36
     22a:	e2 2e       	mov	r14, r18
     22c:	22 e0       	ldi	r18, 0x02	; 2
     22e:	f2 2e       	mov	r15, r18
     230:	0f 92       	push	r0
     232:	0f 92       	push	r0
     234:	ed b7       	in	r30, 0x3d	; 61
     236:	fe b7       	in	r31, 0x3e	; 62
     238:	f2 82       	std	Z+2, r15	; 0x02
     23a:	e1 82       	std	Z+1, r14	; 0x01
     23c:	0e 94 a3 06 	call	0xd46	; 0xd46 <printf>
		if (fgets(buf, 8, stdin) == NULL)
     240:	0f 90       	pop	r0
     242:	0f 90       	pop	r0
     244:	40 91 b1 04 	lds	r20, 0x04B1
     248:	50 91 b2 04 	lds	r21, 0x04B2
     24c:	ce 01       	movw	r24, r28
     24e:	01 96       	adiw	r24, 0x01	; 1
     250:	68 e0       	ldi	r22, 0x08	; 8
     252:	70 e0       	ldi	r23, 0x00	; 0
     254:	0e 94 6f 06 	call	0xcde	; 0xcde <fgets>
     258:	00 97       	sbiw	r24, 0x00	; 0
     25a:	a1 f0       	breq	.+40     	; 0x284 <app_list+0x82>
 			break;
		np = get_node();
     25c:	0e 94 91 01 	call	0x322	; 0x322 <get_node>
    // use only the first character in buf and buf is number
		np->data = buf[0];
     260:	29 81       	ldd	r18, Y+1	; 0x01
     262:	fc 01       	movw	r30, r24
     264:	20 83       	st	Z, r18
     266:	11 82       	std	Z+1, r1	; 0x01
		switch(how) {
     268:	18 36       	cpi	r17, 0x68	; 104
     26a:	19 f0       	breq	.+6      	; 0x272 <app_list+0x70>
     26c:	14 37       	cpi	r17, 0x74	; 116
     26e:	39 f4       	brne	.+14     	; 0x27e <app_list+0x7c>
     270:	03 c0       	rjmp	.+6      	; 0x278 <app_list+0x76>
			case 'h' :
        insert_node_head(np);
     272:	0e 94 99 01 	call	0x332	; 0x332 <insert_node_head>
        break;
     276:	dc cf       	rjmp	.-72     	; 0x230 <app_list+0x2e>
			case 't' :
        insert_node_tail(np);
     278:	0e 94 ae 01 	call	0x35c	; 0x35c <insert_node_tail>
        break;
     27c:	d9 cf       	rjmp	.-78     	; 0x230 <app_list+0x2e>
			default :
        //ascn is listing small to big
        insert_node_ascn(np);
     27e:	0e 94 c5 01 	call	0x38a	; 0x38a <insert_node_ascn>
     282:	d6 cf       	rjmp	.-84     	; 0x230 <app_list+0x2e>
 		}
 	}
 	tour_list();
     284:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <tour_list>
 	free_list();
     288:	0e 94 29 02 	call	0x452	; 0x452 <free_list>
}
     28c:	28 96       	adiw	r28, 0x08	; 8
     28e:	0f b6       	in	r0, 0x3f	; 63
     290:	f8 94       	cli
     292:	de bf       	out	0x3e, r29	; 62
     294:	0f be       	out	0x3f, r0	; 63
     296:	cd bf       	out	0x3d, r28	; 61
     298:	df 91       	pop	r29
     29a:	cf 91       	pop	r28
     29c:	1f 91       	pop	r17
     29e:	ff 90       	pop	r15
     2a0:	ef 90       	pop	r14
     2a2:	08 95       	ret

000002a4 <app_timer>:
void  app_timer(char *ap)  {
     2a4:	0f 93       	push	r16
     2a6:	1f 93       	push	r17
     2a8:	cf 93       	push	r28
     2aa:	df 93       	push	r29
     2ac:	cd b7       	in	r28, 0x3d	; 61
     2ae:	de b7       	in	r29, 0x3e	; 62
     2b0:	62 97       	sbiw	r28, 0x12	; 18
     2b2:	0f b6       	in	r0, 0x3f	; 63
     2b4:	f8 94       	cli
     2b6:	de bf       	out	0x3e, r29	; 62
     2b8:	0f be       	out	0x3f, r0	; 63
     2ba:	cd bf       	out	0x3d, r28	; 61
  char buf[8];
  int ms;
  struct task  tsk;
  //>>5000
  while(1) {
   printf(">> ");
     2bc:	07 e2       	ldi	r16, 0x27	; 39
     2be:	12 e0       	ldi	r17, 0x02	; 2
     2c0:	0f 92       	push	r0
     2c2:	0f 92       	push	r0
     2c4:	ed b7       	in	r30, 0x3d	; 61
     2c6:	fe b7       	in	r31, 0x3e	; 62
     2c8:	12 83       	std	Z+2, r17	; 0x02
     2ca:	01 83       	std	Z+1, r16	; 0x01
     2cc:	0e 94 a3 06 	call	0xd46	; 0xd46 <printf>
   if (fgets(buf, 8, stdin) == NULL || (ms = atoi(buf)) == 0)
     2d0:	0f 90       	pop	r0
     2d2:	0f 90       	pop	r0
     2d4:	40 91 b1 04 	lds	r20, 0x04B1
     2d8:	50 91 b2 04 	lds	r21, 0x04B2
     2dc:	ce 01       	movw	r24, r28
     2de:	01 96       	adiw	r24, 0x01	; 1
     2e0:	68 e0       	ldi	r22, 0x08	; 8
     2e2:	70 e0       	ldi	r23, 0x00	; 0
     2e4:	0e 94 6f 06 	call	0xcde	; 0xcde <fgets>
     2e8:	00 97       	sbiw	r24, 0x00	; 0
     2ea:	61 f0       	breq	.+24     	; 0x304 <app_timer+0x60>
     2ec:	ce 01       	movw	r24, r28
     2ee:	01 96       	adiw	r24, 0x01	; 1
     2f0:	0e 94 14 06 	call	0xc28	; 0xc28 <atoi>
     2f4:	bc 01       	movw	r22, r24
     2f6:	00 97       	sbiw	r24, 0x00	; 0
     2f8:	29 f0       	breq	.+10     	; 0x304 <app_timer+0x60>
     break;
   insert_timer(&tsk, ms);
     2fa:	ce 01       	movw	r24, r28
     2fc:	09 96       	adiw	r24, 0x09	; 9
     2fe:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <insert_timer>
  }
     302:	de cf       	rjmp	.-68     	; 0x2c0 <app_timer+0x1c>
  tour_timer();
     304:	0e 94 9a 03 	call	0x734	; 0x734 <tour_timer>
  free_timer();
     308:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <free_timer>
}
     30c:	62 96       	adiw	r28, 0x12	; 18
     30e:	0f b6       	in	r0, 0x3f	; 63
     310:	f8 94       	cli
     312:	de bf       	out	0x3e, r29	; 62
     314:	0f be       	out	0x3f, r0	; 63
     316:	cd bf       	out	0x3d, r28	; 61
     318:	df 91       	pop	r29
     31a:	cf 91       	pop	r28
     31c:	1f 91       	pop	r17
     31e:	0f 91       	pop	r16
     320:	08 95       	ret

00000322 <get_node>:
struct node *Head = NULL;

struct node *get_node()
{
	struct node *cp;
	cp = (struct node *)malloc(sizeof(struct node));
     322:	84 e0       	ldi	r24, 0x04	; 4
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	0e 94 e5 04 	call	0x9ca	; 0x9ca <malloc>
	return(cp);
}
     32a:	08 95       	ret

0000032c <free_node>:
void free_node(struct node *np)
{
	free(np);
     32c:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <free>
}
     330:	08 95       	ret

00000332 <insert_node_head>:
void insert_node_head(struct node *np)
{
     332:	fc 01       	movw	r30, r24
	if (!Head) {
     334:	80 91 9e 02 	lds	r24, 0x029E
     338:	90 91 9f 02 	lds	r25, 0x029F
     33c:	00 97       	sbiw	r24, 0x00	; 0
     33e:	39 f4       	brne	.+14     	; 0x34e <insert_node_head+0x1c>
		Head = np;
     340:	f0 93 9f 02 	sts	0x029F, r31
     344:	e0 93 9e 02 	sts	0x029E, r30
		np->link = NULL;
     348:	13 82       	std	Z+3, r1	; 0x03
     34a:	12 82       	std	Z+2, r1	; 0x02
     34c:	08 95       	ret
	}
 	else {
 		np->link = Head;
     34e:	93 83       	std	Z+3, r25	; 0x03
     350:	82 83       	std	Z+2, r24	; 0x02
 		Head = np;
     352:	f0 93 9f 02 	sts	0x029F, r31
     356:	e0 93 9e 02 	sts	0x029E, r30
     35a:	08 95       	ret

0000035c <insert_node_tail>:
	}
}
void insert_node_tail(struct node *np)
{
	struct node *cp;
	if (!Head){
     35c:	e0 91 9e 02 	lds	r30, 0x029E
     360:	f0 91 9f 02 	lds	r31, 0x029F
     364:	30 97       	sbiw	r30, 0x00	; 0
     366:	31 f4       	brne	.+12     	; 0x374 <insert_node_tail+0x18>
		Head = np;
     368:	90 93 9f 02 	sts	0x029F, r25
     36c:	80 93 9e 02 	sts	0x029E, r24
     370:	08 c0       	rjmp	.+16     	; 0x382 <insert_node_tail+0x26>
	}
	else {
		//cp point to tail of list
		for (cp = Head; cp->link != NULL; cp = cp->link)
     372:	f9 01       	movw	r30, r18
     374:	22 81       	ldd	r18, Z+2	; 0x02
     376:	33 81       	ldd	r19, Z+3	; 0x03
     378:	21 15       	cp	r18, r1
     37a:	31 05       	cpc	r19, r1
     37c:	d1 f7       	brne	.-12     	; 0x372 <insert_node_tail+0x16>
			;
		cp->link = np;
     37e:	93 83       	std	Z+3, r25	; 0x03
     380:	82 83       	std	Z+2, r24	; 0x02
	}
	np->link = NULL;
     382:	fc 01       	movw	r30, r24
     384:	13 82       	std	Z+3, r1	; 0x03
     386:	12 82       	std	Z+2, r1	; 0x02
}
     388:	08 95       	ret

0000038a <insert_node_ascn>:
void insert_node_ascn(struct node *np)
{
     38a:	cf 93       	push	r28
     38c:	df 93       	push	r29
     38e:	fc 01       	movw	r30, r24
	struct node *cp, *pp;
	if (!Head) {
     390:	20 91 9e 02 	lds	r18, 0x029E
     394:	30 91 9f 02 	lds	r19, 0x029F
     398:	21 15       	cp	r18, r1
     39a:	31 05       	cpc	r19, r1
     39c:	31 f0       	breq	.+12     	; 0x3aa <insert_node_ascn+0x20>
		np->link = NULL;
	}
	else {
		//pp always point to right before of cp
		//loop while data of new node is smaller than data of cp
		for (cp = Head, pp = NULL; (cp != NULL) && (cp->data < np->data);pp = cp, cp = cp->link)
     39e:	40 81       	ld	r20, Z
     3a0:	51 81       	ldd	r21, Z+1	; 0x01
     3a2:	d9 01       	movw	r26, r18
     3a4:	c0 e0       	ldi	r28, 0x00	; 0
     3a6:	d0 e0       	ldi	r29, 0x00	; 0
     3a8:	0f c0       	rjmp	.+30     	; 0x3c8 <insert_node_ascn+0x3e>
}
void insert_node_ascn(struct node *np)
{
	struct node *cp, *pp;
	if (!Head) {
		Head = np;
     3aa:	90 93 9f 02 	sts	0x029F, r25
     3ae:	80 93 9e 02 	sts	0x029E, r24
		np->link = NULL;
     3b2:	13 82       	std	Z+3, r1	; 0x03
     3b4:	12 82       	std	Z+2, r1	; 0x02
     3b6:	1d c0       	rjmp	.+58     	; 0x3f2 <insert_node_ascn+0x68>
	}
	else {
		//pp always point to right before of cp
		//loop while data of new node is smaller than data of cp
		for (cp = Head, pp = NULL; (cp != NULL) && (cp->data < np->data);pp = cp, cp = cp->link)
     3b8:	12 96       	adiw	r26, 0x02	; 2
     3ba:	8d 91       	ld	r24, X+
     3bc:	9c 91       	ld	r25, X
     3be:	13 97       	sbiw	r26, 0x03	; 3
     3c0:	ed 01       	movw	r28, r26
     3c2:	00 97       	sbiw	r24, 0x00	; 0
     3c4:	39 f0       	breq	.+14     	; 0x3d4 <insert_node_ascn+0x4a>
     3c6:	dc 01       	movw	r26, r24
     3c8:	8d 91       	ld	r24, X+
     3ca:	9c 91       	ld	r25, X
     3cc:	11 97       	sbiw	r26, 0x01	; 1
     3ce:	84 17       	cp	r24, r20
     3d0:	95 07       	cpc	r25, r21
     3d2:	94 f3       	brlt	.-28     	; 0x3b8 <insert_node_ascn+0x2e>
			;
		//insert new node to HEAD. in this case data of new node is smallest one
 		if (pp == NULL) {
     3d4:	20 97       	sbiw	r28, 0x00	; 0
     3d6:	39 f4       	brne	.+14     	; 0x3e6 <insert_node_ascn+0x5c>
			np->link = Head;
     3d8:	33 83       	std	Z+3, r19	; 0x03
     3da:	22 83       	std	Z+2, r18	; 0x02
			Head = np;
     3dc:	f0 93 9f 02 	sts	0x029F, r31
     3e0:	e0 93 9e 02 	sts	0x029E, r30
     3e4:	06 c0       	rjmp	.+12     	; 0x3f2 <insert_node_ascn+0x68>
		}
		//insert between pp and cp
		else {
			np->link = pp->link;
     3e6:	8a 81       	ldd	r24, Y+2	; 0x02
     3e8:	9b 81       	ldd	r25, Y+3	; 0x03
     3ea:	93 83       	std	Z+3, r25	; 0x03
     3ec:	82 83       	std	Z+2, r24	; 0x02
			pp->link = np;
     3ee:	fb 83       	std	Y+3, r31	; 0x03
     3f0:	ea 83       	std	Y+2, r30	; 0x02
		}
	}
}
     3f2:	df 91       	pop	r29
     3f4:	cf 91       	pop	r28
     3f6:	08 95       	ret

000003f8 <tour_list>:
void tour_list()
{
     3f8:	0f 93       	push	r16
     3fa:	1f 93       	push	r17
     3fc:	cf 93       	push	r28
     3fe:	df 93       	push	r29
	struct node *cp;
	printf("\n");
     400:	8a e0       	ldi	r24, 0x0A	; 10
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	0e 94 b5 06 	call	0xd6a	; 0xd6a <putchar>
	for (cp = Head; cp != NULL; cp = cp->link)
     408:	c0 91 9e 02 	lds	r28, 0x029E
     40c:	d0 91 9f 02 	lds	r29, 0x029F
		printf("-->%c ", cp->data);
     410:	0b e2       	ldi	r16, 0x2B	; 43
     412:	12 e0       	ldi	r17, 0x02	; 2
}
void tour_list()
{
	struct node *cp;
	printf("\n");
	for (cp = Head; cp != NULL; cp = cp->link)
     414:	13 c0       	rjmp	.+38     	; 0x43c <tour_list+0x44>
		printf("-->%c ", cp->data);
     416:	00 d0       	rcall	.+0      	; 0x418 <tour_list+0x20>
     418:	0f 92       	push	r0
     41a:	ed b7       	in	r30, 0x3d	; 61
     41c:	fe b7       	in	r31, 0x3e	; 62
     41e:	12 83       	std	Z+2, r17	; 0x02
     420:	01 83       	std	Z+1, r16	; 0x01
     422:	88 81       	ld	r24, Y
     424:	99 81       	ldd	r25, Y+1	; 0x01
     426:	94 83       	std	Z+4, r25	; 0x04
     428:	83 83       	std	Z+3, r24	; 0x03
     42a:	0e 94 a3 06 	call	0xd46	; 0xd46 <printf>
}
void tour_list()
{
	struct node *cp;
	printf("\n");
	for (cp = Head; cp != NULL; cp = cp->link)
     42e:	0a 80       	ldd	r0, Y+2	; 0x02
     430:	db 81       	ldd	r29, Y+3	; 0x03
     432:	c0 2d       	mov	r28, r0
     434:	0f 90       	pop	r0
     436:	0f 90       	pop	r0
     438:	0f 90       	pop	r0
     43a:	0f 90       	pop	r0
     43c:	20 97       	sbiw	r28, 0x00	; 0
     43e:	59 f7       	brne	.-42     	; 0x416 <tour_list+0x1e>
		printf("-->%c ", cp->data);
	printf("\n");
     440:	8a e0       	ldi	r24, 0x0A	; 10
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	0e 94 b5 06 	call	0xd6a	; 0xd6a <putchar>
}
     448:	df 91       	pop	r29
     44a:	cf 91       	pop	r28
     44c:	1f 91       	pop	r17
     44e:	0f 91       	pop	r16
     450:	08 95       	ret

00000452 <free_list>:
void free_list()
{
	struct node *cp;
	//Head point to second node of list. cp point to first node of list and delete cp
	for ( ; Head != NULL; ) {
     452:	09 c0       	rjmp	.+18     	; 0x466 <free_list+0x14>
		cp = Head;
		Head = cp->link;
     454:	fc 01       	movw	r30, r24
     456:	22 81       	ldd	r18, Z+2	; 0x02
     458:	33 81       	ldd	r19, Z+3	; 0x03
     45a:	30 93 9f 02 	sts	0x029F, r19
     45e:	20 93 9e 02 	sts	0x029E, r18
	cp = (struct node *)malloc(sizeof(struct node));
	return(cp);
}
void free_node(struct node *np)
{
	free(np);
     462:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <free>
}
void free_list()
{
	struct node *cp;
	//Head point to second node of list. cp point to first node of list and delete cp
	for ( ; Head != NULL; ) {
     466:	80 91 9e 02 	lds	r24, 0x029E
     46a:	90 91 9f 02 	lds	r25, 0x029F
     46e:	00 97       	sbiw	r24, 0x00	; 0
     470:	89 f7       	brne	.-30     	; 0x454 <free_list+0x2>
		cp = Head;
		Head = cp->link;
		free_node(cp);
	}
}
     472:	08 95       	ret

00000474 <q_init>:
char qo[QO_SIZE];
int fi, ri;
int fo, ro;
void q_init()
{
	fi = ri = fo = ro = 0;
     474:	10 92 a9 03 	sts	0x03A9, r1
     478:	10 92 a8 03 	sts	0x03A8, r1
     47c:	10 92 a7 03 	sts	0x03A7, r1
     480:	10 92 a6 03 	sts	0x03A6, r1
     484:	10 92 ab 03 	sts	0x03AB, r1
     488:	10 92 aa 03 	sts	0x03AA, r1
     48c:	10 92 a5 02 	sts	0x02A5, r1
     490:	10 92 a4 02 	sts	0x02A4, r1
}
     494:	08 95       	ret

00000496 <qi_insert>:
int qi_insert(char ch)
{
     496:	48 2f       	mov	r20, r24
 	if ((ri + 1) % QI_SIZE == fi)
     498:	20 91 aa 03 	lds	r18, 0x03AA
     49c:	30 91 ab 03 	lds	r19, 0x03AB
     4a0:	2f 5f       	subi	r18, 0xFF	; 255
     4a2:	3f 4f       	sbci	r19, 0xFF	; 255
     4a4:	c9 01       	movw	r24, r18
     4a6:	60 e0       	ldi	r22, 0x00	; 0
     4a8:	71 e0       	ldi	r23, 0x01	; 1
     4aa:	0e 94 be 04 	call	0x97c	; 0x97c <__divmodhi4>
     4ae:	9c 01       	movw	r18, r24
     4b0:	80 91 a4 02 	lds	r24, 0x02A4
     4b4:	90 91 a5 02 	lds	r25, 0x02A5
     4b8:	28 17       	cp	r18, r24
     4ba:	39 07       	cpc	r19, r25
     4bc:	59 f0       	breq	.+22     	; 0x4d4 <qi_insert+0x3e>
 		return(0); // full
	ri = (ri + 1) % QI_SIZE;
     4be:	30 93 ab 03 	sts	0x03AB, r19
     4c2:	20 93 aa 03 	sts	0x03AA, r18
	qi[ri] = ch;
     4c6:	24 55       	subi	r18, 0x54	; 84
     4c8:	3c 4f       	sbci	r19, 0xFC	; 252
     4ca:	f9 01       	movw	r30, r18
     4cc:	40 83       	st	Z, r20
	return(1);
     4ce:	81 e0       	ldi	r24, 0x01	; 1
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	08 95       	ret
	fi = ri = fo = ro = 0;
}
int qi_insert(char ch)
{
 	if ((ri + 1) % QI_SIZE == fi)
 		return(0); // full
     4d4:	80 e0       	ldi	r24, 0x00	; 0
     4d6:	90 e0       	ldi	r25, 0x00	; 0
	ri = (ri + 1) % QI_SIZE;
	qi[ri] = ch;
	return(1);
}
     4d8:	08 95       	ret

000004da <qi_delete>:
int qi_delete()
{
 if (ri == fi)
     4da:	80 91 a4 02 	lds	r24, 0x02A4
     4de:	90 91 a5 02 	lds	r25, 0x02A5
     4e2:	20 91 aa 03 	lds	r18, 0x03AA
     4e6:	30 91 ab 03 	lds	r19, 0x03AB
     4ea:	28 17       	cp	r18, r24
     4ec:	39 07       	cpc	r19, r25
     4ee:	79 f0       	breq	.+30     	; 0x50e <qi_delete+0x34>
 	return(0); // empty
 fi = (fi + 1) % QI_SIZE;
     4f0:	01 96       	adiw	r24, 0x01	; 1
     4f2:	60 e0       	ldi	r22, 0x00	; 0
     4f4:	71 e0       	ldi	r23, 0x01	; 1
     4f6:	0e 94 be 04 	call	0x97c	; 0x97c <__divmodhi4>
     4fa:	90 93 a5 02 	sts	0x02A5, r25
     4fe:	80 93 a4 02 	sts	0x02A4, r24
 	return(qi[fi]);
     502:	84 55       	subi	r24, 0x54	; 84
     504:	9c 4f       	sbci	r25, 0xFC	; 252
     506:	fc 01       	movw	r30, r24
     508:	80 81       	ld	r24, Z
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	08 95       	ret
	return(1);
}
int qi_delete()
{
 if (ri == fi)
 	return(0); // empty
     50e:	80 e0       	ldi	r24, 0x00	; 0
     510:	90 e0       	ldi	r25, 0x00	; 0
 fi = (fi + 1) % QI_SIZE;
 	return(qi[fi]);
}
     512:	08 95       	ret

00000514 <qo_insert>:

int qo_insert(char ch)
{
     514:	48 2f       	mov	r20, r24
 	if ((ro + 1) % QO_SIZE == fo)
     516:	20 91 a8 03 	lds	r18, 0x03A8
     51a:	30 91 a9 03 	lds	r19, 0x03A9
     51e:	2f 5f       	subi	r18, 0xFF	; 255
     520:	3f 4f       	sbci	r19, 0xFF	; 255
     522:	c9 01       	movw	r24, r18
     524:	60 e0       	ldi	r22, 0x00	; 0
     526:	71 e0       	ldi	r23, 0x01	; 1
     528:	0e 94 be 04 	call	0x97c	; 0x97c <__divmodhi4>
     52c:	9c 01       	movw	r18, r24
     52e:	80 91 a6 03 	lds	r24, 0x03A6
     532:	90 91 a7 03 	lds	r25, 0x03A7
     536:	28 17       	cp	r18, r24
     538:	39 07       	cpc	r19, r25
     53a:	59 f0       	breq	.+22     	; 0x552 <qo_insert+0x3e>
 		return(0); // full
	ro = (ro + 1) % QO_SIZE;
     53c:	30 93 a9 03 	sts	0x03A9, r19
     540:	20 93 a8 03 	sts	0x03A8, r18
	qo[ro] = ch;
     544:	2a 55       	subi	r18, 0x5A	; 90
     546:	3d 4f       	sbci	r19, 0xFD	; 253
     548:	f9 01       	movw	r30, r18
     54a:	40 83       	st	Z, r20
	return(1);
     54c:	81 e0       	ldi	r24, 0x01	; 1
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	08 95       	ret
}

int qo_insert(char ch)
{
 	if ((ro + 1) % QO_SIZE == fo)
 		return(0); // full
     552:	80 e0       	ldi	r24, 0x00	; 0
     554:	90 e0       	ldi	r25, 0x00	; 0
	ro = (ro + 1) % QO_SIZE;
	qo[ro] = ch;
	return(1);
}
     556:	08 95       	ret

00000558 <qo_delete>:
int qo_delete()
{
 if (ro == fo)
     558:	80 91 a6 03 	lds	r24, 0x03A6
     55c:	90 91 a7 03 	lds	r25, 0x03A7
     560:	20 91 a8 03 	lds	r18, 0x03A8
     564:	30 91 a9 03 	lds	r19, 0x03A9
     568:	28 17       	cp	r18, r24
     56a:	39 07       	cpc	r19, r25
     56c:	79 f0       	breq	.+30     	; 0x58c <qo_delete+0x34>
 	return(0); // empty
 fo = (fo + 1) % QO_SIZE;
     56e:	01 96       	adiw	r24, 0x01	; 1
     570:	60 e0       	ldi	r22, 0x00	; 0
     572:	71 e0       	ldi	r23, 0x01	; 1
     574:	0e 94 be 04 	call	0x97c	; 0x97c <__divmodhi4>
     578:	90 93 a7 03 	sts	0x03A7, r25
     57c:	80 93 a6 03 	sts	0x03A6, r24
 	return(qo[fo]);
     580:	8a 55       	subi	r24, 0x5A	; 90
     582:	9d 4f       	sbci	r25, 0xFD	; 253
     584:	fc 01       	movw	r30, r24
     586:	80 81       	ld	r24, Z
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	08 95       	ret
	return(1);
}
int qo_delete()
{
 if (ro == fo)
 	return(0); // empty
     58c:	80 e0       	ldi	r24, 0x00	; 0
     58e:	90 e0       	ldi	r25, 0x00	; 0
 fo = (fo + 1) % QO_SIZE;
 	return(qo[fo]);
}
     590:	08 95       	ret

00000592 <uart_getchar>:
}
int uart_getchar(FILE *stream)
{
	char ch;
 	do {
 		cli();
     592:	f8 94       	cli
 		ch = qi_delete();
     594:	0e 94 6d 02 	call	0x4da	; 0x4da <qi_delete>
 		sei();
     598:	78 94       	sei
 	} while (ch == 0);
     59a:	88 23       	and	r24, r24
     59c:	d1 f3       	breq	.-12     	; 0x592 <uart_getchar>
 	if (ch == ETX) return(-1);
     59e:	84 30       	cpi	r24, 0x04	; 4
     5a0:	11 f0       	breq	.+4      	; 0x5a6 <uart_getchar+0x14>
 	else return(ch);
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	08 95       	ret
 	do {
 		cli();
 		ch = qi_delete();
 		sei();
 	} while (ch == 0);
 	if (ch == ETX) return(-1);
     5a6:	8f ef       	ldi	r24, 0xFF	; 255
     5a8:	9f ef       	ldi	r25, 0xFF	; 255
 	else return(ch);
 }
     5aa:	08 95       	ret

000005ac <uart_putchar>:
	 sbi(UCSR0B, RXEN0); // RX enable
 	 sbi(UCSR0B, RXCIE0); // RX complete interrupt enable 
 }

int uart_putchar(char ch, FILE *stream)
{
     5ac:	cf 93       	push	r28
     5ae:	c8 2f       	mov	r28, r24

	 if (ch == '\n')
     5b0:	8a 30       	cpi	r24, 0x0A	; 10
     5b2:	19 f4       	brne	.+6      	; 0x5ba <uart_putchar+0xe>
	 	uart_putchar('\r', stream);
     5b4:	8d e0       	ldi	r24, 0x0D	; 13
     5b6:	0e 94 d6 02 	call	0x5ac	; 0x5ac <uart_putchar>
	 cli(); /* clear interrupt flag */
     5ba:	f8 94       	cli
	 if (!uart_busy) {
     5bc:	80 91 ac 04 	lds	r24, 0x04AC
     5c0:	88 23       	and	r24, r24
     5c2:	59 f4       	brne	.+22     	; 0x5da <uart_putchar+0x2e>
	 	UDR0 = ch;
     5c4:	c0 93 c6 00 	sts	0x00C6, r28
	 	uart_busy = 1;
     5c8:	81 e0       	ldi	r24, 0x01	; 1
     5ca:	80 93 ac 04 	sts	0x04AC, r24
     5ce:	0a c0       	rjmp	.+20     	; 0x5e4 <uart_putchar+0x38>
	 }
	 else {
	 	while(qo_insert(ch) == 0) {
	 		sei();
     5d0:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5d2:	86 ef       	ldi	r24, 0xF6	; 246
     5d4:	8a 95       	dec	r24
     5d6:	f1 f7       	brne	.-4      	; 0x5d4 <uart_putchar+0x28>
	 		_delay_us(100);
	 		cli();
     5d8:	f8 94       	cli
	 if (!uart_busy) {
	 	UDR0 = ch;
	 	uart_busy = 1;
	 }
	 else {
	 	while(qo_insert(ch) == 0) {
     5da:	8c 2f       	mov	r24, r28
     5dc:	0e 94 8a 02 	call	0x514	; 0x514 <qo_insert>
     5e0:	00 97       	sbiw	r24, 0x00	; 0
     5e2:	b1 f3       	breq	.-20     	; 0x5d0 <uart_putchar+0x24>
	 		sei();
	 		_delay_us(100);
	 		cli();
	 	}
	 }
	 sei(); /* set interrupt flag */
     5e4:	78 94       	sei
	 return(1);
}
     5e6:	81 e0       	ldi	r24, 0x01	; 1
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	cf 91       	pop	r28
     5ec:	08 95       	ret

000005ee <uart_init>:
 FILE Mystdin = FDEV_SETUP_STREAM (NULL, uart_getchar,_FDEV_SETUP_READ);
 unsigned char uart_busy;

 void uart_init()
 {
 	 stdin = &Mystdin;
     5ee:	80 e7       	ldi	r24, 0x70	; 112
     5f0:	92 e0       	ldi	r25, 0x02	; 2
     5f2:	90 93 b2 04 	sts	0x04B2, r25
     5f6:	80 93 b1 04 	sts	0x04B1, r24
	 stdout = &Mystdout;
     5fa:	8e e7       	ldi	r24, 0x7E	; 126
     5fc:	92 e0       	ldi	r25, 0x02	; 2
     5fe:	90 93 b4 04 	sts	0x04B4, r25
     602:	80 93 b3 04 	sts	0x04B3, r24
	 q_init();
     606:	0e 94 3a 02 	call	0x474	; 0x474 <q_init>
	 uart_busy = 0; // false
     60a:	10 92 ac 04 	sts	0x04AC, r1
	 UBRR0H = 0x00; UBRR0L = 0x07;
     60e:	10 92 c5 00 	sts	0x00C5, r1
     612:	87 e0       	ldi	r24, 0x07	; 7
     614:	80 93 c4 00 	sts	0x00C4, r24
	 sbi(UCSR0A, U2X0); // UCSR)A |= (1 << U2X0);
     618:	e0 ec       	ldi	r30, 0xC0	; 192
     61a:	f0 e0       	ldi	r31, 0x00	; 0
     61c:	80 81       	ld	r24, Z
     61e:	82 60       	ori	r24, 0x02	; 2
     620:	80 83       	st	Z, r24
	 sbi(UCSR0B, TXEN0);
     622:	e1 ec       	ldi	r30, 0xC1	; 193
     624:	f0 e0       	ldi	r31, 0x00	; 0
     626:	80 81       	ld	r24, Z
     628:	88 60       	ori	r24, 0x08	; 8
     62a:	80 83       	st	Z, r24
	 sbi(UCSR0B, TXCIE0);
     62c:	80 81       	ld	r24, Z
     62e:	80 64       	ori	r24, 0x40	; 64
     630:	80 83       	st	Z, r24
	 sbi(UCSR0B, RXEN0); // RX enable
     632:	80 81       	ld	r24, Z
     634:	80 61       	ori	r24, 0x10	; 16
     636:	80 83       	st	Z, r24
 	 sbi(UCSR0B, RXCIE0); // RX complete interrupt enable 
     638:	80 81       	ld	r24, Z
     63a:	80 68       	ori	r24, 0x80	; 128
     63c:	80 83       	st	Z, r24
 }
     63e:	08 95       	ret

00000640 <uart_echo>:
 	} while (ch == 0);
 	if (ch == ETX) return(-1);
 	else return(ch);
 }
 void uart_echo(char ch)
 {
     640:	cf 93       	push	r28
     642:	c8 2f       	mov	r28, r24
 	if (ch == '\n') uart_echo('\r');
     644:	8a 30       	cpi	r24, 0x0A	; 10
     646:	19 f4       	brne	.+6      	; 0x64e <uart_echo+0xe>
     648:	8d e0       	ldi	r24, 0x0D	; 13
     64a:	0e 94 20 03 	call	0x640	; 0x640 <uart_echo>
 	if (!uart_busy) {
     64e:	80 91 ac 04 	lds	r24, 0x04AC
     652:	88 23       	and	r24, r24
     654:	31 f4       	brne	.+12     	; 0x662 <uart_echo+0x22>
 		UDR0 = ch;
     656:	c0 93 c6 00 	sts	0x00C6, r28
 		uart_busy = 1;
     65a:	81 e0       	ldi	r24, 0x01	; 1
     65c:	80 93 ac 04 	sts	0x04AC, r24
     660:	03 c0       	rjmp	.+6      	; 0x668 <uart_echo+0x28>
 	}
 	else
 	qo_insert(ch);
     662:	8c 2f       	mov	r24, r28
     664:	0e 94 8a 02 	call	0x514	; 0x514 <qo_insert>
 }
     668:	cf 91       	pop	r28
     66a:	08 95       	ret

0000066c <__vector_27>:

ISR(USART0_TX_vect)
{
     66c:	1f 92       	push	r1
     66e:	0f 92       	push	r0
     670:	0f b6       	in	r0, 0x3f	; 63
     672:	0f 92       	push	r0
     674:	0b b6       	in	r0, 0x3b	; 59
     676:	0f 92       	push	r0
     678:	11 24       	eor	r1, r1
     67a:	2f 93       	push	r18
     67c:	3f 93       	push	r19
     67e:	4f 93       	push	r20
     680:	5f 93       	push	r21
     682:	6f 93       	push	r22
     684:	7f 93       	push	r23
     686:	8f 93       	push	r24
     688:	9f 93       	push	r25
     68a:	af 93       	push	r26
     68c:	bf 93       	push	r27
     68e:	ef 93       	push	r30
     690:	ff 93       	push	r31
	 char ch;
	 if ((ch = qo_delete()) == 0)
     692:	0e 94 ac 02 	call	0x558	; 0x558 <qo_delete>
     696:	88 23       	and	r24, r24
     698:	19 f4       	brne	.+6      	; 0x6a0 <__vector_27+0x34>
	 	uart_busy = 0;
     69a:	10 92 ac 04 	sts	0x04AC, r1
     69e:	02 c0       	rjmp	.+4      	; 0x6a4 <__vector_27+0x38>
	 else
		UDR0 = ch;
     6a0:	80 93 c6 00 	sts	0x00C6, r24
} 
     6a4:	ff 91       	pop	r31
     6a6:	ef 91       	pop	r30
     6a8:	bf 91       	pop	r27
     6aa:	af 91       	pop	r26
     6ac:	9f 91       	pop	r25
     6ae:	8f 91       	pop	r24
     6b0:	7f 91       	pop	r23
     6b2:	6f 91       	pop	r22
     6b4:	5f 91       	pop	r21
     6b6:	4f 91       	pop	r20
     6b8:	3f 91       	pop	r19
     6ba:	2f 91       	pop	r18
     6bc:	0f 90       	pop	r0
     6be:	0b be       	out	0x3b, r0	; 59
     6c0:	0f 90       	pop	r0
     6c2:	0f be       	out	0x3f, r0	; 63
     6c4:	0f 90       	pop	r0
     6c6:	1f 90       	pop	r1
     6c8:	18 95       	reti

000006ca <__vector_25>:
ISR(USART0_RX_vect)
{
     6ca:	1f 92       	push	r1
     6cc:	0f 92       	push	r0
     6ce:	0f b6       	in	r0, 0x3f	; 63
     6d0:	0f 92       	push	r0
     6d2:	0b b6       	in	r0, 0x3b	; 59
     6d4:	0f 92       	push	r0
     6d6:	11 24       	eor	r1, r1
     6d8:	2f 93       	push	r18
     6da:	3f 93       	push	r19
     6dc:	4f 93       	push	r20
     6de:	5f 93       	push	r21
     6e0:	6f 93       	push	r22
     6e2:	7f 93       	push	r23
     6e4:	8f 93       	push	r24
     6e6:	9f 93       	push	r25
     6e8:	af 93       	push	r26
     6ea:	bf 93       	push	r27
     6ec:	cf 93       	push	r28
     6ee:	ef 93       	push	r30
     6f0:	ff 93       	push	r31
 	char ch;
 	ch = UDR0;
     6f2:	c0 91 c6 00 	lds	r28, 0x00C6
	if (ch != ETX) {
     6f6:	c4 30       	cpi	r28, 0x04	; 4
     6f8:	31 f0       	breq	.+12     	; 0x706 <__vector_25+0x3c>
 		if (ch == '\r')
     6fa:	cd 30       	cpi	r28, 0x0D	; 13
     6fc:	09 f4       	brne	.+2      	; 0x700 <__vector_25+0x36>
 		ch = '\n';
     6fe:	ca e0       	ldi	r28, 0x0A	; 10
 		uart_echo(ch);
     700:	8c 2f       	mov	r24, r28
     702:	0e 94 20 03 	call	0x640	; 0x640 <uart_echo>
 	}

 	qi_insert(ch);
     706:	8c 2f       	mov	r24, r28
     708:	0e 94 4b 02 	call	0x496	; 0x496 <qi_insert>
}
     70c:	ff 91       	pop	r31
     70e:	ef 91       	pop	r30
     710:	cf 91       	pop	r28
     712:	bf 91       	pop	r27
     714:	af 91       	pop	r26
     716:	9f 91       	pop	r25
     718:	8f 91       	pop	r24
     71a:	7f 91       	pop	r23
     71c:	6f 91       	pop	r22
     71e:	5f 91       	pop	r21
     720:	4f 91       	pop	r20
     722:	3f 91       	pop	r19
     724:	2f 91       	pop	r18
     726:	0f 90       	pop	r0
     728:	0b be       	out	0x3b, r0	; 59
     72a:	0f 90       	pop	r0
     72c:	0f be       	out	0x3f, r0	; 63
     72e:	0f 90       	pop	r0
     730:	1f 90       	pop	r1
     732:	18 95       	reti

00000734 <tour_timer>:
		//insert into middle
		pp->link = tp;
		tp->link = cp;
	}
}
void tour_timer(){
     734:	ef 92       	push	r14
     736:	ff 92       	push	r15
     738:	0f 93       	push	r16
     73a:	1f 93       	push	r17
     73c:	cf 93       	push	r28
     73e:	df 93       	push	r29
 	struct timer *cp;
	int    total = 0;
  printf("\n");
     740:	8a e0       	ldi	r24, 0x0A	; 10
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	0e 94 b5 06 	call	0xd6a	; 0xd6a <putchar>
	for (cp = Thead; cp != NULL; cp = cp->link) {
     748:	c0 91 a0 02 	lds	r28, 0x02A0
     74c:	d0 91 a1 02 	lds	r29, 0x02A1
		tp->link = cp;
	}
}
void tour_timer(){
 	struct timer *cp;
	int    total = 0;
     750:	00 e0       	ldi	r16, 0x00	; 0
     752:	10 e0       	ldi	r17, 0x00	; 0
  printf("\n");
	for (cp = Thead; cp != NULL; cp = cp->link) {
		total += cp->time;
		printf("-->%d(%d) ", cp->time, total);
     754:	8c e8       	ldi	r24, 0x8C	; 140
     756:	e8 2e       	mov	r14, r24
     758:	82 e0       	ldi	r24, 0x02	; 2
     75a:	f8 2e       	mov	r15, r24
}
void tour_timer(){
 	struct timer *cp;
	int    total = 0;
  printf("\n");
	for (cp = Thead; cp != NULL; cp = cp->link) {
     75c:	20 c0       	rjmp	.+64     	; 0x79e <tour_timer+0x6a>
		total += cp->time;
     75e:	88 81       	ld	r24, Y
     760:	99 81       	ldd	r25, Y+1	; 0x01
     762:	08 0f       	add	r16, r24
     764:	19 1f       	adc	r17, r25
		printf("-->%d(%d) ", cp->time, total);
     766:	00 d0       	rcall	.+0      	; 0x768 <tour_timer+0x34>
     768:	00 d0       	rcall	.+0      	; 0x76a <tour_timer+0x36>
     76a:	ed b7       	in	r30, 0x3d	; 61
     76c:	fe b7       	in	r31, 0x3e	; 62
     76e:	31 96       	adiw	r30, 0x01	; 1
     770:	ad b7       	in	r26, 0x3d	; 61
     772:	be b7       	in	r27, 0x3e	; 62
     774:	12 96       	adiw	r26, 0x02	; 2
     776:	fc 92       	st	X, r15
     778:	ee 92       	st	-X, r14
     77a:	11 97       	sbiw	r26, 0x01	; 1
     77c:	93 83       	std	Z+3, r25	; 0x03
     77e:	82 83       	std	Z+2, r24	; 0x02
     780:	15 83       	std	Z+5, r17	; 0x05
     782:	04 83       	std	Z+4, r16	; 0x04
     784:	0e 94 a3 06 	call	0xd46	; 0xd46 <printf>
}
void tour_timer(){
 	struct timer *cp;
	int    total = 0;
  printf("\n");
	for (cp = Thead; cp != NULL; cp = cp->link) {
     788:	0c 84       	ldd	r0, Y+12	; 0x0c
     78a:	dd 85       	ldd	r29, Y+13	; 0x0d
     78c:	c0 2d       	mov	r28, r0
     78e:	8d b7       	in	r24, 0x3d	; 61
     790:	9e b7       	in	r25, 0x3e	; 62
     792:	06 96       	adiw	r24, 0x06	; 6
     794:	0f b6       	in	r0, 0x3f	; 63
     796:	f8 94       	cli
     798:	9e bf       	out	0x3e, r25	; 62
     79a:	0f be       	out	0x3f, r0	; 63
     79c:	8d bf       	out	0x3d, r24	; 61
     79e:	20 97       	sbiw	r28, 0x00	; 0
     7a0:	f1 f6       	brne	.-68     	; 0x75e <tour_timer+0x2a>
		total += cp->time;
		printf("-->%d(%d) ", cp->time, total);
	}
	printf("\n");
     7a2:	8a e0       	ldi	r24, 0x0A	; 10
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	0e 94 b5 06 	call	0xd6a	; 0xd6a <putchar>
}
     7aa:	df 91       	pop	r29
     7ac:	cf 91       	pop	r28
     7ae:	1f 91       	pop	r17
     7b0:	0f 91       	pop	r16
     7b2:	ff 90       	pop	r15
     7b4:	ef 90       	pop	r14
     7b6:	08 95       	ret

000007b8 <free_timer>:
void free_timer(){
 	struct timer *cp;
 	for ( ;Thead != NULL; ){
     7b8:	09 c0       	rjmp	.+18     	; 0x7cc <free_timer+0x14>
		cp = Thead;
		Thead = cp->link;
     7ba:	fc 01       	movw	r30, r24
     7bc:	24 85       	ldd	r18, Z+12	; 0x0c
     7be:	35 85       	ldd	r19, Z+13	; 0x0d
     7c0:	30 93 a1 02 	sts	0x02A1, r19
     7c4:	20 93 a0 02 	sts	0x02A0, r18
		free(cp);
     7c8:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <free>
	}
	printf("\n");
}
void free_timer(){
 	struct timer *cp;
 	for ( ;Thead != NULL; ){
     7cc:	80 91 a0 02 	lds	r24, 0x02A0
     7d0:	90 91 a1 02 	lds	r25, 0x02A1
     7d4:	00 97       	sbiw	r24, 0x00	; 0
     7d6:	89 f7       	brne	.-30     	; 0x7ba <free_timer+0x2>
		cp = Thead;
		Thead = cp->link;
		free(cp);
	}
}
     7d8:	08 95       	ret

000007da <get_timer>:
struct timer *get_timer()
{
	struct timer *tp;
  tp = (struct timer *)malloc(sizeof(*tp));
     7da:	8e e0       	ldi	r24, 0x0E	; 14
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	0e 94 e5 04 	call	0x9ca	; 0x9ca <malloc>
	return(tp);
}
     7e2:	08 95       	ret

000007e4 <insert_timer>:
#include <stdio.h>
#include <stdlib.h>
#include "timer.h"
struct timer *Thead = NULL;
void insert_timer(struct task *tskp, int ms){
     7e4:	ef 92       	push	r14
     7e6:	ff 92       	push	r15
     7e8:	0f 93       	push	r16
     7ea:	1f 93       	push	r17
     7ec:	cf 93       	push	r28
     7ee:	df 93       	push	r29
     7f0:	f8 2e       	mov	r15, r24
     7f2:	e9 2e       	mov	r14, r25
     7f4:	8b 01       	movw	r16, r22
	int total;
	struct timer *tp, *cp, *pp;
	//get a new node
	tp = get_timer();
     7f6:	0e 94 ed 03 	call	0x7da	; 0x7da <get_timer>
     7fa:	ec 01       	movw	r28, r24
	tp->task = *tskp;
     7fc:	dc 01       	movw	r26, r24
     7fe:	12 96       	adiw	r26, 0x02	; 2
     800:	ef 2d       	mov	r30, r15
     802:	fe 2d       	mov	r31, r14
     804:	8a e0       	ldi	r24, 0x0A	; 10
     806:	01 90       	ld	r0, Z+
     808:	0d 92       	st	X+, r0
     80a:	81 50       	subi	r24, 0x01	; 1
     80c:	e1 f7       	brne	.-8      	; 0x806 <insert_timer+0x22>
	tp->time = ms;
     80e:	19 83       	std	Y+1, r17	; 0x01
     810:	08 83       	st	Y, r16

	//insert into empty timer list
  if (Thead == NULL) {
     812:	e0 91 a0 02 	lds	r30, 0x02A0
     816:	f0 91 a1 02 	lds	r31, 0x02A1
     81a:	30 97       	sbiw	r30, 0x00	; 0
     81c:	29 f4       	brne	.+10     	; 0x828 <insert_timer+0x44>
		Thead = tp;
     81e:	d0 93 a1 02 	sts	0x02A1, r29
     822:	c0 93 a0 02 	sts	0x02A0, r28
     826:	2f c0       	rjmp	.+94     	; 0x886 <insert_timer+0xa2>
	tp = get_timer();
	tp->task = *tskp;
	tp->time = ms;

	//insert into empty timer list
  if (Thead == NULL) {
     828:	40 e0       	ldi	r20, 0x00	; 0
     82a:	50 e0       	ldi	r21, 0x00	; 0
     82c:	20 e0       	ldi	r18, 0x00	; 0
     82e:	30 e0       	ldi	r19, 0x00	; 0
     830:	01 c0       	rjmp	.+2      	; 0x834 <insert_timer+0x50>
	}

	pp = NULL;
	total = 0;
	//loop while cp is not null
	for (cp = Thead; cp; cp = cp->link) {
     832:	fd 01       	movw	r30, r26
			total += cp->time;
     834:	80 81       	ld	r24, Z
     836:	91 81       	ldd	r25, Z+1	; 0x01
     838:	28 0f       	add	r18, r24
     83a:	39 1f       	adc	r19, r25
			//if total is bigger than ms then pp point to right before cp
			if (total >= ms)
     83c:	20 17       	cp	r18, r16
     83e:	31 07       	cpc	r19, r17
     840:	34 f4       	brge	.+12     	; 0x84e <insert_timer+0x6a>
	}

	pp = NULL;
	total = 0;
	//loop while cp is not null
	for (cp = Thead; cp; cp = cp->link) {
     842:	a4 85       	ldd	r26, Z+12	; 0x0c
     844:	b5 85       	ldd	r27, Z+13	; 0x0d
     846:	af 01       	movw	r20, r30
     848:	10 97       	sbiw	r26, 0x00	; 0
     84a:	99 f7       	brne	.-26     	; 0x832 <insert_timer+0x4e>
     84c:	01 c0       	rjmp	.+2      	; 0x850 <insert_timer+0x6c>
			total += cp->time;
			//if total is bigger than ms then pp point to right before cp
			if (total >= ms)
     84e:	df 01       	movw	r26, r30
			//break at cp
				break;
      pp = cp;
  }
	//insert into head. second node time is subtracted by insertion node time
  if (pp == NULL) {
     850:	41 15       	cp	r20, r1
     852:	51 05       	cpc	r21, r1
     854:	79 f4       	brne	.+30     	; 0x874 <insert_timer+0x90>
		cp->time -= tp->time;
     856:	8d 91       	ld	r24, X+
     858:	9c 91       	ld	r25, X
     85a:	11 97       	sbiw	r26, 0x01	; 1
     85c:	80 1b       	sub	r24, r16
     85e:	91 0b       	sbc	r25, r17
     860:	11 96       	adiw	r26, 0x01	; 1
     862:	9c 93       	st	X, r25
     864:	8e 93       	st	-X, r24
		tp->link = cp;
     866:	bd 87       	std	Y+13, r27	; 0x0d
     868:	ac 87       	std	Y+12, r26	; 0x0c
	 	Thead = tp;
     86a:	d0 93 a1 02 	sts	0x02A1, r29
     86e:	c0 93 a0 02 	sts	0x02A0, r28
     872:	24 c0       	rjmp	.+72     	; 0x8bc <insert_timer+0xd8>
	}
	//insert into tail. last one is subtracted by total
	else if (cp == NULL) {
     874:	10 97       	sbiw	r26, 0x00	; 0
     876:	51 f4       	brne	.+20     	; 0x88c <insert_timer+0xa8>
		tp->time -= total; // pp->time
     878:	02 1b       	sub	r16, r18
     87a:	13 0b       	sbc	r17, r19
     87c:	19 83       	std	Y+1, r17	; 0x01
     87e:	08 83       	st	Y, r16
		pp->link = tp;
     880:	fa 01       	movw	r30, r20
     882:	d5 87       	std	Z+13, r29	; 0x0d
     884:	c4 87       	std	Z+12, r28	; 0x0c
		tp->link = NULL;
     886:	1d 86       	std	Y+13, r1	; 0x0d
     888:	1c 86       	std	Y+12, r1	; 0x0c
     88a:	18 c0       	rjmp	.+48     	; 0x8bc <insert_timer+0xd8>
	}
	//insert into some where in the middle of list
	else {
		//re evaluate total time before cp
		total -= cp->time;
     88c:	8d 91       	ld	r24, X+
     88e:	9c 91       	ld	r25, X
     890:	11 97       	sbiw	r26, 0x01	; 1
     892:	b9 01       	movw	r22, r18
     894:	68 1b       	sub	r22, r24
     896:	79 0b       	sbc	r23, r25
		//re calculate time of insertion and followed nodes
		tp->time -= total;
     898:	98 01       	movw	r18, r16
     89a:	26 1b       	sub	r18, r22
     89c:	37 0b       	sbc	r19, r23
     89e:	39 83       	std	Y+1, r19	; 0x01
     8a0:	28 83       	st	Y, r18
		cp->time -= tp->time;
     8a2:	8d 91       	ld	r24, X+
     8a4:	9c 91       	ld	r25, X
     8a6:	11 97       	sbiw	r26, 0x01	; 1
     8a8:	82 1b       	sub	r24, r18
     8aa:	93 0b       	sbc	r25, r19
     8ac:	11 96       	adiw	r26, 0x01	; 1
     8ae:	9c 93       	st	X, r25
     8b0:	8e 93       	st	-X, r24
		//insert into middle
		pp->link = tp;
     8b2:	fa 01       	movw	r30, r20
     8b4:	d5 87       	std	Z+13, r29	; 0x0d
     8b6:	c4 87       	std	Z+12, r28	; 0x0c
		tp->link = cp;
     8b8:	bd 87       	std	Y+13, r27	; 0x0d
     8ba:	ac 87       	std	Y+12, r26	; 0x0c
	}
}
     8bc:	df 91       	pop	r29
     8be:	cf 91       	pop	r28
     8c0:	1f 91       	pop	r17
     8c2:	0f 91       	pop	r16
     8c4:	ff 90       	pop	r15
     8c6:	ef 90       	pop	r14
     8c8:	08 95       	ret

000008ca <main>:
#include "queue.h"
#include "app.h"
#include "list.h"
#include "timer.h"
int main()
{
     8ca:	cf 93       	push	r28
     8cc:	df 93       	push	r29
     8ce:	cd b7       	in	r28, 0x3d	; 61
     8d0:	de b7       	in	r29, 0x3e	; 62
     8d2:	c0 58       	subi	r28, 0x80	; 128
     8d4:	d0 40       	sbci	r29, 0x00	; 0
     8d6:	0f b6       	in	r0, 0x3f	; 63
     8d8:	f8 94       	cli
     8da:	de bf       	out	0x3e, r29	; 62
     8dc:	0f be       	out	0x3f, r0	; 63
     8de:	cd bf       	out	0x3d, r28	; 61
 	char cmd[128], *cp, *ap;

	uart_init();
     8e0:	0e 94 f7 02 	call	0x5ee	; 0x5ee <uart_init>
	sei();
     8e4:	78 94       	sei
	while(1) {
		printf("$");
     8e6:	84 e2       	ldi	r24, 0x24	; 36
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	0e 94 b5 06 	call	0xd6a	; 0xd6a <putchar>
		if (fgets(cmd, sizeof(cmd), stdin) == NULL)
     8ee:	40 91 b1 04 	lds	r20, 0x04B1
     8f2:	50 91 b2 04 	lds	r21, 0x04B2
     8f6:	ce 01       	movw	r24, r28
     8f8:	01 96       	adiw	r24, 0x01	; 1
     8fa:	60 e8       	ldi	r22, 0x80	; 128
     8fc:	70 e0       	ldi	r23, 0x00	; 0
     8fe:	0e 94 6f 06 	call	0xcde	; 0xcde <fgets>
     902:	00 97       	sbiw	r24, 0x00	; 0
     904:	b1 f1       	breq	.+108    	; 0x972 <main+0xa8>
 		 break;
		if ((cp = strtok(cmd, "\n\r\t ")) == NULL)
     906:	ce 01       	movw	r24, r28
     908:	01 96       	adiw	r24, 0x01	; 1
     90a:	62 e3       	ldi	r22, 0x32	; 50
     90c:	72 e0       	ldi	r23, 0x02	; 2
     90e:	0e 94 32 06 	call	0xc64	; 0xc64 <strtok>
     912:	8c 01       	movw	r16, r24
     914:	00 97       	sbiw	r24, 0x00	; 0
     916:	39 f3       	breq	.-50     	; 0x8e6 <main+0x1c>
      continue;
    //cp is comand, ap is argument
 		ap = strtok(NULL, "\n\r\t ");
     918:	80 e0       	ldi	r24, 0x00	; 0
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	62 e3       	ldi	r22, 0x32	; 50
     91e:	72 e0       	ldi	r23, 0x02	; 2
     920:	0e 94 32 06 	call	0xc64	; 0xc64 <strtok>
     924:	7c 01       	movw	r14, r24
    //$prime 100
 		if (!strcmp(cp, "prime"))
     926:	c8 01       	movw	r24, r16
     928:	67 e3       	ldi	r22, 0x37	; 55
     92a:	72 e0       	ldi	r23, 0x02	; 2
     92c:	0e 94 37 06 	call	0xc6e	; 0xc6e <strcmp>
     930:	00 97       	sbiw	r24, 0x00	; 0
     932:	21 f4       	brne	.+8      	; 0x93c <main+0x72>
      app_prime(ap);
     934:	c7 01       	movw	r24, r14
     936:	0e 94 b4 00 	call	0x168	; 0x168 <app_prime>
     93a:	d5 cf       	rjmp	.-86     	; 0x8e6 <main+0x1c>
    //$list h 50
 		else if (!strcmp(cp, "list"))
     93c:	c8 01       	movw	r24, r16
     93e:	6d e3       	ldi	r22, 0x3D	; 61
     940:	72 e0       	ldi	r23, 0x02	; 2
     942:	0e 94 37 06 	call	0xc6e	; 0xc6e <strcmp>
     946:	00 97       	sbiw	r24, 0x00	; 0
     948:	21 f4       	brne	.+8      	; 0x952 <main+0x88>
      app_list(ap);
     94a:	c7 01       	movw	r24, r14
     94c:	0e 94 01 01 	call	0x202	; 0x202 <app_list>
     950:	ca cf       	rjmp	.-108    	; 0x8e6 <main+0x1c>
    //$timer
		else if (!strcmp(cp, "timer"))
     952:	c8 01       	movw	r24, r16
     954:	62 e4       	ldi	r22, 0x42	; 66
     956:	72 e0       	ldi	r23, 0x02	; 2
     958:	0e 94 37 06 	call	0xc6e	; 0xc6e <strcmp>
     95c:	00 97       	sbiw	r24, 0x00	; 0
     95e:	21 f4       	brne	.+8      	; 0x968 <main+0x9e>
      app_timer(ap);
     960:	c7 01       	movw	r24, r14
     962:	0e 94 52 01 	call	0x2a4	; 0x2a4 <app_timer>
     966:	bf cf       	rjmp	.-130    	; 0x8e6 <main+0x1c>
		else
      printf("Unknown command...\n");
     968:	88 e4       	ldi	r24, 0x48	; 72
     96a:	92 e0       	ldi	r25, 0x02	; 2
     96c:	0e 94 bc 06 	call	0xd78	; 0xd78 <puts>
     970:	ba cf       	rjmp	.-140    	; 0x8e6 <main+0x1c>
	}
	printf("logout, good bye !!!\n");
     972:	8b e5       	ldi	r24, 0x5B	; 91
     974:	92 e0       	ldi	r25, 0x02	; 2
     976:	0e 94 bc 06 	call	0xd78	; 0xd78 <puts>
     97a:	ff cf       	rjmp	.-2      	; 0x97a <main+0xb0>

0000097c <__divmodhi4>:
     97c:	97 fb       	bst	r25, 7
     97e:	09 2e       	mov	r0, r25
     980:	07 26       	eor	r0, r23
     982:	0a d0       	rcall	.+20     	; 0x998 <__divmodhi4_neg1>
     984:	77 fd       	sbrc	r23, 7
     986:	04 d0       	rcall	.+8      	; 0x990 <__divmodhi4_neg2>
     988:	0c d0       	rcall	.+24     	; 0x9a2 <__udivmodhi4>
     98a:	06 d0       	rcall	.+12     	; 0x998 <__divmodhi4_neg1>
     98c:	00 20       	and	r0, r0
     98e:	1a f4       	brpl	.+6      	; 0x996 <__divmodhi4_exit>

00000990 <__divmodhi4_neg2>:
     990:	70 95       	com	r23
     992:	61 95       	neg	r22
     994:	7f 4f       	sbci	r23, 0xFF	; 255

00000996 <__divmodhi4_exit>:
     996:	08 95       	ret

00000998 <__divmodhi4_neg1>:
     998:	f6 f7       	brtc	.-4      	; 0x996 <__divmodhi4_exit>
     99a:	90 95       	com	r25
     99c:	81 95       	neg	r24
     99e:	9f 4f       	sbci	r25, 0xFF	; 255
     9a0:	08 95       	ret

000009a2 <__udivmodhi4>:
     9a2:	aa 1b       	sub	r26, r26
     9a4:	bb 1b       	sub	r27, r27
     9a6:	51 e1       	ldi	r21, 0x11	; 17
     9a8:	07 c0       	rjmp	.+14     	; 0x9b8 <__udivmodhi4_ep>

000009aa <__udivmodhi4_loop>:
     9aa:	aa 1f       	adc	r26, r26
     9ac:	bb 1f       	adc	r27, r27
     9ae:	a6 17       	cp	r26, r22
     9b0:	b7 07       	cpc	r27, r23
     9b2:	10 f0       	brcs	.+4      	; 0x9b8 <__udivmodhi4_ep>
     9b4:	a6 1b       	sub	r26, r22
     9b6:	b7 0b       	sbc	r27, r23

000009b8 <__udivmodhi4_ep>:
     9b8:	88 1f       	adc	r24, r24
     9ba:	99 1f       	adc	r25, r25
     9bc:	5a 95       	dec	r21
     9be:	a9 f7       	brne	.-22     	; 0x9aa <__udivmodhi4_loop>
     9c0:	80 95       	com	r24
     9c2:	90 95       	com	r25
     9c4:	bc 01       	movw	r22, r24
     9c6:	cd 01       	movw	r24, r26
     9c8:	08 95       	ret

000009ca <malloc>:
     9ca:	cf 93       	push	r28
     9cc:	df 93       	push	r29
     9ce:	ac 01       	movw	r20, r24
     9d0:	82 30       	cpi	r24, 0x02	; 2
     9d2:	91 05       	cpc	r25, r1
     9d4:	10 f4       	brcc	.+4      	; 0x9da <malloc+0x10>
     9d6:	42 e0       	ldi	r20, 0x02	; 2
     9d8:	50 e0       	ldi	r21, 0x00	; 0
     9da:	e0 91 af 04 	lds	r30, 0x04AF
     9de:	f0 91 b0 04 	lds	r31, 0x04B0
     9e2:	20 e0       	ldi	r18, 0x00	; 0
     9e4:	30 e0       	ldi	r19, 0x00	; 0
     9e6:	a0 e0       	ldi	r26, 0x00	; 0
     9e8:	b0 e0       	ldi	r27, 0x00	; 0
     9ea:	24 c0       	rjmp	.+72     	; 0xa34 <malloc+0x6a>
     9ec:	80 81       	ld	r24, Z
     9ee:	91 81       	ldd	r25, Z+1	; 0x01
     9f0:	84 17       	cp	r24, r20
     9f2:	95 07       	cpc	r25, r21
     9f4:	d0 f0       	brcs	.+52     	; 0xa2a <malloc+0x60>
     9f6:	84 17       	cp	r24, r20
     9f8:	95 07       	cpc	r25, r21
     9fa:	71 f4       	brne	.+28     	; 0xa18 <malloc+0x4e>
     9fc:	82 81       	ldd	r24, Z+2	; 0x02
     9fe:	93 81       	ldd	r25, Z+3	; 0x03
     a00:	10 97       	sbiw	r26, 0x00	; 0
     a02:	29 f0       	breq	.+10     	; 0xa0e <malloc+0x44>
     a04:	13 96       	adiw	r26, 0x03	; 3
     a06:	9c 93       	st	X, r25
     a08:	8e 93       	st	-X, r24
     a0a:	12 97       	sbiw	r26, 0x02	; 2
     a0c:	2c c0       	rjmp	.+88     	; 0xa66 <malloc+0x9c>
     a0e:	90 93 b0 04 	sts	0x04B0, r25
     a12:	80 93 af 04 	sts	0x04AF, r24
     a16:	27 c0       	rjmp	.+78     	; 0xa66 <malloc+0x9c>
     a18:	21 15       	cp	r18, r1
     a1a:	31 05       	cpc	r19, r1
     a1c:	19 f0       	breq	.+6      	; 0xa24 <malloc+0x5a>
     a1e:	82 17       	cp	r24, r18
     a20:	93 07       	cpc	r25, r19
     a22:	18 f4       	brcc	.+6      	; 0xa2a <malloc+0x60>
     a24:	9c 01       	movw	r18, r24
     a26:	bd 01       	movw	r22, r26
     a28:	ef 01       	movw	r28, r30
     a2a:	92 81       	ldd	r25, Z+2	; 0x02
     a2c:	83 81       	ldd	r24, Z+3	; 0x03
     a2e:	df 01       	movw	r26, r30
     a30:	e9 2f       	mov	r30, r25
     a32:	f8 2f       	mov	r31, r24
     a34:	30 97       	sbiw	r30, 0x00	; 0
     a36:	d1 f6       	brne	.-76     	; 0x9ec <malloc+0x22>
     a38:	21 15       	cp	r18, r1
     a3a:	31 05       	cpc	r19, r1
     a3c:	f9 f0       	breq	.+62     	; 0xa7c <malloc+0xb2>
     a3e:	c9 01       	movw	r24, r18
     a40:	84 1b       	sub	r24, r20
     a42:	95 0b       	sbc	r25, r21
     a44:	84 30       	cpi	r24, 0x04	; 4
     a46:	91 05       	cpc	r25, r1
     a48:	80 f4       	brcc	.+32     	; 0xa6a <malloc+0xa0>
     a4a:	8a 81       	ldd	r24, Y+2	; 0x02
     a4c:	9b 81       	ldd	r25, Y+3	; 0x03
     a4e:	61 15       	cp	r22, r1
     a50:	71 05       	cpc	r23, r1
     a52:	21 f0       	breq	.+8      	; 0xa5c <malloc+0x92>
     a54:	fb 01       	movw	r30, r22
     a56:	93 83       	std	Z+3, r25	; 0x03
     a58:	82 83       	std	Z+2, r24	; 0x02
     a5a:	04 c0       	rjmp	.+8      	; 0xa64 <malloc+0x9a>
     a5c:	90 93 b0 04 	sts	0x04B0, r25
     a60:	80 93 af 04 	sts	0x04AF, r24
     a64:	fe 01       	movw	r30, r28
     a66:	32 96       	adiw	r30, 0x02	; 2
     a68:	42 c0       	rjmp	.+132    	; 0xaee <malloc+0x124>
     a6a:	fe 01       	movw	r30, r28
     a6c:	e8 0f       	add	r30, r24
     a6e:	f9 1f       	adc	r31, r25
     a70:	41 93       	st	Z+, r20
     a72:	51 93       	st	Z+, r21
     a74:	02 97       	sbiw	r24, 0x02	; 2
     a76:	99 83       	std	Y+1, r25	; 0x01
     a78:	88 83       	st	Y, r24
     a7a:	39 c0       	rjmp	.+114    	; 0xaee <malloc+0x124>
     a7c:	80 91 ad 04 	lds	r24, 0x04AD
     a80:	90 91 ae 04 	lds	r25, 0x04AE
     a84:	00 97       	sbiw	r24, 0x00	; 0
     a86:	41 f4       	brne	.+16     	; 0xa98 <malloc+0xce>
     a88:	80 91 99 02 	lds	r24, 0x0299
     a8c:	90 91 9a 02 	lds	r25, 0x029A
     a90:	90 93 ae 04 	sts	0x04AE, r25
     a94:	80 93 ad 04 	sts	0x04AD, r24
     a98:	20 91 97 02 	lds	r18, 0x0297
     a9c:	30 91 98 02 	lds	r19, 0x0298
     aa0:	21 15       	cp	r18, r1
     aa2:	31 05       	cpc	r19, r1
     aa4:	41 f4       	brne	.+16     	; 0xab6 <malloc+0xec>
     aa6:	2d b7       	in	r18, 0x3d	; 61
     aa8:	3e b7       	in	r19, 0x3e	; 62
     aaa:	80 91 9b 02 	lds	r24, 0x029B
     aae:	90 91 9c 02 	lds	r25, 0x029C
     ab2:	28 1b       	sub	r18, r24
     ab4:	39 0b       	sbc	r19, r25
     ab6:	e0 91 ad 04 	lds	r30, 0x04AD
     aba:	f0 91 ae 04 	lds	r31, 0x04AE
     abe:	e2 17       	cp	r30, r18
     ac0:	f3 07       	cpc	r31, r19
     ac2:	98 f4       	brcc	.+38     	; 0xaea <malloc+0x120>
     ac4:	2e 1b       	sub	r18, r30
     ac6:	3f 0b       	sbc	r19, r31
     ac8:	24 17       	cp	r18, r20
     aca:	35 07       	cpc	r19, r21
     acc:	70 f0       	brcs	.+28     	; 0xaea <malloc+0x120>
     ace:	ca 01       	movw	r24, r20
     ad0:	02 96       	adiw	r24, 0x02	; 2
     ad2:	28 17       	cp	r18, r24
     ad4:	39 07       	cpc	r19, r25
     ad6:	48 f0       	brcs	.+18     	; 0xaea <malloc+0x120>
     ad8:	8e 0f       	add	r24, r30
     ada:	9f 1f       	adc	r25, r31
     adc:	90 93 ae 04 	sts	0x04AE, r25
     ae0:	80 93 ad 04 	sts	0x04AD, r24
     ae4:	41 93       	st	Z+, r20
     ae6:	51 93       	st	Z+, r21
     ae8:	02 c0       	rjmp	.+4      	; 0xaee <malloc+0x124>
     aea:	e0 e0       	ldi	r30, 0x00	; 0
     aec:	f0 e0       	ldi	r31, 0x00	; 0
     aee:	cf 01       	movw	r24, r30
     af0:	df 91       	pop	r29
     af2:	cf 91       	pop	r28
     af4:	08 95       	ret

00000af6 <free>:
     af6:	0f 93       	push	r16
     af8:	1f 93       	push	r17
     afa:	cf 93       	push	r28
     afc:	df 93       	push	r29
     afe:	9c 01       	movw	r18, r24
     b00:	00 97       	sbiw	r24, 0x00	; 0
     b02:	09 f4       	brne	.+2      	; 0xb06 <free+0x10>
     b04:	8c c0       	rjmp	.+280    	; 0xc1e <free+0x128>
     b06:	dc 01       	movw	r26, r24
     b08:	12 97       	sbiw	r26, 0x02	; 2
     b0a:	13 96       	adiw	r26, 0x03	; 3
     b0c:	1c 92       	st	X, r1
     b0e:	1e 92       	st	-X, r1
     b10:	12 97       	sbiw	r26, 0x02	; 2
     b12:	60 91 af 04 	lds	r22, 0x04AF
     b16:	70 91 b0 04 	lds	r23, 0x04B0
     b1a:	61 15       	cp	r22, r1
     b1c:	71 05       	cpc	r23, r1
     b1e:	89 f4       	brne	.+34     	; 0xb42 <free+0x4c>
     b20:	8d 91       	ld	r24, X+
     b22:	9c 91       	ld	r25, X
     b24:	11 97       	sbiw	r26, 0x01	; 1
     b26:	82 0f       	add	r24, r18
     b28:	93 1f       	adc	r25, r19
     b2a:	20 91 ad 04 	lds	r18, 0x04AD
     b2e:	30 91 ae 04 	lds	r19, 0x04AE
     b32:	28 17       	cp	r18, r24
     b34:	39 07       	cpc	r19, r25
     b36:	69 f5       	brne	.+90     	; 0xb92 <free+0x9c>
     b38:	b0 93 ae 04 	sts	0x04AE, r27
     b3c:	a0 93 ad 04 	sts	0x04AD, r26
     b40:	6e c0       	rjmp	.+220    	; 0xc1e <free+0x128>
     b42:	fb 01       	movw	r30, r22
     b44:	40 e0       	ldi	r20, 0x00	; 0
     b46:	50 e0       	ldi	r21, 0x00	; 0
     b48:	01 c0       	rjmp	.+2      	; 0xb4c <free+0x56>
     b4a:	fc 01       	movw	r30, r24
     b4c:	ea 17       	cp	r30, r26
     b4e:	fb 07       	cpc	r31, r27
     b50:	30 f4       	brcc	.+12     	; 0xb5e <free+0x68>
     b52:	82 81       	ldd	r24, Z+2	; 0x02
     b54:	93 81       	ldd	r25, Z+3	; 0x03
     b56:	af 01       	movw	r20, r30
     b58:	00 97       	sbiw	r24, 0x00	; 0
     b5a:	b9 f7       	brne	.-18     	; 0xb4a <free+0x54>
     b5c:	1f c0       	rjmp	.+62     	; 0xb9c <free+0xa6>
     b5e:	e9 01       	movw	r28, r18
     b60:	22 97       	sbiw	r28, 0x02	; 2
     b62:	fb 83       	std	Y+3, r31	; 0x03
     b64:	ea 83       	std	Y+2, r30	; 0x02
     b66:	08 81       	ld	r16, Y
     b68:	19 81       	ldd	r17, Y+1	; 0x01
     b6a:	c9 01       	movw	r24, r18
     b6c:	80 0f       	add	r24, r16
     b6e:	91 1f       	adc	r25, r17
     b70:	8e 17       	cp	r24, r30
     b72:	9f 07       	cpc	r25, r31
     b74:	59 f4       	brne	.+22     	; 0xb8c <free+0x96>
     b76:	80 81       	ld	r24, Z
     b78:	91 81       	ldd	r25, Z+1	; 0x01
     b7a:	80 0f       	add	r24, r16
     b7c:	91 1f       	adc	r25, r17
     b7e:	02 96       	adiw	r24, 0x02	; 2
     b80:	99 83       	std	Y+1, r25	; 0x01
     b82:	88 83       	st	Y, r24
     b84:	82 81       	ldd	r24, Z+2	; 0x02
     b86:	93 81       	ldd	r25, Z+3	; 0x03
     b88:	9b 83       	std	Y+3, r25	; 0x03
     b8a:	8a 83       	std	Y+2, r24	; 0x02
     b8c:	41 15       	cp	r20, r1
     b8e:	51 05       	cpc	r21, r1
     b90:	29 f4       	brne	.+10     	; 0xb9c <free+0xa6>
     b92:	b0 93 b0 04 	sts	0x04B0, r27
     b96:	a0 93 af 04 	sts	0x04AF, r26
     b9a:	41 c0       	rjmp	.+130    	; 0xc1e <free+0x128>
     b9c:	fa 01       	movw	r30, r20
     b9e:	b3 83       	std	Z+3, r27	; 0x03
     ba0:	a2 83       	std	Z+2, r26	; 0x02
     ba2:	c1 91       	ld	r28, Z+
     ba4:	d1 91       	ld	r29, Z+
     ba6:	ec 0f       	add	r30, r28
     ba8:	fd 1f       	adc	r31, r29
     baa:	ae 17       	cp	r26, r30
     bac:	bf 07       	cpc	r27, r31
     bae:	81 f4       	brne	.+32     	; 0xbd0 <free+0xda>
     bb0:	f9 01       	movw	r30, r18
     bb2:	92 91       	ld	r25, -Z
     bb4:	82 91       	ld	r24, -Z
     bb6:	8c 0f       	add	r24, r28
     bb8:	9d 1f       	adc	r25, r29
     bba:	02 96       	adiw	r24, 0x02	; 2
     bbc:	da 01       	movw	r26, r20
     bbe:	11 96       	adiw	r26, 0x01	; 1
     bc0:	9c 93       	st	X, r25
     bc2:	8e 93       	st	-X, r24
     bc4:	82 81       	ldd	r24, Z+2	; 0x02
     bc6:	93 81       	ldd	r25, Z+3	; 0x03
     bc8:	13 96       	adiw	r26, 0x03	; 3
     bca:	9c 93       	st	X, r25
     bcc:	8e 93       	st	-X, r24
     bce:	12 97       	sbiw	r26, 0x02	; 2
     bd0:	e0 e0       	ldi	r30, 0x00	; 0
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	02 c0       	rjmp	.+4      	; 0xbda <free+0xe4>
     bd6:	fb 01       	movw	r30, r22
     bd8:	bc 01       	movw	r22, r24
     bda:	db 01       	movw	r26, r22
     bdc:	12 96       	adiw	r26, 0x02	; 2
     bde:	8d 91       	ld	r24, X+
     be0:	9c 91       	ld	r25, X
     be2:	13 97       	sbiw	r26, 0x03	; 3
     be4:	00 97       	sbiw	r24, 0x00	; 0
     be6:	b9 f7       	brne	.-18     	; 0xbd6 <free+0xe0>
     be8:	cb 01       	movw	r24, r22
     bea:	02 96       	adiw	r24, 0x02	; 2
     bec:	2d 91       	ld	r18, X+
     bee:	3c 91       	ld	r19, X
     bf0:	11 97       	sbiw	r26, 0x01	; 1
     bf2:	82 0f       	add	r24, r18
     bf4:	93 1f       	adc	r25, r19
     bf6:	20 91 ad 04 	lds	r18, 0x04AD
     bfa:	30 91 ae 04 	lds	r19, 0x04AE
     bfe:	28 17       	cp	r18, r24
     c00:	39 07       	cpc	r19, r25
     c02:	69 f4       	brne	.+26     	; 0xc1e <free+0x128>
     c04:	30 97       	sbiw	r30, 0x00	; 0
     c06:	29 f4       	brne	.+10     	; 0xc12 <free+0x11c>
     c08:	10 92 b0 04 	sts	0x04B0, r1
     c0c:	10 92 af 04 	sts	0x04AF, r1
     c10:	02 c0       	rjmp	.+4      	; 0xc16 <free+0x120>
     c12:	13 82       	std	Z+3, r1	; 0x03
     c14:	12 82       	std	Z+2, r1	; 0x02
     c16:	70 93 ae 04 	sts	0x04AE, r23
     c1a:	60 93 ad 04 	sts	0x04AD, r22
     c1e:	df 91       	pop	r29
     c20:	cf 91       	pop	r28
     c22:	1f 91       	pop	r17
     c24:	0f 91       	pop	r16
     c26:	08 95       	ret

00000c28 <atoi>:
     c28:	fc 01       	movw	r30, r24
     c2a:	88 27       	eor	r24, r24
     c2c:	99 27       	eor	r25, r25
     c2e:	e8 94       	clt
     c30:	21 91       	ld	r18, Z+
     c32:	20 32       	cpi	r18, 0x20	; 32
     c34:	e9 f3       	breq	.-6      	; 0xc30 <atoi+0x8>
     c36:	29 30       	cpi	r18, 0x09	; 9
     c38:	10 f0       	brcs	.+4      	; 0xc3e <atoi+0x16>
     c3a:	2e 30       	cpi	r18, 0x0E	; 14
     c3c:	c8 f3       	brcs	.-14     	; 0xc30 <atoi+0x8>
     c3e:	2b 32       	cpi	r18, 0x2B	; 43
     c40:	41 f0       	breq	.+16     	; 0xc52 <atoi+0x2a>
     c42:	2d 32       	cpi	r18, 0x2D	; 45
     c44:	39 f4       	brne	.+14     	; 0xc54 <atoi+0x2c>
     c46:	68 94       	set
     c48:	04 c0       	rjmp	.+8      	; 0xc52 <atoi+0x2a>
     c4a:	0e 94 67 06 	call	0xcce	; 0xcce <__mulhi_const_10>
     c4e:	82 0f       	add	r24, r18
     c50:	91 1d       	adc	r25, r1
     c52:	21 91       	ld	r18, Z+
     c54:	20 53       	subi	r18, 0x30	; 48
     c56:	2a 30       	cpi	r18, 0x0A	; 10
     c58:	c0 f3       	brcs	.-16     	; 0xc4a <atoi+0x22>
     c5a:	1e f4       	brtc	.+6      	; 0xc62 <atoi+0x3a>
     c5c:	90 95       	com	r25
     c5e:	81 95       	neg	r24
     c60:	9f 4f       	sbci	r25, 0xFF	; 255
     c62:	08 95       	ret

00000c64 <strtok>:
     c64:	42 ea       	ldi	r20, 0xA2	; 162
     c66:	52 e0       	ldi	r21, 0x02	; 2
     c68:	0e 94 40 06 	call	0xc80	; 0xc80 <strtok_r>
     c6c:	08 95       	ret

00000c6e <strcmp>:
     c6e:	fb 01       	movw	r30, r22
     c70:	dc 01       	movw	r26, r24
     c72:	8d 91       	ld	r24, X+
     c74:	01 90       	ld	r0, Z+
     c76:	80 19       	sub	r24, r0
     c78:	01 10       	cpse	r0, r1
     c7a:	d9 f3       	breq	.-10     	; 0xc72 <strcmp+0x4>
     c7c:	99 0b       	sbc	r25, r25
     c7e:	08 95       	ret

00000c80 <strtok_r>:
     c80:	fa 01       	movw	r30, r20
     c82:	a1 91       	ld	r26, Z+
     c84:	b0 81       	ld	r27, Z
     c86:	00 97       	sbiw	r24, 0x00	; 0
     c88:	19 f4       	brne	.+6      	; 0xc90 <strtok_r+0x10>
     c8a:	10 97       	sbiw	r26, 0x00	; 0
     c8c:	e1 f0       	breq	.+56     	; 0xcc6 <strtok_r+0x46>
     c8e:	cd 01       	movw	r24, r26
     c90:	dc 01       	movw	r26, r24
     c92:	cd 01       	movw	r24, r26
     c94:	0d 90       	ld	r0, X+
     c96:	00 20       	and	r0, r0
     c98:	11 f4       	brne	.+4      	; 0xc9e <strtok_r+0x1e>
     c9a:	c0 01       	movw	r24, r0
     c9c:	13 c0       	rjmp	.+38     	; 0xcc4 <strtok_r+0x44>
     c9e:	fb 01       	movw	r30, r22
     ca0:	21 91       	ld	r18, Z+
     ca2:	22 23       	and	r18, r18
     ca4:	19 f0       	breq	.+6      	; 0xcac <strtok_r+0x2c>
     ca6:	20 15       	cp	r18, r0
     ca8:	d9 f7       	brne	.-10     	; 0xca0 <strtok_r+0x20>
     caa:	f3 cf       	rjmp	.-26     	; 0xc92 <strtok_r+0x12>
     cac:	fb 01       	movw	r30, r22
     cae:	21 91       	ld	r18, Z+
     cb0:	20 15       	cp	r18, r0
     cb2:	19 f4       	brne	.+6      	; 0xcba <strtok_r+0x3a>
     cb4:	1e 92       	st	-X, r1
     cb6:	11 96       	adiw	r26, 0x01	; 1
     cb8:	06 c0       	rjmp	.+12     	; 0xcc6 <strtok_r+0x46>
     cba:	22 23       	and	r18, r18
     cbc:	c1 f7       	brne	.-16     	; 0xcae <strtok_r+0x2e>
     cbe:	0d 90       	ld	r0, X+
     cc0:	00 20       	and	r0, r0
     cc2:	a1 f7       	brne	.-24     	; 0xcac <strtok_r+0x2c>
     cc4:	d0 01       	movw	r26, r0
     cc6:	fa 01       	movw	r30, r20
     cc8:	a1 93       	st	Z+, r26
     cca:	b0 83       	st	Z, r27
     ccc:	08 95       	ret

00000cce <__mulhi_const_10>:
     cce:	7a e0       	ldi	r23, 0x0A	; 10
     cd0:	97 9f       	mul	r25, r23
     cd2:	90 2d       	mov	r25, r0
     cd4:	87 9f       	mul	r24, r23
     cd6:	80 2d       	mov	r24, r0
     cd8:	91 0d       	add	r25, r1
     cda:	11 24       	eor	r1, r1
     cdc:	08 95       	ret

00000cde <fgets>:
     cde:	cf 92       	push	r12
     ce0:	df 92       	push	r13
     ce2:	ef 92       	push	r14
     ce4:	ff 92       	push	r15
     ce6:	0f 93       	push	r16
     ce8:	1f 93       	push	r17
     cea:	cf 93       	push	r28
     cec:	df 93       	push	r29
     cee:	8c 01       	movw	r16, r24
     cf0:	6a 01       	movw	r12, r20
     cf2:	fa 01       	movw	r30, r20
     cf4:	83 81       	ldd	r24, Z+3	; 0x03
     cf6:	80 ff       	sbrs	r24, 0
     cf8:	1a c0       	rjmp	.+52     	; 0xd2e <fgets+0x50>
     cfa:	16 16       	cp	r1, r22
     cfc:	17 06       	cpc	r1, r23
     cfe:	bc f4       	brge	.+46     	; 0xd2e <fgets+0x50>
     d00:	7b 01       	movw	r14, r22
     d02:	e8 01       	movw	r28, r16
     d04:	0e c0       	rjmp	.+28     	; 0xd22 <fgets+0x44>
     d06:	c6 01       	movw	r24, r12
     d08:	0e 94 07 09 	call	0x120e	; 0x120e <fgetc>
     d0c:	ff ef       	ldi	r31, 0xFF	; 255
     d0e:	8f 3f       	cpi	r24, 0xFF	; 255
     d10:	9f 07       	cpc	r25, r31
     d12:	69 f0       	breq	.+26     	; 0xd2e <fgets+0x50>
     d14:	89 93       	st	Y+, r24
     d16:	08 94       	sec
     d18:	e1 08       	sbc	r14, r1
     d1a:	f1 08       	sbc	r15, r1
     d1c:	8a 30       	cpi	r24, 0x0A	; 10
     d1e:	91 05       	cpc	r25, r1
     d20:	21 f0       	breq	.+8      	; 0xd2a <fgets+0x4c>
     d22:	21 e0       	ldi	r18, 0x01	; 1
     d24:	e2 16       	cp	r14, r18
     d26:	f1 04       	cpc	r15, r1
     d28:	71 f7       	brne	.-36     	; 0xd06 <fgets+0x28>
     d2a:	18 82       	st	Y, r1
     d2c:	02 c0       	rjmp	.+4      	; 0xd32 <fgets+0x54>
     d2e:	00 e0       	ldi	r16, 0x00	; 0
     d30:	10 e0       	ldi	r17, 0x00	; 0
     d32:	c8 01       	movw	r24, r16
     d34:	df 91       	pop	r29
     d36:	cf 91       	pop	r28
     d38:	1f 91       	pop	r17
     d3a:	0f 91       	pop	r16
     d3c:	ff 90       	pop	r15
     d3e:	ef 90       	pop	r14
     d40:	df 90       	pop	r13
     d42:	cf 90       	pop	r12
     d44:	08 95       	ret

00000d46 <printf>:
     d46:	cf 93       	push	r28
     d48:	df 93       	push	r29
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62
     d4e:	fe 01       	movw	r30, r28
     d50:	36 96       	adiw	r30, 0x06	; 6
     d52:	61 91       	ld	r22, Z+
     d54:	71 91       	ld	r23, Z+
     d56:	80 91 b3 04 	lds	r24, 0x04B3
     d5a:	90 91 b4 04 	lds	r25, 0x04B4
     d5e:	af 01       	movw	r20, r30
     d60:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <vfprintf>
     d64:	df 91       	pop	r29
     d66:	cf 91       	pop	r28
     d68:	08 95       	ret

00000d6a <putchar>:
     d6a:	60 91 b3 04 	lds	r22, 0x04B3
     d6e:	70 91 b4 04 	lds	r23, 0x04B4
     d72:	0e 94 47 09 	call	0x128e	; 0x128e <fputc>
     d76:	08 95       	ret

00000d78 <puts>:
     d78:	0f 93       	push	r16
     d7a:	1f 93       	push	r17
     d7c:	cf 93       	push	r28
     d7e:	df 93       	push	r29
     d80:	8c 01       	movw	r16, r24
     d82:	e0 91 b3 04 	lds	r30, 0x04B3
     d86:	f0 91 b4 04 	lds	r31, 0x04B4
     d8a:	83 81       	ldd	r24, Z+3	; 0x03
     d8c:	81 ff       	sbrs	r24, 1
     d8e:	1a c0       	rjmp	.+52     	; 0xdc4 <puts+0x4c>
     d90:	c0 e0       	ldi	r28, 0x00	; 0
     d92:	d0 e0       	ldi	r29, 0x00	; 0
     d94:	05 c0       	rjmp	.+10     	; 0xda0 <puts+0x28>
     d96:	19 95       	eicall
     d98:	00 97       	sbiw	r24, 0x00	; 0
     d9a:	11 f0       	breq	.+4      	; 0xda0 <puts+0x28>
     d9c:	cf ef       	ldi	r28, 0xFF	; 255
     d9e:	df ef       	ldi	r29, 0xFF	; 255
     da0:	f8 01       	movw	r30, r16
     da2:	81 91       	ld	r24, Z+
     da4:	8f 01       	movw	r16, r30
     da6:	60 91 b3 04 	lds	r22, 0x04B3
     daa:	70 91 b4 04 	lds	r23, 0x04B4
     dae:	db 01       	movw	r26, r22
     db0:	18 96       	adiw	r26, 0x08	; 8
     db2:	ed 91       	ld	r30, X+
     db4:	fc 91       	ld	r31, X
     db6:	19 97       	sbiw	r26, 0x09	; 9
     db8:	88 23       	and	r24, r24
     dba:	69 f7       	brne	.-38     	; 0xd96 <puts+0x1e>
     dbc:	8a e0       	ldi	r24, 0x0A	; 10
     dbe:	19 95       	eicall
     dc0:	00 97       	sbiw	r24, 0x00	; 0
     dc2:	11 f0       	breq	.+4      	; 0xdc8 <puts+0x50>
     dc4:	cf ef       	ldi	r28, 0xFF	; 255
     dc6:	df ef       	ldi	r29, 0xFF	; 255
     dc8:	ce 01       	movw	r24, r28
     dca:	df 91       	pop	r29
     dcc:	cf 91       	pop	r28
     dce:	1f 91       	pop	r17
     dd0:	0f 91       	pop	r16
     dd2:	08 95       	ret

00000dd4 <vfprintf>:
     dd4:	2f 92       	push	r2
     dd6:	3f 92       	push	r3
     dd8:	4f 92       	push	r4
     dda:	5f 92       	push	r5
     ddc:	6f 92       	push	r6
     dde:	7f 92       	push	r7
     de0:	8f 92       	push	r8
     de2:	9f 92       	push	r9
     de4:	af 92       	push	r10
     de6:	bf 92       	push	r11
     de8:	cf 92       	push	r12
     dea:	df 92       	push	r13
     dec:	ef 92       	push	r14
     dee:	ff 92       	push	r15
     df0:	0f 93       	push	r16
     df2:	1f 93       	push	r17
     df4:	cf 93       	push	r28
     df6:	df 93       	push	r29
     df8:	cd b7       	in	r28, 0x3d	; 61
     dfa:	de b7       	in	r29, 0x3e	; 62
     dfc:	2d 97       	sbiw	r28, 0x0d	; 13
     dfe:	0f b6       	in	r0, 0x3f	; 63
     e00:	f8 94       	cli
     e02:	de bf       	out	0x3e, r29	; 62
     e04:	0f be       	out	0x3f, r0	; 63
     e06:	cd bf       	out	0x3d, r28	; 61
     e08:	3c 01       	movw	r6, r24
     e0a:	7d 87       	std	Y+13, r23	; 0x0d
     e0c:	6c 87       	std	Y+12, r22	; 0x0c
     e0e:	5a 01       	movw	r10, r20
     e10:	fc 01       	movw	r30, r24
     e12:	17 82       	std	Z+7, r1	; 0x07
     e14:	16 82       	std	Z+6, r1	; 0x06
     e16:	83 81       	ldd	r24, Z+3	; 0x03
     e18:	81 ff       	sbrs	r24, 1
     e1a:	c8 c1       	rjmp	.+912    	; 0x11ac <vfprintf+0x3d8>
     e1c:	2e 01       	movw	r4, r28
     e1e:	08 94       	sec
     e20:	41 1c       	adc	r4, r1
     e22:	51 1c       	adc	r5, r1
     e24:	f3 01       	movw	r30, r6
     e26:	93 81       	ldd	r25, Z+3	; 0x03
     e28:	ec 85       	ldd	r30, Y+12	; 0x0c
     e2a:	fd 85       	ldd	r31, Y+13	; 0x0d
     e2c:	93 fd       	sbrc	r25, 3
     e2e:	85 91       	lpm	r24, Z+
     e30:	93 ff       	sbrs	r25, 3
     e32:	81 91       	ld	r24, Z+
     e34:	fd 87       	std	Y+13, r31	; 0x0d
     e36:	ec 87       	std	Y+12, r30	; 0x0c
     e38:	88 23       	and	r24, r24
     e3a:	09 f4       	brne	.+2      	; 0xe3e <vfprintf+0x6a>
     e3c:	b3 c1       	rjmp	.+870    	; 0x11a4 <vfprintf+0x3d0>
     e3e:	85 32       	cpi	r24, 0x25	; 37
     e40:	41 f4       	brne	.+16     	; 0xe52 <vfprintf+0x7e>
     e42:	93 fd       	sbrc	r25, 3
     e44:	85 91       	lpm	r24, Z+
     e46:	93 ff       	sbrs	r25, 3
     e48:	81 91       	ld	r24, Z+
     e4a:	fd 87       	std	Y+13, r31	; 0x0d
     e4c:	ec 87       	std	Y+12, r30	; 0x0c
     e4e:	85 32       	cpi	r24, 0x25	; 37
     e50:	29 f4       	brne	.+10     	; 0xe5c <vfprintf+0x88>
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	b3 01       	movw	r22, r6
     e56:	0e 94 47 09 	call	0x128e	; 0x128e <fputc>
     e5a:	e4 cf       	rjmp	.-56     	; 0xe24 <vfprintf+0x50>
     e5c:	ff 24       	eor	r15, r15
     e5e:	ee 24       	eor	r14, r14
     e60:	10 e0       	ldi	r17, 0x00	; 0
     e62:	10 32       	cpi	r17, 0x20	; 32
     e64:	b0 f4       	brcc	.+44     	; 0xe92 <vfprintf+0xbe>
     e66:	8b 32       	cpi	r24, 0x2B	; 43
     e68:	69 f0       	breq	.+26     	; 0xe84 <vfprintf+0xb0>
     e6a:	8c 32       	cpi	r24, 0x2C	; 44
     e6c:	28 f4       	brcc	.+10     	; 0xe78 <vfprintf+0xa4>
     e6e:	80 32       	cpi	r24, 0x20	; 32
     e70:	51 f0       	breq	.+20     	; 0xe86 <vfprintf+0xb2>
     e72:	83 32       	cpi	r24, 0x23	; 35
     e74:	71 f4       	brne	.+28     	; 0xe92 <vfprintf+0xbe>
     e76:	0b c0       	rjmp	.+22     	; 0xe8e <vfprintf+0xba>
     e78:	8d 32       	cpi	r24, 0x2D	; 45
     e7a:	39 f0       	breq	.+14     	; 0xe8a <vfprintf+0xb6>
     e7c:	80 33       	cpi	r24, 0x30	; 48
     e7e:	49 f4       	brne	.+18     	; 0xe92 <vfprintf+0xbe>
     e80:	11 60       	ori	r17, 0x01	; 1
     e82:	2c c0       	rjmp	.+88     	; 0xedc <vfprintf+0x108>
     e84:	12 60       	ori	r17, 0x02	; 2
     e86:	14 60       	ori	r17, 0x04	; 4
     e88:	29 c0       	rjmp	.+82     	; 0xedc <vfprintf+0x108>
     e8a:	18 60       	ori	r17, 0x08	; 8
     e8c:	27 c0       	rjmp	.+78     	; 0xedc <vfprintf+0x108>
     e8e:	10 61       	ori	r17, 0x10	; 16
     e90:	25 c0       	rjmp	.+74     	; 0xedc <vfprintf+0x108>
     e92:	17 fd       	sbrc	r17, 7
     e94:	2e c0       	rjmp	.+92     	; 0xef2 <vfprintf+0x11e>
     e96:	28 2f       	mov	r18, r24
     e98:	20 53       	subi	r18, 0x30	; 48
     e9a:	2a 30       	cpi	r18, 0x0A	; 10
     e9c:	98 f4       	brcc	.+38     	; 0xec4 <vfprintf+0xf0>
     e9e:	16 ff       	sbrs	r17, 6
     ea0:	08 c0       	rjmp	.+16     	; 0xeb2 <vfprintf+0xde>
     ea2:	8f 2d       	mov	r24, r15
     ea4:	88 0f       	add	r24, r24
     ea6:	f8 2e       	mov	r15, r24
     ea8:	ff 0c       	add	r15, r15
     eaa:	ff 0c       	add	r15, r15
     eac:	f8 0e       	add	r15, r24
     eae:	f2 0e       	add	r15, r18
     eb0:	15 c0       	rjmp	.+42     	; 0xedc <vfprintf+0x108>
     eb2:	8e 2d       	mov	r24, r14
     eb4:	88 0f       	add	r24, r24
     eb6:	e8 2e       	mov	r14, r24
     eb8:	ee 0c       	add	r14, r14
     eba:	ee 0c       	add	r14, r14
     ebc:	e8 0e       	add	r14, r24
     ebe:	e2 0e       	add	r14, r18
     ec0:	10 62       	ori	r17, 0x20	; 32
     ec2:	0c c0       	rjmp	.+24     	; 0xedc <vfprintf+0x108>
     ec4:	8e 32       	cpi	r24, 0x2E	; 46
     ec6:	21 f4       	brne	.+8      	; 0xed0 <vfprintf+0xfc>
     ec8:	16 fd       	sbrc	r17, 6
     eca:	6c c1       	rjmp	.+728    	; 0x11a4 <vfprintf+0x3d0>
     ecc:	10 64       	ori	r17, 0x40	; 64
     ece:	06 c0       	rjmp	.+12     	; 0xedc <vfprintf+0x108>
     ed0:	8c 36       	cpi	r24, 0x6C	; 108
     ed2:	11 f4       	brne	.+4      	; 0xed8 <vfprintf+0x104>
     ed4:	10 68       	ori	r17, 0x80	; 128
     ed6:	02 c0       	rjmp	.+4      	; 0xedc <vfprintf+0x108>
     ed8:	88 36       	cpi	r24, 0x68	; 104
     eda:	59 f4       	brne	.+22     	; 0xef2 <vfprintf+0x11e>
     edc:	ec 85       	ldd	r30, Y+12	; 0x0c
     ede:	fd 85       	ldd	r31, Y+13	; 0x0d
     ee0:	93 fd       	sbrc	r25, 3
     ee2:	85 91       	lpm	r24, Z+
     ee4:	93 ff       	sbrs	r25, 3
     ee6:	81 91       	ld	r24, Z+
     ee8:	fd 87       	std	Y+13, r31	; 0x0d
     eea:	ec 87       	std	Y+12, r30	; 0x0c
     eec:	88 23       	and	r24, r24
     eee:	09 f0       	breq	.+2      	; 0xef2 <vfprintf+0x11e>
     ef0:	b8 cf       	rjmp	.-144    	; 0xe62 <vfprintf+0x8e>
     ef2:	98 2f       	mov	r25, r24
     ef4:	95 54       	subi	r25, 0x45	; 69
     ef6:	93 30       	cpi	r25, 0x03	; 3
     ef8:	18 f0       	brcs	.+6      	; 0xf00 <vfprintf+0x12c>
     efa:	90 52       	subi	r25, 0x20	; 32
     efc:	93 30       	cpi	r25, 0x03	; 3
     efe:	38 f4       	brcc	.+14     	; 0xf0e <vfprintf+0x13a>
     f00:	24 e0       	ldi	r18, 0x04	; 4
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	a2 0e       	add	r10, r18
     f06:	b3 1e       	adc	r11, r19
     f08:	3f e3       	ldi	r19, 0x3F	; 63
     f0a:	39 83       	std	Y+1, r19	; 0x01
     f0c:	0f c0       	rjmp	.+30     	; 0xf2c <vfprintf+0x158>
     f0e:	83 36       	cpi	r24, 0x63	; 99
     f10:	31 f0       	breq	.+12     	; 0xf1e <vfprintf+0x14a>
     f12:	83 37       	cpi	r24, 0x73	; 115
     f14:	81 f0       	breq	.+32     	; 0xf36 <vfprintf+0x162>
     f16:	83 35       	cpi	r24, 0x53	; 83
     f18:	09 f0       	breq	.+2      	; 0xf1c <vfprintf+0x148>
     f1a:	5a c0       	rjmp	.+180    	; 0xfd0 <vfprintf+0x1fc>
     f1c:	22 c0       	rjmp	.+68     	; 0xf62 <vfprintf+0x18e>
     f1e:	f5 01       	movw	r30, r10
     f20:	80 81       	ld	r24, Z
     f22:	89 83       	std	Y+1, r24	; 0x01
     f24:	22 e0       	ldi	r18, 0x02	; 2
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	a2 0e       	add	r10, r18
     f2a:	b3 1e       	adc	r11, r19
     f2c:	21 e0       	ldi	r18, 0x01	; 1
     f2e:	c2 2e       	mov	r12, r18
     f30:	d1 2c       	mov	r13, r1
     f32:	42 01       	movw	r8, r4
     f34:	14 c0       	rjmp	.+40     	; 0xf5e <vfprintf+0x18a>
     f36:	92 e0       	ldi	r25, 0x02	; 2
     f38:	29 2e       	mov	r2, r25
     f3a:	31 2c       	mov	r3, r1
     f3c:	2a 0c       	add	r2, r10
     f3e:	3b 1c       	adc	r3, r11
     f40:	f5 01       	movw	r30, r10
     f42:	80 80       	ld	r8, Z
     f44:	91 80       	ldd	r9, Z+1	; 0x01
     f46:	16 ff       	sbrs	r17, 6
     f48:	03 c0       	rjmp	.+6      	; 0xf50 <vfprintf+0x17c>
     f4a:	6f 2d       	mov	r22, r15
     f4c:	70 e0       	ldi	r23, 0x00	; 0
     f4e:	02 c0       	rjmp	.+4      	; 0xf54 <vfprintf+0x180>
     f50:	6f ef       	ldi	r22, 0xFF	; 255
     f52:	7f ef       	ldi	r23, 0xFF	; 255
     f54:	c4 01       	movw	r24, r8
     f56:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <strnlen>
     f5a:	6c 01       	movw	r12, r24
     f5c:	51 01       	movw	r10, r2
     f5e:	1f 77       	andi	r17, 0x7F	; 127
     f60:	15 c0       	rjmp	.+42     	; 0xf8c <vfprintf+0x1b8>
     f62:	82 e0       	ldi	r24, 0x02	; 2
     f64:	28 2e       	mov	r2, r24
     f66:	31 2c       	mov	r3, r1
     f68:	2a 0c       	add	r2, r10
     f6a:	3b 1c       	adc	r3, r11
     f6c:	f5 01       	movw	r30, r10
     f6e:	80 80       	ld	r8, Z
     f70:	91 80       	ldd	r9, Z+1	; 0x01
     f72:	16 ff       	sbrs	r17, 6
     f74:	03 c0       	rjmp	.+6      	; 0xf7c <vfprintf+0x1a8>
     f76:	6f 2d       	mov	r22, r15
     f78:	70 e0       	ldi	r23, 0x00	; 0
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <vfprintf+0x1ac>
     f7c:	6f ef       	ldi	r22, 0xFF	; 255
     f7e:	7f ef       	ldi	r23, 0xFF	; 255
     f80:	c4 01       	movw	r24, r8
     f82:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <strnlen_P>
     f86:	6c 01       	movw	r12, r24
     f88:	10 68       	ori	r17, 0x80	; 128
     f8a:	51 01       	movw	r10, r2
     f8c:	13 fd       	sbrc	r17, 3
     f8e:	1c c0       	rjmp	.+56     	; 0xfc8 <vfprintf+0x1f4>
     f90:	06 c0       	rjmp	.+12     	; 0xf9e <vfprintf+0x1ca>
     f92:	80 e2       	ldi	r24, 0x20	; 32
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	b3 01       	movw	r22, r6
     f98:	0e 94 47 09 	call	0x128e	; 0x128e <fputc>
     f9c:	ea 94       	dec	r14
     f9e:	8e 2d       	mov	r24, r14
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	c8 16       	cp	r12, r24
     fa4:	d9 06       	cpc	r13, r25
     fa6:	a8 f3       	brcs	.-22     	; 0xf92 <vfprintf+0x1be>
     fa8:	0f c0       	rjmp	.+30     	; 0xfc8 <vfprintf+0x1f4>
     faa:	f4 01       	movw	r30, r8
     fac:	17 fd       	sbrc	r17, 7
     fae:	85 91       	lpm	r24, Z+
     fb0:	17 ff       	sbrs	r17, 7
     fb2:	81 91       	ld	r24, Z+
     fb4:	4f 01       	movw	r8, r30
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	b3 01       	movw	r22, r6
     fba:	0e 94 47 09 	call	0x128e	; 0x128e <fputc>
     fbe:	e1 10       	cpse	r14, r1
     fc0:	ea 94       	dec	r14
     fc2:	08 94       	sec
     fc4:	c1 08       	sbc	r12, r1
     fc6:	d1 08       	sbc	r13, r1
     fc8:	c1 14       	cp	r12, r1
     fca:	d1 04       	cpc	r13, r1
     fcc:	71 f7       	brne	.-36     	; 0xfaa <vfprintf+0x1d6>
     fce:	e7 c0       	rjmp	.+462    	; 0x119e <vfprintf+0x3ca>
     fd0:	84 36       	cpi	r24, 0x64	; 100
     fd2:	11 f0       	breq	.+4      	; 0xfd8 <vfprintf+0x204>
     fd4:	89 36       	cpi	r24, 0x69	; 105
     fd6:	51 f5       	brne	.+84     	; 0x102c <vfprintf+0x258>
     fd8:	f5 01       	movw	r30, r10
     fda:	17 ff       	sbrs	r17, 7
     fdc:	07 c0       	rjmp	.+14     	; 0xfec <vfprintf+0x218>
     fde:	80 81       	ld	r24, Z
     fe0:	91 81       	ldd	r25, Z+1	; 0x01
     fe2:	a2 81       	ldd	r26, Z+2	; 0x02
     fe4:	b3 81       	ldd	r27, Z+3	; 0x03
     fe6:	24 e0       	ldi	r18, 0x04	; 4
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	08 c0       	rjmp	.+16     	; 0xffc <vfprintf+0x228>
     fec:	80 81       	ld	r24, Z
     fee:	91 81       	ldd	r25, Z+1	; 0x01
     ff0:	aa 27       	eor	r26, r26
     ff2:	97 fd       	sbrc	r25, 7
     ff4:	a0 95       	com	r26
     ff6:	ba 2f       	mov	r27, r26
     ff8:	22 e0       	ldi	r18, 0x02	; 2
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	a2 0e       	add	r10, r18
     ffe:	b3 1e       	adc	r11, r19
    1000:	01 2f       	mov	r16, r17
    1002:	0f 76       	andi	r16, 0x6F	; 111
    1004:	b7 ff       	sbrs	r27, 7
    1006:	08 c0       	rjmp	.+16     	; 0x1018 <vfprintf+0x244>
    1008:	b0 95       	com	r27
    100a:	a0 95       	com	r26
    100c:	90 95       	com	r25
    100e:	81 95       	neg	r24
    1010:	9f 4f       	sbci	r25, 0xFF	; 255
    1012:	af 4f       	sbci	r26, 0xFF	; 255
    1014:	bf 4f       	sbci	r27, 0xFF	; 255
    1016:	00 68       	ori	r16, 0x80	; 128
    1018:	bc 01       	movw	r22, r24
    101a:	cd 01       	movw	r24, r26
    101c:	a2 01       	movw	r20, r4
    101e:	2a e0       	ldi	r18, 0x0A	; 10
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	0e 94 73 09 	call	0x12e6	; 0x12e6 <__ultoa_invert>
    1026:	d8 2e       	mov	r13, r24
    1028:	d4 18       	sub	r13, r4
    102a:	3f c0       	rjmp	.+126    	; 0x10aa <vfprintf+0x2d6>
    102c:	85 37       	cpi	r24, 0x75	; 117
    102e:	21 f4       	brne	.+8      	; 0x1038 <vfprintf+0x264>
    1030:	1f 7e       	andi	r17, 0xEF	; 239
    1032:	2a e0       	ldi	r18, 0x0A	; 10
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	20 c0       	rjmp	.+64     	; 0x1078 <vfprintf+0x2a4>
    1038:	19 7f       	andi	r17, 0xF9	; 249
    103a:	8f 36       	cpi	r24, 0x6F	; 111
    103c:	a9 f0       	breq	.+42     	; 0x1068 <vfprintf+0x294>
    103e:	80 37       	cpi	r24, 0x70	; 112
    1040:	20 f4       	brcc	.+8      	; 0x104a <vfprintf+0x276>
    1042:	88 35       	cpi	r24, 0x58	; 88
    1044:	09 f0       	breq	.+2      	; 0x1048 <vfprintf+0x274>
    1046:	ae c0       	rjmp	.+348    	; 0x11a4 <vfprintf+0x3d0>
    1048:	0b c0       	rjmp	.+22     	; 0x1060 <vfprintf+0x28c>
    104a:	80 37       	cpi	r24, 0x70	; 112
    104c:	21 f0       	breq	.+8      	; 0x1056 <vfprintf+0x282>
    104e:	88 37       	cpi	r24, 0x78	; 120
    1050:	09 f0       	breq	.+2      	; 0x1054 <vfprintf+0x280>
    1052:	a8 c0       	rjmp	.+336    	; 0x11a4 <vfprintf+0x3d0>
    1054:	01 c0       	rjmp	.+2      	; 0x1058 <vfprintf+0x284>
    1056:	10 61       	ori	r17, 0x10	; 16
    1058:	14 ff       	sbrs	r17, 4
    105a:	09 c0       	rjmp	.+18     	; 0x106e <vfprintf+0x29a>
    105c:	14 60       	ori	r17, 0x04	; 4
    105e:	07 c0       	rjmp	.+14     	; 0x106e <vfprintf+0x29a>
    1060:	14 ff       	sbrs	r17, 4
    1062:	08 c0       	rjmp	.+16     	; 0x1074 <vfprintf+0x2a0>
    1064:	16 60       	ori	r17, 0x06	; 6
    1066:	06 c0       	rjmp	.+12     	; 0x1074 <vfprintf+0x2a0>
    1068:	28 e0       	ldi	r18, 0x08	; 8
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	05 c0       	rjmp	.+10     	; 0x1078 <vfprintf+0x2a4>
    106e:	20 e1       	ldi	r18, 0x10	; 16
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	02 c0       	rjmp	.+4      	; 0x1078 <vfprintf+0x2a4>
    1074:	20 e1       	ldi	r18, 0x10	; 16
    1076:	32 e0       	ldi	r19, 0x02	; 2
    1078:	f5 01       	movw	r30, r10
    107a:	17 ff       	sbrs	r17, 7
    107c:	07 c0       	rjmp	.+14     	; 0x108c <vfprintf+0x2b8>
    107e:	60 81       	ld	r22, Z
    1080:	71 81       	ldd	r23, Z+1	; 0x01
    1082:	82 81       	ldd	r24, Z+2	; 0x02
    1084:	93 81       	ldd	r25, Z+3	; 0x03
    1086:	44 e0       	ldi	r20, 0x04	; 4
    1088:	50 e0       	ldi	r21, 0x00	; 0
    108a:	06 c0       	rjmp	.+12     	; 0x1098 <vfprintf+0x2c4>
    108c:	60 81       	ld	r22, Z
    108e:	71 81       	ldd	r23, Z+1	; 0x01
    1090:	80 e0       	ldi	r24, 0x00	; 0
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	42 e0       	ldi	r20, 0x02	; 2
    1096:	50 e0       	ldi	r21, 0x00	; 0
    1098:	a4 0e       	add	r10, r20
    109a:	b5 1e       	adc	r11, r21
    109c:	a2 01       	movw	r20, r4
    109e:	0e 94 73 09 	call	0x12e6	; 0x12e6 <__ultoa_invert>
    10a2:	d8 2e       	mov	r13, r24
    10a4:	d4 18       	sub	r13, r4
    10a6:	01 2f       	mov	r16, r17
    10a8:	0f 77       	andi	r16, 0x7F	; 127
    10aa:	06 ff       	sbrs	r16, 6
    10ac:	09 c0       	rjmp	.+18     	; 0x10c0 <vfprintf+0x2ec>
    10ae:	0e 7f       	andi	r16, 0xFE	; 254
    10b0:	df 14       	cp	r13, r15
    10b2:	30 f4       	brcc	.+12     	; 0x10c0 <vfprintf+0x2ec>
    10b4:	04 ff       	sbrs	r16, 4
    10b6:	06 c0       	rjmp	.+12     	; 0x10c4 <vfprintf+0x2f0>
    10b8:	02 fd       	sbrc	r16, 2
    10ba:	04 c0       	rjmp	.+8      	; 0x10c4 <vfprintf+0x2f0>
    10bc:	0f 7e       	andi	r16, 0xEF	; 239
    10be:	02 c0       	rjmp	.+4      	; 0x10c4 <vfprintf+0x2f0>
    10c0:	1d 2d       	mov	r17, r13
    10c2:	01 c0       	rjmp	.+2      	; 0x10c6 <vfprintf+0x2f2>
    10c4:	1f 2d       	mov	r17, r15
    10c6:	80 2f       	mov	r24, r16
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	04 ff       	sbrs	r16, 4
    10cc:	0c c0       	rjmp	.+24     	; 0x10e6 <vfprintf+0x312>
    10ce:	fe 01       	movw	r30, r28
    10d0:	ed 0d       	add	r30, r13
    10d2:	f1 1d       	adc	r31, r1
    10d4:	20 81       	ld	r18, Z
    10d6:	20 33       	cpi	r18, 0x30	; 48
    10d8:	11 f4       	brne	.+4      	; 0x10de <vfprintf+0x30a>
    10da:	09 7e       	andi	r16, 0xE9	; 233
    10dc:	09 c0       	rjmp	.+18     	; 0x10f0 <vfprintf+0x31c>
    10de:	02 ff       	sbrs	r16, 2
    10e0:	06 c0       	rjmp	.+12     	; 0x10ee <vfprintf+0x31a>
    10e2:	1e 5f       	subi	r17, 0xFE	; 254
    10e4:	05 c0       	rjmp	.+10     	; 0x10f0 <vfprintf+0x31c>
    10e6:	86 78       	andi	r24, 0x86	; 134
    10e8:	90 70       	andi	r25, 0x00	; 0
    10ea:	00 97       	sbiw	r24, 0x00	; 0
    10ec:	09 f0       	breq	.+2      	; 0x10f0 <vfprintf+0x31c>
    10ee:	1f 5f       	subi	r17, 0xFF	; 255
    10f0:	80 2e       	mov	r8, r16
    10f2:	99 24       	eor	r9, r9
    10f4:	03 fd       	sbrc	r16, 3
    10f6:	12 c0       	rjmp	.+36     	; 0x111c <vfprintf+0x348>
    10f8:	00 ff       	sbrs	r16, 0
    10fa:	0d c0       	rjmp	.+26     	; 0x1116 <vfprintf+0x342>
    10fc:	fd 2c       	mov	r15, r13
    10fe:	1e 15       	cp	r17, r14
    1100:	50 f4       	brcc	.+20     	; 0x1116 <vfprintf+0x342>
    1102:	fe 0c       	add	r15, r14
    1104:	f1 1a       	sub	r15, r17
    1106:	1e 2d       	mov	r17, r14
    1108:	06 c0       	rjmp	.+12     	; 0x1116 <vfprintf+0x342>
    110a:	80 e2       	ldi	r24, 0x20	; 32
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	b3 01       	movw	r22, r6
    1110:	0e 94 47 09 	call	0x128e	; 0x128e <fputc>
    1114:	1f 5f       	subi	r17, 0xFF	; 255
    1116:	1e 15       	cp	r17, r14
    1118:	c0 f3       	brcs	.-16     	; 0x110a <vfprintf+0x336>
    111a:	04 c0       	rjmp	.+8      	; 0x1124 <vfprintf+0x350>
    111c:	1e 15       	cp	r17, r14
    111e:	10 f4       	brcc	.+4      	; 0x1124 <vfprintf+0x350>
    1120:	e1 1a       	sub	r14, r17
    1122:	01 c0       	rjmp	.+2      	; 0x1126 <vfprintf+0x352>
    1124:	ee 24       	eor	r14, r14
    1126:	84 fe       	sbrs	r8, 4
    1128:	0f c0       	rjmp	.+30     	; 0x1148 <vfprintf+0x374>
    112a:	80 e3       	ldi	r24, 0x30	; 48
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	b3 01       	movw	r22, r6
    1130:	0e 94 47 09 	call	0x128e	; 0x128e <fputc>
    1134:	82 fe       	sbrs	r8, 2
    1136:	1f c0       	rjmp	.+62     	; 0x1176 <vfprintf+0x3a2>
    1138:	81 fe       	sbrs	r8, 1
    113a:	03 c0       	rjmp	.+6      	; 0x1142 <vfprintf+0x36e>
    113c:	88 e5       	ldi	r24, 0x58	; 88
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	10 c0       	rjmp	.+32     	; 0x1162 <vfprintf+0x38e>
    1142:	88 e7       	ldi	r24, 0x78	; 120
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	0d c0       	rjmp	.+26     	; 0x1162 <vfprintf+0x38e>
    1148:	c4 01       	movw	r24, r8
    114a:	86 78       	andi	r24, 0x86	; 134
    114c:	90 70       	andi	r25, 0x00	; 0
    114e:	00 97       	sbiw	r24, 0x00	; 0
    1150:	91 f0       	breq	.+36     	; 0x1176 <vfprintf+0x3a2>
    1152:	81 fc       	sbrc	r8, 1
    1154:	02 c0       	rjmp	.+4      	; 0x115a <vfprintf+0x386>
    1156:	80 e2       	ldi	r24, 0x20	; 32
    1158:	01 c0       	rjmp	.+2      	; 0x115c <vfprintf+0x388>
    115a:	8b e2       	ldi	r24, 0x2B	; 43
    115c:	07 fd       	sbrc	r16, 7
    115e:	8d e2       	ldi	r24, 0x2D	; 45
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	b3 01       	movw	r22, r6
    1164:	0e 94 47 09 	call	0x128e	; 0x128e <fputc>
    1168:	06 c0       	rjmp	.+12     	; 0x1176 <vfprintf+0x3a2>
    116a:	80 e3       	ldi	r24, 0x30	; 48
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	b3 01       	movw	r22, r6
    1170:	0e 94 47 09 	call	0x128e	; 0x128e <fputc>
    1174:	fa 94       	dec	r15
    1176:	df 14       	cp	r13, r15
    1178:	c0 f3       	brcs	.-16     	; 0x116a <vfprintf+0x396>
    117a:	da 94       	dec	r13
    117c:	f2 01       	movw	r30, r4
    117e:	ed 0d       	add	r30, r13
    1180:	f1 1d       	adc	r31, r1
    1182:	80 81       	ld	r24, Z
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	b3 01       	movw	r22, r6
    1188:	0e 94 47 09 	call	0x128e	; 0x128e <fputc>
    118c:	dd 20       	and	r13, r13
    118e:	a9 f7       	brne	.-22     	; 0x117a <vfprintf+0x3a6>
    1190:	06 c0       	rjmp	.+12     	; 0x119e <vfprintf+0x3ca>
    1192:	80 e2       	ldi	r24, 0x20	; 32
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	b3 01       	movw	r22, r6
    1198:	0e 94 47 09 	call	0x128e	; 0x128e <fputc>
    119c:	ea 94       	dec	r14
    119e:	ee 20       	and	r14, r14
    11a0:	c1 f7       	brne	.-16     	; 0x1192 <vfprintf+0x3be>
    11a2:	40 ce       	rjmp	.-896    	; 0xe24 <vfprintf+0x50>
    11a4:	f3 01       	movw	r30, r6
    11a6:	86 81       	ldd	r24, Z+6	; 0x06
    11a8:	97 81       	ldd	r25, Z+7	; 0x07
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <vfprintf+0x3dc>
    11ac:	8f ef       	ldi	r24, 0xFF	; 255
    11ae:	9f ef       	ldi	r25, 0xFF	; 255
    11b0:	2d 96       	adiw	r28, 0x0d	; 13
    11b2:	0f b6       	in	r0, 0x3f	; 63
    11b4:	f8 94       	cli
    11b6:	de bf       	out	0x3e, r29	; 62
    11b8:	0f be       	out	0x3f, r0	; 63
    11ba:	cd bf       	out	0x3d, r28	; 61
    11bc:	df 91       	pop	r29
    11be:	cf 91       	pop	r28
    11c0:	1f 91       	pop	r17
    11c2:	0f 91       	pop	r16
    11c4:	ff 90       	pop	r15
    11c6:	ef 90       	pop	r14
    11c8:	df 90       	pop	r13
    11ca:	cf 90       	pop	r12
    11cc:	bf 90       	pop	r11
    11ce:	af 90       	pop	r10
    11d0:	9f 90       	pop	r9
    11d2:	8f 90       	pop	r8
    11d4:	7f 90       	pop	r7
    11d6:	6f 90       	pop	r6
    11d8:	5f 90       	pop	r5
    11da:	4f 90       	pop	r4
    11dc:	3f 90       	pop	r3
    11de:	2f 90       	pop	r2
    11e0:	08 95       	ret

000011e2 <strnlen_P>:
    11e2:	fc 01       	movw	r30, r24
    11e4:	05 90       	lpm	r0, Z+
    11e6:	61 50       	subi	r22, 0x01	; 1
    11e8:	70 40       	sbci	r23, 0x00	; 0
    11ea:	01 10       	cpse	r0, r1
    11ec:	d8 f7       	brcc	.-10     	; 0x11e4 <strnlen_P+0x2>
    11ee:	80 95       	com	r24
    11f0:	90 95       	com	r25
    11f2:	8e 0f       	add	r24, r30
    11f4:	9f 1f       	adc	r25, r31
    11f6:	08 95       	ret

000011f8 <strnlen>:
    11f8:	fc 01       	movw	r30, r24
    11fa:	61 50       	subi	r22, 0x01	; 1
    11fc:	70 40       	sbci	r23, 0x00	; 0
    11fe:	01 90       	ld	r0, Z+
    1200:	01 10       	cpse	r0, r1
    1202:	d8 f7       	brcc	.-10     	; 0x11fa <strnlen+0x2>
    1204:	80 95       	com	r24
    1206:	90 95       	com	r25
    1208:	8e 0f       	add	r24, r30
    120a:	9f 1f       	adc	r25, r31
    120c:	08 95       	ret

0000120e <fgetc>:
    120e:	cf 93       	push	r28
    1210:	df 93       	push	r29
    1212:	ec 01       	movw	r28, r24
    1214:	2b 81       	ldd	r18, Y+3	; 0x03
    1216:	20 ff       	sbrs	r18, 0
    1218:	35 c0       	rjmp	.+106    	; 0x1284 <fgetc+0x76>
    121a:	26 ff       	sbrs	r18, 6
    121c:	09 c0       	rjmp	.+18     	; 0x1230 <fgetc+0x22>
    121e:	2f 7b       	andi	r18, 0xBF	; 191
    1220:	2b 83       	std	Y+3, r18	; 0x03
    1222:	8e 81       	ldd	r24, Y+6	; 0x06
    1224:	9f 81       	ldd	r25, Y+7	; 0x07
    1226:	01 96       	adiw	r24, 0x01	; 1
    1228:	9f 83       	std	Y+7, r25	; 0x07
    122a:	8e 83       	std	Y+6, r24	; 0x06
    122c:	8a 81       	ldd	r24, Y+2	; 0x02
    122e:	28 c0       	rjmp	.+80     	; 0x1280 <fgetc+0x72>
    1230:	22 ff       	sbrs	r18, 2
    1232:	0f c0       	rjmp	.+30     	; 0x1252 <fgetc+0x44>
    1234:	e8 81       	ld	r30, Y
    1236:	f9 81       	ldd	r31, Y+1	; 0x01
    1238:	80 81       	ld	r24, Z
    123a:	99 27       	eor	r25, r25
    123c:	87 fd       	sbrc	r24, 7
    123e:	90 95       	com	r25
    1240:	00 97       	sbiw	r24, 0x00	; 0
    1242:	19 f4       	brne	.+6      	; 0x124a <fgetc+0x3c>
    1244:	20 62       	ori	r18, 0x20	; 32
    1246:	2b 83       	std	Y+3, r18	; 0x03
    1248:	1d c0       	rjmp	.+58     	; 0x1284 <fgetc+0x76>
    124a:	31 96       	adiw	r30, 0x01	; 1
    124c:	f9 83       	std	Y+1, r31	; 0x01
    124e:	e8 83       	st	Y, r30
    1250:	11 c0       	rjmp	.+34     	; 0x1274 <fgetc+0x66>
    1252:	ea 85       	ldd	r30, Y+10	; 0x0a
    1254:	fb 85       	ldd	r31, Y+11	; 0x0b
    1256:	ce 01       	movw	r24, r28
    1258:	19 95       	eicall
    125a:	97 ff       	sbrs	r25, 7
    125c:	0b c0       	rjmp	.+22     	; 0x1274 <fgetc+0x66>
    125e:	2b 81       	ldd	r18, Y+3	; 0x03
    1260:	3f ef       	ldi	r19, 0xFF	; 255
    1262:	8f 3f       	cpi	r24, 0xFF	; 255
    1264:	93 07       	cpc	r25, r19
    1266:	11 f4       	brne	.+4      	; 0x126c <fgetc+0x5e>
    1268:	80 e1       	ldi	r24, 0x10	; 16
    126a:	01 c0       	rjmp	.+2      	; 0x126e <fgetc+0x60>
    126c:	80 e2       	ldi	r24, 0x20	; 32
    126e:	82 2b       	or	r24, r18
    1270:	8b 83       	std	Y+3, r24	; 0x03
    1272:	08 c0       	rjmp	.+16     	; 0x1284 <fgetc+0x76>
    1274:	2e 81       	ldd	r18, Y+6	; 0x06
    1276:	3f 81       	ldd	r19, Y+7	; 0x07
    1278:	2f 5f       	subi	r18, 0xFF	; 255
    127a:	3f 4f       	sbci	r19, 0xFF	; 255
    127c:	3f 83       	std	Y+7, r19	; 0x07
    127e:	2e 83       	std	Y+6, r18	; 0x06
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <fgetc+0x7a>
    1284:	8f ef       	ldi	r24, 0xFF	; 255
    1286:	9f ef       	ldi	r25, 0xFF	; 255
    1288:	df 91       	pop	r29
    128a:	cf 91       	pop	r28
    128c:	08 95       	ret

0000128e <fputc>:
    128e:	0f 93       	push	r16
    1290:	1f 93       	push	r17
    1292:	cf 93       	push	r28
    1294:	df 93       	push	r29
    1296:	8c 01       	movw	r16, r24
    1298:	eb 01       	movw	r28, r22
    129a:	8b 81       	ldd	r24, Y+3	; 0x03
    129c:	81 ff       	sbrs	r24, 1
    129e:	1b c0       	rjmp	.+54     	; 0x12d6 <fputc+0x48>
    12a0:	82 ff       	sbrs	r24, 2
    12a2:	0d c0       	rjmp	.+26     	; 0x12be <fputc+0x30>
    12a4:	2e 81       	ldd	r18, Y+6	; 0x06
    12a6:	3f 81       	ldd	r19, Y+7	; 0x07
    12a8:	8c 81       	ldd	r24, Y+4	; 0x04
    12aa:	9d 81       	ldd	r25, Y+5	; 0x05
    12ac:	28 17       	cp	r18, r24
    12ae:	39 07       	cpc	r19, r25
    12b0:	64 f4       	brge	.+24     	; 0x12ca <fputc+0x3c>
    12b2:	e8 81       	ld	r30, Y
    12b4:	f9 81       	ldd	r31, Y+1	; 0x01
    12b6:	01 93       	st	Z+, r16
    12b8:	f9 83       	std	Y+1, r31	; 0x01
    12ba:	e8 83       	st	Y, r30
    12bc:	06 c0       	rjmp	.+12     	; 0x12ca <fputc+0x3c>
    12be:	e8 85       	ldd	r30, Y+8	; 0x08
    12c0:	f9 85       	ldd	r31, Y+9	; 0x09
    12c2:	80 2f       	mov	r24, r16
    12c4:	19 95       	eicall
    12c6:	00 97       	sbiw	r24, 0x00	; 0
    12c8:	31 f4       	brne	.+12     	; 0x12d6 <fputc+0x48>
    12ca:	8e 81       	ldd	r24, Y+6	; 0x06
    12cc:	9f 81       	ldd	r25, Y+7	; 0x07
    12ce:	01 96       	adiw	r24, 0x01	; 1
    12d0:	9f 83       	std	Y+7, r25	; 0x07
    12d2:	8e 83       	std	Y+6, r24	; 0x06
    12d4:	02 c0       	rjmp	.+4      	; 0x12da <fputc+0x4c>
    12d6:	0f ef       	ldi	r16, 0xFF	; 255
    12d8:	1f ef       	ldi	r17, 0xFF	; 255
    12da:	c8 01       	movw	r24, r16
    12dc:	df 91       	pop	r29
    12de:	cf 91       	pop	r28
    12e0:	1f 91       	pop	r17
    12e2:	0f 91       	pop	r16
    12e4:	08 95       	ret

000012e6 <__ultoa_invert>:
    12e6:	fa 01       	movw	r30, r20
    12e8:	aa 27       	eor	r26, r26
    12ea:	28 30       	cpi	r18, 0x08	; 8
    12ec:	51 f1       	breq	.+84     	; 0x1342 <__ultoa_invert+0x5c>
    12ee:	20 31       	cpi	r18, 0x10	; 16
    12f0:	81 f1       	breq	.+96     	; 0x1352 <__ultoa_invert+0x6c>
    12f2:	e8 94       	clt
    12f4:	6f 93       	push	r22
    12f6:	6e 7f       	andi	r22, 0xFE	; 254
    12f8:	6e 5f       	subi	r22, 0xFE	; 254
    12fa:	7f 4f       	sbci	r23, 0xFF	; 255
    12fc:	8f 4f       	sbci	r24, 0xFF	; 255
    12fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1300:	af 4f       	sbci	r26, 0xFF	; 255
    1302:	b1 e0       	ldi	r27, 0x01	; 1
    1304:	3e d0       	rcall	.+124    	; 0x1382 <__ultoa_invert+0x9c>
    1306:	b4 e0       	ldi	r27, 0x04	; 4
    1308:	3c d0       	rcall	.+120    	; 0x1382 <__ultoa_invert+0x9c>
    130a:	67 0f       	add	r22, r23
    130c:	78 1f       	adc	r23, r24
    130e:	89 1f       	adc	r24, r25
    1310:	9a 1f       	adc	r25, r26
    1312:	a1 1d       	adc	r26, r1
    1314:	68 0f       	add	r22, r24
    1316:	79 1f       	adc	r23, r25
    1318:	8a 1f       	adc	r24, r26
    131a:	91 1d       	adc	r25, r1
    131c:	a1 1d       	adc	r26, r1
    131e:	6a 0f       	add	r22, r26
    1320:	71 1d       	adc	r23, r1
    1322:	81 1d       	adc	r24, r1
    1324:	91 1d       	adc	r25, r1
    1326:	a1 1d       	adc	r26, r1
    1328:	20 d0       	rcall	.+64     	; 0x136a <__ultoa_invert+0x84>
    132a:	09 f4       	brne	.+2      	; 0x132e <__ultoa_invert+0x48>
    132c:	68 94       	set
    132e:	3f 91       	pop	r19
    1330:	2a e0       	ldi	r18, 0x0A	; 10
    1332:	26 9f       	mul	r18, r22
    1334:	11 24       	eor	r1, r1
    1336:	30 19       	sub	r19, r0
    1338:	30 5d       	subi	r19, 0xD0	; 208
    133a:	31 93       	st	Z+, r19
    133c:	de f6       	brtc	.-74     	; 0x12f4 <__ultoa_invert+0xe>
    133e:	cf 01       	movw	r24, r30
    1340:	08 95       	ret
    1342:	46 2f       	mov	r20, r22
    1344:	47 70       	andi	r20, 0x07	; 7
    1346:	40 5d       	subi	r20, 0xD0	; 208
    1348:	41 93       	st	Z+, r20
    134a:	b3 e0       	ldi	r27, 0x03	; 3
    134c:	0f d0       	rcall	.+30     	; 0x136c <__ultoa_invert+0x86>
    134e:	c9 f7       	brne	.-14     	; 0x1342 <__ultoa_invert+0x5c>
    1350:	f6 cf       	rjmp	.-20     	; 0x133e <__ultoa_invert+0x58>
    1352:	46 2f       	mov	r20, r22
    1354:	4f 70       	andi	r20, 0x0F	; 15
    1356:	40 5d       	subi	r20, 0xD0	; 208
    1358:	4a 33       	cpi	r20, 0x3A	; 58
    135a:	18 f0       	brcs	.+6      	; 0x1362 <__ultoa_invert+0x7c>
    135c:	49 5d       	subi	r20, 0xD9	; 217
    135e:	31 fd       	sbrc	r19, 1
    1360:	40 52       	subi	r20, 0x20	; 32
    1362:	41 93       	st	Z+, r20
    1364:	02 d0       	rcall	.+4      	; 0x136a <__ultoa_invert+0x84>
    1366:	a9 f7       	brne	.-22     	; 0x1352 <__ultoa_invert+0x6c>
    1368:	ea cf       	rjmp	.-44     	; 0x133e <__ultoa_invert+0x58>
    136a:	b4 e0       	ldi	r27, 0x04	; 4
    136c:	a6 95       	lsr	r26
    136e:	97 95       	ror	r25
    1370:	87 95       	ror	r24
    1372:	77 95       	ror	r23
    1374:	67 95       	ror	r22
    1376:	ba 95       	dec	r27
    1378:	c9 f7       	brne	.-14     	; 0x136c <__ultoa_invert+0x86>
    137a:	00 97       	sbiw	r24, 0x00	; 0
    137c:	61 05       	cpc	r22, r1
    137e:	71 05       	cpc	r23, r1
    1380:	08 95       	ret
    1382:	9b 01       	movw	r18, r22
    1384:	ac 01       	movw	r20, r24
    1386:	0a 2e       	mov	r0, r26
    1388:	06 94       	lsr	r0
    138a:	57 95       	ror	r21
    138c:	47 95       	ror	r20
    138e:	37 95       	ror	r19
    1390:	27 95       	ror	r18
    1392:	ba 95       	dec	r27
    1394:	c9 f7       	brne	.-14     	; 0x1388 <__ultoa_invert+0xa2>
    1396:	62 0f       	add	r22, r18
    1398:	73 1f       	adc	r23, r19
    139a:	84 1f       	adc	r24, r20
    139c:	95 1f       	adc	r25, r21
    139e:	a0 1d       	adc	r26, r0
    13a0:	08 95       	ret

000013a2 <_exit>:
    13a2:	f8 94       	cli

000013a4 <__stop_program>:
    13a4:	ff cf       	rjmp	.-2      	; 0x13a4 <__stop_program>
